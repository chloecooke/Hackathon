{"version":3,"file":"three_examples_jsm_loaders_GLTFLoader__js.js","names":["self","res","sourceURI","node","accessor"],"sources":["../../three/examples/jsm/utils/BufferGeometryUtils.js","../../three/examples/jsm/loaders/GLTFLoader.js"],"sourcesContent":["import {\n\tBufferAttribute,\n\tBufferGeometry,\n\tFloat32BufferAttribute,\n\tInstancedBufferAttribute,\n\tInterleavedBuffer,\n\tInterleavedBufferAttribute,\n\tTriangleFanDrawMode,\n\tTriangleStripDrawMode,\n\tTrianglesDrawMode,\n\tVector3,\n} from 'three';\n\n/**\n * @module BufferGeometryUtils\n * @three_import import * as BufferGeometryUtils from 'three/addons/utils/BufferGeometryUtils.js';\n */\n\n/**\n * Computes vertex tangents using the MikkTSpace algorithm. MikkTSpace generates the same tangents consistently,\n * and is used in most modelling tools and normal map bakers. Use MikkTSpace for materials with normal maps,\n * because inconsistent tangents may lead to subtle visual issues in the normal map, particularly around mirrored\n * UV seams.\n *\n * In comparison to this method, {@link BufferGeometry#computeTangents} (a custom algorithm) generates tangents that\n * probably will not match the tangents in other software. The custom algorithm is sufficient for general use with a\n * custom material, and may be faster than MikkTSpace.\n *\n * Returns the original BufferGeometry. Indexed geometries will be de-indexed. Requires position, normal, and uv attributes.\n *\n * @param {BufferGeometry} geometry - The geometry to compute tangents for.\n * @param {Object} MikkTSpace - Instance of `examples/jsm/libs/mikktspace.module.js`, or `mikktspace` npm package.\n * Await `MikkTSpace.ready` before use.\n * @param {boolean} [negateSign=true] - Whether to negate the sign component (.w) of each tangent.\n * Required for normal map conventions in some formats, including glTF.\n * @return {BufferGeometry} The updated geometry.\n */\nfunction computeMikkTSpaceTangents( geometry, MikkTSpace, negateSign = true ) {\n\n\tif ( ! MikkTSpace || ! MikkTSpace.isReady ) {\n\n\t\tthrow new Error( 'BufferGeometryUtils: Initialized MikkTSpace library required.' );\n\n\t}\n\n\tif ( ! geometry.hasAttribute( 'position' ) || ! geometry.hasAttribute( 'normal' ) || ! geometry.hasAttribute( 'uv' ) ) {\n\n\t\tthrow new Error( 'BufferGeometryUtils: Tangents require \"position\", \"normal\", and \"uv\" attributes.' );\n\n\t}\n\n\tfunction getAttributeArray( attribute ) {\n\n\t\tif ( attribute.normalized || attribute.isInterleavedBufferAttribute ) {\n\n\t\t\tconst dstArray = new Float32Array( attribute.count * attribute.itemSize );\n\n\t\t\tfor ( let i = 0, j = 0; i < attribute.count; i ++ ) {\n\n\t\t\t\tdstArray[ j ++ ] = attribute.getX( i );\n\t\t\t\tdstArray[ j ++ ] = attribute.getY( i );\n\n\t\t\t\tif ( attribute.itemSize > 2 ) {\n\n\t\t\t\t\tdstArray[ j ++ ] = attribute.getZ( i );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn dstArray;\n\n\t\t}\n\n\t\tif ( attribute.array instanceof Float32Array ) {\n\n\t\t\treturn attribute.array;\n\n\t\t}\n\n\t\treturn new Float32Array( attribute.array );\n\n\t}\n\n\t// MikkTSpace algorithm requires non-indexed input.\n\n\tconst _geometry = geometry.index ? geometry.toNonIndexed() : geometry;\n\n\t// Compute vertex tangents.\n\n\tconst tangents = MikkTSpace.generateTangents(\n\n\t\tgetAttributeArray( _geometry.attributes.position ),\n\t\tgetAttributeArray( _geometry.attributes.normal ),\n\t\tgetAttributeArray( _geometry.attributes.uv )\n\n\t);\n\n\t// Texture coordinate convention of glTF differs from the apparent\n\t// default of the MikkTSpace library; .w component must be flipped.\n\n\tif ( negateSign ) {\n\n\t\tfor ( let i = 3; i < tangents.length; i += 4 ) {\n\n\t\t\ttangents[ i ] *= - 1;\n\n\t\t}\n\n\t}\n\n\t//\n\n\t_geometry.setAttribute( 'tangent', new BufferAttribute( tangents, 4 ) );\n\n\tif ( geometry !== _geometry ) {\n\n\t\tgeometry.copy( _geometry );\n\n\t}\n\n\treturn geometry;\n\n}\n\n/**\n * Merges a set of geometries into a single instance. All geometries must have compatible attributes.\n *\n * @param {Array<BufferGeometry>} geometries - The geometries to merge.\n * @param {boolean} [useGroups=false] - Whether to use groups or not.\n * @return {?BufferGeometry} The merged geometry. Returns `null` if the merge does not succeed.\n */\nfunction mergeGeometries( geometries, useGroups = false ) {\n\n\tconst isIndexed = geometries[ 0 ].index !== null;\n\n\tconst attributesUsed = new Set( Object.keys( geometries[ 0 ].attributes ) );\n\tconst morphAttributesUsed = new Set( Object.keys( geometries[ 0 ].morphAttributes ) );\n\n\tconst attributes = {};\n\tconst morphAttributes = {};\n\n\tconst morphTargetsRelative = geometries[ 0 ].morphTargetsRelative;\n\n\tconst mergedGeometry = new BufferGeometry();\n\n\tlet offset = 0;\n\n\tfor ( let i = 0; i < geometries.length; ++ i ) {\n\n\t\tconst geometry = geometries[ i ];\n\t\tlet attributesCount = 0;\n\n\t\t// ensure that all geometries are indexed, or none\n\n\t\tif ( isIndexed !== ( geometry.index !== null ) ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeGeometries() failed with geometry at index ' + i + '. All geometries must have compatible attributes; make sure index attribute exists among all geometries, or in none of them.' );\n\t\t\treturn null;\n\n\t\t}\n\n\t\t// gather attributes, exit early if they're different\n\n\t\tfor ( const name in geometry.attributes ) {\n\n\t\t\tif ( ! attributesUsed.has( name ) ) {\n\n\t\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeGeometries() failed with geometry at index ' + i + '. All geometries must have compatible attributes; make sure \"' + name + '\" attribute exists among all geometries, or in none of them.' );\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tif ( attributes[ name ] === undefined ) attributes[ name ] = [];\n\n\t\t\tattributes[ name ].push( geometry.attributes[ name ] );\n\n\t\t\tattributesCount ++;\n\n\t\t}\n\n\t\t// ensure geometries have the same number of attributes\n\n\t\tif ( attributesCount !== attributesUsed.size ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeGeometries() failed with geometry at index ' + i + '. Make sure all geometries have the same number of attributes.' );\n\t\t\treturn null;\n\n\t\t}\n\n\t\t// gather morph attributes, exit early if they're different\n\n\t\tif ( morphTargetsRelative !== geometry.morphTargetsRelative ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeGeometries() failed with geometry at index ' + i + '. .morphTargetsRelative must be consistent throughout all geometries.' );\n\t\t\treturn null;\n\n\t\t}\n\n\t\tfor ( const name in geometry.morphAttributes ) {\n\n\t\t\tif ( ! morphAttributesUsed.has( name ) ) {\n\n\t\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeGeometries() failed with geometry at index ' + i + '.  .morphAttributes must be consistent throughout all geometries.' );\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tif ( morphAttributes[ name ] === undefined ) morphAttributes[ name ] = [];\n\n\t\t\tmorphAttributes[ name ].push( geometry.morphAttributes[ name ] );\n\n\t\t}\n\n\t\tif ( useGroups ) {\n\n\t\t\tlet count;\n\n\t\t\tif ( isIndexed ) {\n\n\t\t\t\tcount = geometry.index.count;\n\n\t\t\t} else if ( geometry.attributes.position !== undefined ) {\n\n\t\t\t\tcount = geometry.attributes.position.count;\n\n\t\t\t} else {\n\n\t\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeGeometries() failed with geometry at index ' + i + '. The geometry must have either an index or a position attribute' );\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tmergedGeometry.addGroup( offset, count, i );\n\n\t\t\toffset += count;\n\n\t\t}\n\n\t}\n\n\t// merge indices\n\n\tif ( isIndexed ) {\n\n\t\tlet indexOffset = 0;\n\t\tconst mergedIndex = [];\n\n\t\tfor ( let i = 0; i < geometries.length; ++ i ) {\n\n\t\t\tconst index = geometries[ i ].index;\n\n\t\t\tfor ( let j = 0; j < index.count; ++ j ) {\n\n\t\t\t\tmergedIndex.push( index.getX( j ) + indexOffset );\n\n\t\t\t}\n\n\t\t\tindexOffset += geometries[ i ].attributes.position.count;\n\n\t\t}\n\n\t\tmergedGeometry.setIndex( mergedIndex );\n\n\t}\n\n\t// merge attributes\n\n\tfor ( const name in attributes ) {\n\n\t\tconst mergedAttribute = mergeAttributes( attributes[ name ] );\n\n\t\tif ( ! mergedAttribute ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeGeometries() failed while trying to merge the ' + name + ' attribute.' );\n\t\t\treturn null;\n\n\t\t}\n\n\t\tmergedGeometry.setAttribute( name, mergedAttribute );\n\n\t}\n\n\t// merge morph attributes\n\n\tfor ( const name in morphAttributes ) {\n\n\t\tconst numMorphTargets = morphAttributes[ name ][ 0 ].length;\n\n\t\tif ( numMorphTargets === 0 ) break;\n\n\t\tmergedGeometry.morphAttributes = mergedGeometry.morphAttributes || {};\n\t\tmergedGeometry.morphAttributes[ name ] = [];\n\n\t\tfor ( let i = 0; i < numMorphTargets; ++ i ) {\n\n\t\t\tconst morphAttributesToMerge = [];\n\n\t\t\tfor ( let j = 0; j < morphAttributes[ name ].length; ++ j ) {\n\n\t\t\t\tmorphAttributesToMerge.push( morphAttributes[ name ][ j ][ i ] );\n\n\t\t\t}\n\n\t\t\tconst mergedMorphAttribute = mergeAttributes( morphAttributesToMerge );\n\n\t\t\tif ( ! mergedMorphAttribute ) {\n\n\t\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeGeometries() failed while trying to merge the ' + name + ' morphAttribute.' );\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tmergedGeometry.morphAttributes[ name ].push( mergedMorphAttribute );\n\n\t\t}\n\n\t}\n\n\treturn mergedGeometry;\n\n}\n\n/**\n * Merges a set of attributes into a single instance. All attributes must have compatible properties and types.\n * Instances of {@link InterleavedBufferAttribute} are not supported.\n *\n * @param {Array<BufferAttribute>} attributes - The attributes to merge.\n * @return {?BufferAttribute} The merged attribute. Returns `null` if the merge does not succeed.\n */\nfunction mergeAttributes( attributes ) {\n\n\tlet TypedArray;\n\tlet itemSize;\n\tlet normalized;\n\tlet gpuType = - 1;\n\tlet arrayLength = 0;\n\n\tfor ( let i = 0; i < attributes.length; ++ i ) {\n\n\t\tconst attribute = attributes[ i ];\n\n\t\tif ( TypedArray === undefined ) TypedArray = attribute.array.constructor;\n\t\tif ( TypedArray !== attribute.array.constructor ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeAttributes() failed. BufferAttribute.array must be of consistent array types across matching attributes.' );\n\t\t\treturn null;\n\n\t\t}\n\n\t\tif ( itemSize === undefined ) itemSize = attribute.itemSize;\n\t\tif ( itemSize !== attribute.itemSize ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeAttributes() failed. BufferAttribute.itemSize must be consistent across matching attributes.' );\n\t\t\treturn null;\n\n\t\t}\n\n\t\tif ( normalized === undefined ) normalized = attribute.normalized;\n\t\tif ( normalized !== attribute.normalized ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeAttributes() failed. BufferAttribute.normalized must be consistent across matching attributes.' );\n\t\t\treturn null;\n\n\t\t}\n\n\t\tif ( gpuType === - 1 ) gpuType = attribute.gpuType;\n\t\tif ( gpuType !== attribute.gpuType ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeAttributes() failed. BufferAttribute.gpuType must be consistent across matching attributes.' );\n\t\t\treturn null;\n\n\t\t}\n\n\t\tarrayLength += attribute.count * itemSize;\n\n\t}\n\n\tconst array = new TypedArray( arrayLength );\n\tconst result = new BufferAttribute( array, itemSize, normalized );\n\tlet offset = 0;\n\n\tfor ( let i = 0; i < attributes.length; ++ i ) {\n\n\t\tconst attribute = attributes[ i ];\n\t\tif ( attribute.isInterleavedBufferAttribute ) {\n\n\t\t\tconst tupleOffset = offset / itemSize;\n\t\t\tfor ( let j = 0, l = attribute.count; j < l; j ++ ) {\n\n\t\t\t\tfor ( let c = 0; c < itemSize; c ++ ) {\n\n\t\t\t\t\tconst value = attribute.getComponent( j, c );\n\t\t\t\t\tresult.setComponent( j + tupleOffset, c, value );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tarray.set( attribute.array, offset );\n\n\t\t}\n\n\t\toffset += attribute.count * itemSize;\n\n\t}\n\n\tif ( gpuType !== undefined ) {\n\n\t\tresult.gpuType = gpuType;\n\n\t}\n\n\treturn result;\n\n}\n\n/**\n * Performs a deep clone of the given buffer attribute.\n *\n * @param {BufferAttribute} attribute - The attribute to clone.\n * @return {BufferAttribute} The cloned attribute.\n */\nfunction deepCloneAttribute( attribute ) {\n\n\tif ( attribute.isInstancedInterleavedBufferAttribute || attribute.isInterleavedBufferAttribute ) {\n\n\t\treturn deinterleaveAttribute( attribute );\n\n\t}\n\n\tif ( attribute.isInstancedBufferAttribute ) {\n\n\t\treturn new InstancedBufferAttribute().copy( attribute );\n\n\t}\n\n\treturn new BufferAttribute().copy( attribute );\n\n}\n\n/**\n * Interleaves a set of attributes and returns a new array of corresponding attributes that share a\n * single {@link InterleavedBuffer} instance. All attributes must have compatible types.\n *\n * @param {Array<BufferAttribute>} attributes - The attributes to interleave.\n * @return {?Array<InterleavedBufferAttribute>} An array of interleaved attributes. If interleave does not succeed, the method returns `null`.\n */\nfunction interleaveAttributes( attributes ) {\n\n\t// Interleaves the provided attributes into an InterleavedBuffer and returns\n\t// a set of InterleavedBufferAttributes for each attribute\n\tlet TypedArray;\n\tlet arrayLength = 0;\n\tlet stride = 0;\n\n\t// calculate the length and type of the interleavedBuffer\n\tfor ( let i = 0, l = attributes.length; i < l; ++ i ) {\n\n\t\tconst attribute = attributes[ i ];\n\n\t\tif ( TypedArray === undefined ) TypedArray = attribute.array.constructor;\n\t\tif ( TypedArray !== attribute.array.constructor ) {\n\n\t\t\tconsole.error( 'AttributeBuffers of different types cannot be interleaved' );\n\t\t\treturn null;\n\n\t\t}\n\n\t\tarrayLength += attribute.array.length;\n\t\tstride += attribute.itemSize;\n\n\t}\n\n\t// Create the set of buffer attributes\n\tconst interleavedBuffer = new InterleavedBuffer( new TypedArray( arrayLength ), stride );\n\tlet offset = 0;\n\tconst res = [];\n\tconst getters = [ 'getX', 'getY', 'getZ', 'getW' ];\n\tconst setters = [ 'setX', 'setY', 'setZ', 'setW' ];\n\n\tfor ( let j = 0, l = attributes.length; j < l; j ++ ) {\n\n\t\tconst attribute = attributes[ j ];\n\t\tconst itemSize = attribute.itemSize;\n\t\tconst count = attribute.count;\n\t\tconst iba = new InterleavedBufferAttribute( interleavedBuffer, itemSize, offset, attribute.normalized );\n\t\tres.push( iba );\n\n\t\toffset += itemSize;\n\n\t\t// Move the data for each attribute into the new interleavedBuffer\n\t\t// at the appropriate offset\n\t\tfor ( let c = 0; c < count; c ++ ) {\n\n\t\t\tfor ( let k = 0; k < itemSize; k ++ ) {\n\n\t\t\t\tiba[ setters[ k ] ]( c, attribute[ getters[ k ] ]( c ) );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\treturn res;\n\n}\n\n/**\n * Returns a new, non-interleaved version of the given attribute.\n *\n * @param {InterleavedBufferAttribute} attribute - The interleaved attribute.\n * @return {BufferAttribute} The non-interleaved attribute.\n */\nfunction deinterleaveAttribute( attribute ) {\n\n\tconst cons = attribute.data.array.constructor;\n\tconst count = attribute.count;\n\tconst itemSize = attribute.itemSize;\n\tconst normalized = attribute.normalized;\n\n\tconst array = new cons( count * itemSize );\n\tlet newAttribute;\n\tif ( attribute.isInstancedInterleavedBufferAttribute ) {\n\n\t\tnewAttribute = new InstancedBufferAttribute( array, itemSize, normalized, attribute.meshPerAttribute );\n\n\t} else {\n\n\t\tnewAttribute = new BufferAttribute( array, itemSize, normalized );\n\n\t}\n\n\tfor ( let i = 0; i < count; i ++ ) {\n\n\t\tnewAttribute.setX( i, attribute.getX( i ) );\n\n\t\tif ( itemSize >= 2 ) {\n\n\t\t\tnewAttribute.setY( i, attribute.getY( i ) );\n\n\t\t}\n\n\t\tif ( itemSize >= 3 ) {\n\n\t\t\tnewAttribute.setZ( i, attribute.getZ( i ) );\n\n\t\t}\n\n\t\tif ( itemSize >= 4 ) {\n\n\t\t\tnewAttribute.setW( i, attribute.getW( i ) );\n\n\t\t}\n\n\t}\n\n\treturn newAttribute;\n\n}\n\n/**\n * Deinterleaves all attributes on the given geometry.\n *\n * @param {BufferGeometry} geometry - The geometry to deinterleave.\n */\nfunction deinterleaveGeometry( geometry ) {\n\n\tconst attributes = geometry.attributes;\n\tconst morphTargets = geometry.morphTargets;\n\tconst attrMap = new Map();\n\n\tfor ( const key in attributes ) {\n\n\t\tconst attr = attributes[ key ];\n\t\tif ( attr.isInterleavedBufferAttribute ) {\n\n\t\t\tif ( ! attrMap.has( attr ) ) {\n\n\t\t\t\tattrMap.set( attr, deinterleaveAttribute( attr ) );\n\n\t\t\t}\n\n\t\t\tattributes[ key ] = attrMap.get( attr );\n\n\t\t}\n\n\t}\n\n\tfor ( const key in morphTargets ) {\n\n\t\tconst attr = morphTargets[ key ];\n\t\tif ( attr.isInterleavedBufferAttribute ) {\n\n\t\t\tif ( ! attrMap.has( attr ) ) {\n\n\t\t\t\tattrMap.set( attr, deinterleaveAttribute( attr ) );\n\n\t\t\t}\n\n\t\t\tmorphTargets[ key ] = attrMap.get( attr );\n\n\t\t}\n\n\t}\n\n}\n\n/**\n * Returns the amount of bytes used by all attributes to represent the geometry.\n *\n * @param {BufferGeometry} geometry - The geometry.\n * @return {number} The estimate bytes used.\n */\nfunction estimateBytesUsed( geometry ) {\n\n\t// Return the estimated memory used by this geometry in bytes\n\t// Calculate using itemSize, count, and BYTES_PER_ELEMENT to account\n\t// for InterleavedBufferAttributes.\n\tlet mem = 0;\n\tfor ( const name in geometry.attributes ) {\n\n\t\tconst attr = geometry.getAttribute( name );\n\t\tmem += attr.count * attr.itemSize * attr.array.BYTES_PER_ELEMENT;\n\n\t}\n\n\tconst indices = geometry.getIndex();\n\tmem += indices ? indices.count * indices.itemSize * indices.array.BYTES_PER_ELEMENT : 0;\n\treturn mem;\n\n}\n\n/**\n * Returns a new geometry with vertices for which all similar vertex attributes (within tolerance) are merged.\n *\n * @param {BufferGeometry} geometry - The geometry to merge vertices for.\n * @param {number} [tolerance=1e-4] - The tolerance value.\n * @return {BufferGeometry} - The new geometry with merged vertices.\n */\nfunction mergeVertices( geometry, tolerance = 1e-4 ) {\n\n\ttolerance = Math.max( tolerance, Number.EPSILON );\n\n\t// Generate an index buffer if the geometry doesn't have one, or optimize it\n\t// if it's already available.\n\tconst hashToIndex = {};\n\tconst indices = geometry.getIndex();\n\tconst positions = geometry.getAttribute( 'position' );\n\tconst vertexCount = indices ? indices.count : positions.count;\n\n\t// next value for triangle indices\n\tlet nextIndex = 0;\n\n\t// attributes and new attribute arrays\n\tconst attributeNames = Object.keys( geometry.attributes );\n\tconst tmpAttributes = {};\n\tconst tmpMorphAttributes = {};\n\tconst newIndices = [];\n\tconst getters = [ 'getX', 'getY', 'getZ', 'getW' ];\n\tconst setters = [ 'setX', 'setY', 'setZ', 'setW' ];\n\n\t// Initialize the arrays, allocating space conservatively. Extra\n\t// space will be trimmed in the last step.\n\tfor ( let i = 0, l = attributeNames.length; i < l; i ++ ) {\n\n\t\tconst name = attributeNames[ i ];\n\t\tconst attr = geometry.attributes[ name ];\n\n\t\ttmpAttributes[ name ] = new attr.constructor(\n\t\t\tnew attr.array.constructor( attr.count * attr.itemSize ),\n\t\t\tattr.itemSize,\n\t\t\tattr.normalized\n\t\t);\n\n\t\tconst morphAttributes = geometry.morphAttributes[ name ];\n\t\tif ( morphAttributes ) {\n\n\t\t\tif ( ! tmpMorphAttributes[ name ] ) tmpMorphAttributes[ name ] = [];\n\t\t\tmorphAttributes.forEach( ( morphAttr, i ) => {\n\n\t\t\t\tconst array = new morphAttr.array.constructor( morphAttr.count * morphAttr.itemSize );\n\t\t\t\ttmpMorphAttributes[ name ][ i ] = new morphAttr.constructor( array, morphAttr.itemSize, morphAttr.normalized );\n\n\t\t\t} );\n\n\t\t}\n\n\t}\n\n\t// convert the error tolerance to an amount of decimal places to truncate to\n\tconst halfTolerance = tolerance * 0.5;\n\tconst exponent = Math.log10( 1 / tolerance );\n\tconst hashMultiplier = Math.pow( 10, exponent );\n\tconst hashAdditive = halfTolerance * hashMultiplier;\n\tfor ( let i = 0; i < vertexCount; i ++ ) {\n\n\t\tconst index = indices ? indices.getX( i ) : i;\n\n\t\t// Generate a hash for the vertex attributes at the current index 'i'\n\t\tlet hash = '';\n\t\tfor ( let j = 0, l = attributeNames.length; j < l; j ++ ) {\n\n\t\t\tconst name = attributeNames[ j ];\n\t\t\tconst attribute = geometry.getAttribute( name );\n\t\t\tconst itemSize = attribute.itemSize;\n\n\t\t\tfor ( let k = 0; k < itemSize; k ++ ) {\n\n\t\t\t\t// double tilde truncates the decimal value\n\t\t\t\thash += `${ ~ ~ ( attribute[ getters[ k ] ]( index ) * hashMultiplier + hashAdditive ) },`;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Add another reference to the vertex if it's already\n\t\t// used by another index\n\t\tif ( hash in hashToIndex ) {\n\n\t\t\tnewIndices.push( hashToIndex[ hash ] );\n\n\t\t} else {\n\n\t\t\t// copy data to the new index in the temporary attributes\n\t\t\tfor ( let j = 0, l = attributeNames.length; j < l; j ++ ) {\n\n\t\t\t\tconst name = attributeNames[ j ];\n\t\t\t\tconst attribute = geometry.getAttribute( name );\n\t\t\t\tconst morphAttributes = geometry.morphAttributes[ name ];\n\t\t\t\tconst itemSize = attribute.itemSize;\n\t\t\t\tconst newArray = tmpAttributes[ name ];\n\t\t\t\tconst newMorphArrays = tmpMorphAttributes[ name ];\n\n\t\t\t\tfor ( let k = 0; k < itemSize; k ++ ) {\n\n\t\t\t\t\tconst getterFunc = getters[ k ];\n\t\t\t\t\tconst setterFunc = setters[ k ];\n\t\t\t\t\tnewArray[ setterFunc ]( nextIndex, attribute[ getterFunc ]( index ) );\n\n\t\t\t\t\tif ( morphAttributes ) {\n\n\t\t\t\t\t\tfor ( let m = 0, ml = morphAttributes.length; m < ml; m ++ ) {\n\n\t\t\t\t\t\t\tnewMorphArrays[ m ][ setterFunc ]( nextIndex, morphAttributes[ m ][ getterFunc ]( index ) );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\thashToIndex[ hash ] = nextIndex;\n\t\t\tnewIndices.push( nextIndex );\n\t\t\tnextIndex ++;\n\n\t\t}\n\n\t}\n\n\t// generate result BufferGeometry\n\tconst result = geometry.clone();\n\tfor ( const name in geometry.attributes ) {\n\n\t\tconst tmpAttribute = tmpAttributes[ name ];\n\n\t\tresult.setAttribute( name, new tmpAttribute.constructor(\n\t\t\ttmpAttribute.array.slice( 0, nextIndex * tmpAttribute.itemSize ),\n\t\t\ttmpAttribute.itemSize,\n\t\t\ttmpAttribute.normalized,\n\t\t) );\n\n\t\tif ( ! ( name in tmpMorphAttributes ) ) continue;\n\n\t\tfor ( let j = 0; j < tmpMorphAttributes[ name ].length; j ++ ) {\n\n\t\t\tconst tmpMorphAttribute = tmpMorphAttributes[ name ][ j ];\n\n\t\t\tresult.morphAttributes[ name ][ j ] = new tmpMorphAttribute.constructor(\n\t\t\t\ttmpMorphAttribute.array.slice( 0, nextIndex * tmpMorphAttribute.itemSize ),\n\t\t\t\ttmpMorphAttribute.itemSize,\n\t\t\t\ttmpMorphAttribute.normalized,\n\t\t\t);\n\n\t\t}\n\n\t}\n\n\t// indices\n\n\tresult.setIndex( newIndices );\n\n\treturn result;\n\n}\n\n/**\n * Returns a new indexed geometry based on `TrianglesDrawMode` draw mode.\n * This mode corresponds to the `gl.TRIANGLES` primitive in WebGL.\n *\n * @param {BufferGeometry} geometry - The geometry to convert.\n * @param {number} drawMode - The current draw mode.\n * @return {BufferGeometry} The new geometry using `TrianglesDrawMode`.\n */\nfunction toTrianglesDrawMode( geometry, drawMode ) {\n\n\tif ( drawMode === TrianglesDrawMode ) {\n\n\t\tconsole.warn( 'THREE.BufferGeometryUtils.toTrianglesDrawMode(): Geometry already defined as triangles.' );\n\t\treturn geometry;\n\n\t}\n\n\tif ( drawMode === TriangleFanDrawMode || drawMode === TriangleStripDrawMode ) {\n\n\t\tlet index = geometry.getIndex();\n\n\t\t// generate index if not present\n\n\t\tif ( index === null ) {\n\n\t\t\tconst indices = [];\n\n\t\t\tconst position = geometry.getAttribute( 'position' );\n\n\t\t\tif ( position !== undefined ) {\n\n\t\t\t\tfor ( let i = 0; i < position.count; i ++ ) {\n\n\t\t\t\t\tindices.push( i );\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.setIndex( indices );\n\t\t\t\tindex = geometry.getIndex();\n\n\t\t\t} else {\n\n\t\t\t\tconsole.error( 'THREE.BufferGeometryUtils.toTrianglesDrawMode(): Undefined position attribute. Processing not possible.' );\n\t\t\t\treturn geometry;\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tconst numberOfTriangles = index.count - 2;\n\t\tconst newIndices = [];\n\n\t\tif ( drawMode === TriangleFanDrawMode ) {\n\n\t\t\t// gl.TRIANGLE_FAN\n\n\t\t\tfor ( let i = 1; i <= numberOfTriangles; i ++ ) {\n\n\t\t\t\tnewIndices.push( index.getX( 0 ) );\n\t\t\t\tnewIndices.push( index.getX( i ) );\n\t\t\t\tnewIndices.push( index.getX( i + 1 ) );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// gl.TRIANGLE_STRIP\n\n\t\t\tfor ( let i = 0; i < numberOfTriangles; i ++ ) {\n\n\t\t\t\tif ( i % 2 === 0 ) {\n\n\t\t\t\t\tnewIndices.push( index.getX( i ) );\n\t\t\t\t\tnewIndices.push( index.getX( i + 1 ) );\n\t\t\t\t\tnewIndices.push( index.getX( i + 2 ) );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tnewIndices.push( index.getX( i + 2 ) );\n\t\t\t\t\tnewIndices.push( index.getX( i + 1 ) );\n\t\t\t\t\tnewIndices.push( index.getX( i ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( ( newIndices.length / 3 ) !== numberOfTriangles ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometryUtils.toTrianglesDrawMode(): Unable to generate correct amount of triangles.' );\n\n\t\t}\n\n\t\t// build final geometry\n\n\t\tconst newGeometry = geometry.clone();\n\t\tnewGeometry.setIndex( newIndices );\n\t\tnewGeometry.clearGroups();\n\n\t\treturn newGeometry;\n\n\t} else {\n\n\t\tconsole.error( 'THREE.BufferGeometryUtils.toTrianglesDrawMode(): Unknown draw mode:', drawMode );\n\t\treturn geometry;\n\n\t}\n\n}\n\n/**\n * Calculates the morphed attributes of a morphed/skinned BufferGeometry.\n *\n * Helpful for Raytracing or Decals (i.e. a `DecalGeometry` applied to a morphed Object with a `BufferGeometry`\n * will use the original `BufferGeometry`, not the morphed/skinned one, generating an incorrect result.\n * Using this function to create a shadow `Object3`D the `DecalGeometry` can be correctly generated).\n *\n * @param {Mesh|Line|Points} object - The 3D object to compute morph attributes for.\n * @return {Object} An object with original position/normal attributes and morphed ones.\n */\nfunction computeMorphedAttributes( object ) {\n\n\tconst _vA = new Vector3();\n\tconst _vB = new Vector3();\n\tconst _vC = new Vector3();\n\n\tconst _tempA = new Vector3();\n\tconst _tempB = new Vector3();\n\tconst _tempC = new Vector3();\n\n\tconst _morphA = new Vector3();\n\tconst _morphB = new Vector3();\n\tconst _morphC = new Vector3();\n\n\tfunction _calculateMorphedAttributeData(\n\t\tobject,\n\t\tattribute,\n\t\tmorphAttribute,\n\t\tmorphTargetsRelative,\n\t\ta,\n\t\tb,\n\t\tc,\n\t\tmodifiedAttributeArray\n\t) {\n\n\t\t_vA.fromBufferAttribute( attribute, a );\n\t\t_vB.fromBufferAttribute( attribute, b );\n\t\t_vC.fromBufferAttribute( attribute, c );\n\n\t\tconst morphInfluences = object.morphTargetInfluences;\n\n\t\tif ( morphAttribute && morphInfluences ) {\n\n\t\t\t_morphA.set( 0, 0, 0 );\n\t\t\t_morphB.set( 0, 0, 0 );\n\t\t\t_morphC.set( 0, 0, 0 );\n\n\t\t\tfor ( let i = 0, il = morphAttribute.length; i < il; i ++ ) {\n\n\t\t\t\tconst influence = morphInfluences[ i ];\n\t\t\t\tconst morph = morphAttribute[ i ];\n\n\t\t\t\tif ( influence === 0 ) continue;\n\n\t\t\t\t_tempA.fromBufferAttribute( morph, a );\n\t\t\t\t_tempB.fromBufferAttribute( morph, b );\n\t\t\t\t_tempC.fromBufferAttribute( morph, c );\n\n\t\t\t\tif ( morphTargetsRelative ) {\n\n\t\t\t\t\t_morphA.addScaledVector( _tempA, influence );\n\t\t\t\t\t_morphB.addScaledVector( _tempB, influence );\n\t\t\t\t\t_morphC.addScaledVector( _tempC, influence );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t_morphA.addScaledVector( _tempA.sub( _vA ), influence );\n\t\t\t\t\t_morphB.addScaledVector( _tempB.sub( _vB ), influence );\n\t\t\t\t\t_morphC.addScaledVector( _tempC.sub( _vC ), influence );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t_vA.add( _morphA );\n\t\t\t_vB.add( _morphB );\n\t\t\t_vC.add( _morphC );\n\n\t\t}\n\n\t\tif ( object.isSkinnedMesh ) {\n\n\t\t\tobject.applyBoneTransform( a, _vA );\n\t\t\tobject.applyBoneTransform( b, _vB );\n\t\t\tobject.applyBoneTransform( c, _vC );\n\n\t\t}\n\n\t\tmodifiedAttributeArray[ a * 3 + 0 ] = _vA.x;\n\t\tmodifiedAttributeArray[ a * 3 + 1 ] = _vA.y;\n\t\tmodifiedAttributeArray[ a * 3 + 2 ] = _vA.z;\n\t\tmodifiedAttributeArray[ b * 3 + 0 ] = _vB.x;\n\t\tmodifiedAttributeArray[ b * 3 + 1 ] = _vB.y;\n\t\tmodifiedAttributeArray[ b * 3 + 2 ] = _vB.z;\n\t\tmodifiedAttributeArray[ c * 3 + 0 ] = _vC.x;\n\t\tmodifiedAttributeArray[ c * 3 + 1 ] = _vC.y;\n\t\tmodifiedAttributeArray[ c * 3 + 2 ] = _vC.z;\n\n\t}\n\n\tconst geometry = object.geometry;\n\tconst material = object.material;\n\n\tlet a, b, c;\n\tconst index = geometry.index;\n\tconst positionAttribute = geometry.attributes.position;\n\tconst morphPosition = geometry.morphAttributes.position;\n\tconst morphTargetsRelative = geometry.morphTargetsRelative;\n\tconst normalAttribute = geometry.attributes.normal;\n\tconst morphNormal = geometry.morphAttributes.position;\n\n\tconst groups = geometry.groups;\n\tconst drawRange = geometry.drawRange;\n\tlet i, j, il, jl;\n\tlet group;\n\tlet start, end;\n\n\tconst modifiedPosition = new Float32Array( positionAttribute.count * positionAttribute.itemSize );\n\tconst modifiedNormal = new Float32Array( normalAttribute.count * normalAttribute.itemSize );\n\n\tif ( index !== null ) {\n\n\t\t// indexed buffer geometry\n\n\t\tif ( Array.isArray( material ) ) {\n\n\t\t\tfor ( i = 0, il = groups.length; i < il; i ++ ) {\n\n\t\t\t\tgroup = groups[ i ];\n\n\t\t\t\tstart = Math.max( group.start, drawRange.start );\n\t\t\t\tend = Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) );\n\n\t\t\t\tfor ( j = start, jl = end; j < jl; j += 3 ) {\n\n\t\t\t\t\ta = index.getX( j );\n\t\t\t\t\tb = index.getX( j + 1 );\n\t\t\t\t\tc = index.getX( j + 2 );\n\n\t\t\t\t\t_calculateMorphedAttributeData(\n\t\t\t\t\t\tobject,\n\t\t\t\t\t\tpositionAttribute,\n\t\t\t\t\t\tmorphPosition,\n\t\t\t\t\t\tmorphTargetsRelative,\n\t\t\t\t\t\ta, b, c,\n\t\t\t\t\t\tmodifiedPosition\n\t\t\t\t\t);\n\n\t\t\t\t\t_calculateMorphedAttributeData(\n\t\t\t\t\t\tobject,\n\t\t\t\t\t\tnormalAttribute,\n\t\t\t\t\t\tmorphNormal,\n\t\t\t\t\t\tmorphTargetsRelative,\n\t\t\t\t\t\ta, b, c,\n\t\t\t\t\t\tmodifiedNormal\n\t\t\t\t\t);\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tstart = Math.max( 0, drawRange.start );\n\t\t\tend = Math.min( index.count, ( drawRange.start + drawRange.count ) );\n\n\t\t\tfor ( i = start, il = end; i < il; i += 3 ) {\n\n\t\t\t\ta = index.getX( i );\n\t\t\t\tb = index.getX( i + 1 );\n\t\t\t\tc = index.getX( i + 2 );\n\n\t\t\t\t_calculateMorphedAttributeData(\n\t\t\t\t\tobject,\n\t\t\t\t\tpositionAttribute,\n\t\t\t\t\tmorphPosition,\n\t\t\t\t\tmorphTargetsRelative,\n\t\t\t\t\ta, b, c,\n\t\t\t\t\tmodifiedPosition\n\t\t\t\t);\n\n\t\t\t\t_calculateMorphedAttributeData(\n\t\t\t\t\tobject,\n\t\t\t\t\tnormalAttribute,\n\t\t\t\t\tmorphNormal,\n\t\t\t\t\tmorphTargetsRelative,\n\t\t\t\t\ta, b, c,\n\t\t\t\t\tmodifiedNormal\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t}\n\n\t} else {\n\n\t\t// non-indexed buffer geometry\n\n\t\tif ( Array.isArray( material ) ) {\n\n\t\t\tfor ( i = 0, il = groups.length; i < il; i ++ ) {\n\n\t\t\t\tgroup = groups[ i ];\n\n\t\t\t\tstart = Math.max( group.start, drawRange.start );\n\t\t\t\tend = Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) );\n\n\t\t\t\tfor ( j = start, jl = end; j < jl; j += 3 ) {\n\n\t\t\t\t\ta = j;\n\t\t\t\t\tb = j + 1;\n\t\t\t\t\tc = j + 2;\n\n\t\t\t\t\t_calculateMorphedAttributeData(\n\t\t\t\t\t\tobject,\n\t\t\t\t\t\tpositionAttribute,\n\t\t\t\t\t\tmorphPosition,\n\t\t\t\t\t\tmorphTargetsRelative,\n\t\t\t\t\t\ta, b, c,\n\t\t\t\t\t\tmodifiedPosition\n\t\t\t\t\t);\n\n\t\t\t\t\t_calculateMorphedAttributeData(\n\t\t\t\t\t\tobject,\n\t\t\t\t\t\tnormalAttribute,\n\t\t\t\t\t\tmorphNormal,\n\t\t\t\t\t\tmorphTargetsRelative,\n\t\t\t\t\t\ta, b, c,\n\t\t\t\t\t\tmodifiedNormal\n\t\t\t\t\t);\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tstart = Math.max( 0, drawRange.start );\n\t\t\tend = Math.min( positionAttribute.count, ( drawRange.start + drawRange.count ) );\n\n\t\t\tfor ( i = start, il = end; i < il; i += 3 ) {\n\n\t\t\t\ta = i;\n\t\t\t\tb = i + 1;\n\t\t\t\tc = i + 2;\n\n\t\t\t\t_calculateMorphedAttributeData(\n\t\t\t\t\tobject,\n\t\t\t\t\tpositionAttribute,\n\t\t\t\t\tmorphPosition,\n\t\t\t\t\tmorphTargetsRelative,\n\t\t\t\t\ta, b, c,\n\t\t\t\t\tmodifiedPosition\n\t\t\t\t);\n\n\t\t\t\t_calculateMorphedAttributeData(\n\t\t\t\t\tobject,\n\t\t\t\t\tnormalAttribute,\n\t\t\t\t\tmorphNormal,\n\t\t\t\t\tmorphTargetsRelative,\n\t\t\t\t\ta, b, c,\n\t\t\t\t\tmodifiedNormal\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tconst morphedPositionAttribute = new Float32BufferAttribute( modifiedPosition, 3 );\n\tconst morphedNormalAttribute = new Float32BufferAttribute( modifiedNormal, 3 );\n\n\treturn {\n\n\t\tpositionAttribute: positionAttribute,\n\t\tnormalAttribute: normalAttribute,\n\t\tmorphedPositionAttribute: morphedPositionAttribute,\n\t\tmorphedNormalAttribute: morphedNormalAttribute\n\n\t};\n\n}\n\n/**\n * Merges the {@link BufferGeometry#groups} for the given geometry.\n *\n * @param {BufferGeometry} geometry - The geometry to modify.\n * @return {BufferGeometry} - The updated geometry\n */\nfunction mergeGroups( geometry ) {\n\n\tif ( geometry.groups.length === 0 ) {\n\n\t\tconsole.warn( 'THREE.BufferGeometryUtils.mergeGroups(): No groups are defined. Nothing to merge.' );\n\t\treturn geometry;\n\n\t}\n\n\tlet groups = geometry.groups;\n\n\t// sort groups by material index\n\n\tgroups = groups.sort( ( a, b ) => {\n\n\t\tif ( a.materialIndex !== b.materialIndex ) return a.materialIndex - b.materialIndex;\n\n\t\treturn a.start - b.start;\n\n\t} );\n\n\t// create index for non-indexed geometries\n\n\tif ( geometry.getIndex() === null ) {\n\n\t\tconst positionAttribute = geometry.getAttribute( 'position' );\n\t\tconst indices = [];\n\n\t\tfor ( let i = 0; i < positionAttribute.count; i += 3 ) {\n\n\t\t\tindices.push( i, i + 1, i + 2 );\n\n\t\t}\n\n\t\tgeometry.setIndex( indices );\n\n\t}\n\n\t// sort index\n\n\tconst index = geometry.getIndex();\n\n\tconst newIndices = [];\n\n\tfor ( let i = 0; i < groups.length; i ++ ) {\n\n\t\tconst group = groups[ i ];\n\n\t\tconst groupStart = group.start;\n\t\tconst groupLength = groupStart + group.count;\n\n\t\tfor ( let j = groupStart; j < groupLength; j ++ ) {\n\n\t\t\tnewIndices.push( index.getX( j ) );\n\n\t\t}\n\n\t}\n\n\tgeometry.dispose(); // Required to force buffer recreation\n\tgeometry.setIndex( newIndices );\n\n\t// update groups indices\n\n\tlet start = 0;\n\n\tfor ( let i = 0; i < groups.length; i ++ ) {\n\n\t\tconst group = groups[ i ];\n\n\t\tgroup.start = start;\n\t\tstart += group.count;\n\n\t}\n\n\t// merge groups\n\n\tlet currentGroup = groups[ 0 ];\n\n\tgeometry.groups = [ currentGroup ];\n\n\tfor ( let i = 1; i < groups.length; i ++ ) {\n\n\t\tconst group = groups[ i ];\n\n\t\tif ( currentGroup.materialIndex === group.materialIndex ) {\n\n\t\t\tcurrentGroup.count += group.count;\n\n\t\t} else {\n\n\t\t\tcurrentGroup = group;\n\t\t\tgeometry.groups.push( currentGroup );\n\n\t\t}\n\n\t}\n\n\treturn geometry;\n\n}\n\n/**\n * Modifies the supplied geometry if it is non-indexed, otherwise creates a new,\n * non-indexed geometry. Returns the geometry with smooth normals everywhere except\n * faces that meet at an angle greater than the crease angle.\n *\n * @param {BufferGeometry} geometry - The geometry to modify.\n * @param {number} [creaseAngle=Math.PI/3] - The crease angle in radians.\n * @return {BufferGeometry} - The updated geometry\n */\nfunction toCreasedNormals( geometry, creaseAngle = Math.PI / 3 /* 60 degrees */ ) {\n\n\tconst creaseDot = Math.cos( creaseAngle );\n\tconst hashMultiplier = ( 1 + 1e-10 ) * 1e2;\n\n\t// reusable vectors\n\tconst verts = [ new Vector3(), new Vector3(), new Vector3() ];\n\tconst tempVec1 = new Vector3();\n\tconst tempVec2 = new Vector3();\n\tconst tempNorm = new Vector3();\n\tconst tempNorm2 = new Vector3();\n\n\t// hashes a vector\n\tfunction hashVertex( v ) {\n\n\t\tconst x = ~ ~ ( v.x * hashMultiplier );\n\t\tconst y = ~ ~ ( v.y * hashMultiplier );\n\t\tconst z = ~ ~ ( v.z * hashMultiplier );\n\t\treturn `${x},${y},${z}`;\n\n\t}\n\n\t// BufferGeometry.toNonIndexed() warns if the geometry is non-indexed\n\t// and returns the original geometry\n\tconst resultGeometry = geometry.index ? geometry.toNonIndexed() : geometry;\n\tconst posAttr = resultGeometry.attributes.position;\n\tconst vertexMap = {};\n\n\t// find all the normals shared by commonly located vertices\n\tfor ( let i = 0, l = posAttr.count / 3; i < l; i ++ ) {\n\n\t\tconst i3 = 3 * i;\n\t\tconst a = verts[ 0 ].fromBufferAttribute( posAttr, i3 + 0 );\n\t\tconst b = verts[ 1 ].fromBufferAttribute( posAttr, i3 + 1 );\n\t\tconst c = verts[ 2 ].fromBufferAttribute( posAttr, i3 + 2 );\n\n\t\ttempVec1.subVectors( c, b );\n\t\ttempVec2.subVectors( a, b );\n\n\t\t// add the normal to the map for all vertices\n\t\tconst normal = new Vector3().crossVectors( tempVec1, tempVec2 ).normalize();\n\t\tfor ( let n = 0; n < 3; n ++ ) {\n\n\t\t\tconst vert = verts[ n ];\n\t\t\tconst hash = hashVertex( vert );\n\t\t\tif ( ! ( hash in vertexMap ) ) {\n\n\t\t\t\tvertexMap[ hash ] = [];\n\n\t\t\t}\n\n\t\t\tvertexMap[ hash ].push( normal );\n\n\t\t}\n\n\t}\n\n\t// average normals from all vertices that share a common location if they are within the\n\t// provided crease threshold\n\tconst normalArray = new Float32Array( posAttr.count * 3 );\n\tconst normAttr = new BufferAttribute( normalArray, 3, false );\n\tfor ( let i = 0, l = posAttr.count / 3; i < l; i ++ ) {\n\n\t\t// get the face normal for this vertex\n\t\tconst i3 = 3 * i;\n\t\tconst a = verts[ 0 ].fromBufferAttribute( posAttr, i3 + 0 );\n\t\tconst b = verts[ 1 ].fromBufferAttribute( posAttr, i3 + 1 );\n\t\tconst c = verts[ 2 ].fromBufferAttribute( posAttr, i3 + 2 );\n\n\t\ttempVec1.subVectors( c, b );\n\t\ttempVec2.subVectors( a, b );\n\n\t\ttempNorm.crossVectors( tempVec1, tempVec2 ).normalize();\n\n\t\t// average all normals that meet the threshold and set the normal value\n\t\tfor ( let n = 0; n < 3; n ++ ) {\n\n\t\t\tconst vert = verts[ n ];\n\t\t\tconst hash = hashVertex( vert );\n\t\t\tconst otherNormals = vertexMap[ hash ];\n\t\t\ttempNorm2.set( 0, 0, 0 );\n\n\t\t\tfor ( let k = 0, lk = otherNormals.length; k < lk; k ++ ) {\n\n\t\t\t\tconst otherNorm = otherNormals[ k ];\n\t\t\t\tif ( tempNorm.dot( otherNorm ) > creaseDot ) {\n\n\t\t\t\t\ttempNorm2.add( otherNorm );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\ttempNorm2.normalize();\n\t\t\tnormAttr.setXYZ( i3 + n, tempNorm2.x, tempNorm2.y, tempNorm2.z );\n\n\t\t}\n\n\t}\n\n\tresultGeometry.setAttribute( 'normal', normAttr );\n\treturn resultGeometry;\n\n}\n\nexport {\n\tcomputeMikkTSpaceTangents,\n\tmergeGeometries,\n\tmergeAttributes,\n\tdeepCloneAttribute,\n\tdeinterleaveAttribute,\n\tdeinterleaveGeometry,\n\tinterleaveAttributes,\n\testimateBytesUsed,\n\tmergeVertices,\n\ttoTrianglesDrawMode,\n\tcomputeMorphedAttributes,\n\tmergeGroups,\n\ttoCreasedNormals\n};\n","import {\n\tAnimationClip,\n\tBone,\n\tBox3,\n\tBufferAttribute,\n\tBufferGeometry,\n\tClampToEdgeWrapping,\n\tColor,\n\tColorManagement,\n\tDirectionalLight,\n\tDoubleSide,\n\tFileLoader,\n\tFrontSide,\n\tGroup,\n\tImageBitmapLoader,\n\tInstancedMesh,\n\tInterleavedBuffer,\n\tInterleavedBufferAttribute,\n\tInterpolant,\n\tInterpolateDiscrete,\n\tInterpolateLinear,\n\tLine,\n\tLineBasicMaterial,\n\tLineLoop,\n\tLineSegments,\n\tLinearFilter,\n\tLinearMipmapLinearFilter,\n\tLinearMipmapNearestFilter,\n\tLinearSRGBColorSpace,\n\tLoader,\n\tLoaderUtils,\n\tMaterial,\n\tMathUtils,\n\tMatrix4,\n\tMesh,\n\tMeshBasicMaterial,\n\tMeshPhysicalMaterial,\n\tMeshStandardMaterial,\n\tMirroredRepeatWrapping,\n\tNearestFilter,\n\tNearestMipmapLinearFilter,\n\tNearestMipmapNearestFilter,\n\tNumberKeyframeTrack,\n\tObject3D,\n\tOrthographicCamera,\n\tPerspectiveCamera,\n\tPointLight,\n\tPoints,\n\tPointsMaterial,\n\tPropertyBinding,\n\tQuaternion,\n\tQuaternionKeyframeTrack,\n\tRepeatWrapping,\n\tSkeleton,\n\tSkinnedMesh,\n\tSphere,\n\tSpotLight,\n\tTexture,\n\tTextureLoader,\n\tTriangleFanDrawMode,\n\tTriangleStripDrawMode,\n\tVector2,\n\tVector3,\n\tVectorKeyframeTrack,\n\tSRGBColorSpace,\n\tInstancedBufferAttribute\n} from 'three';\nimport { toTrianglesDrawMode } from '../utils/BufferGeometryUtils.js';\n\n/**\n * A loader for the glTF 2.0 format.\n *\n * [glTF]{@link https://www.khronos.org/gltf/} (GL Transmission Format) is an [open format specification]{@link https://github.com/KhronosGroup/glTF/tree/main/specification/2.0}\n * for efficient delivery and loading of 3D content. Assets may be provided either in JSON (.gltf) or binary (.glb)\n * format. External files store textures (.jpg, .png) and additional binary data (.bin). A glTF asset may deliver\n * one or more scenes, including meshes, materials, textures, skins, skeletons, morph targets, animations, lights,\n * and/or cameras.\n *\n * `GLTFLoader` uses {@link ImageBitmapLoader} whenever possible. Be advised that image bitmaps are not\n * automatically GC-collected when they are no longer referenced, and they require special handling during\n * the disposal process.\n *\n * `GLTFLoader` supports the following glTF 2.0 extensions:\n * - KHR_draco_mesh_compression\n * - KHR_materials_clearcoat\n * - KHR_materials_dispersion\n * - KHR_materials_ior\n * - KHR_materials_specular\n * - KHR_materials_transmission\n * - KHR_materials_iridescence\n * - KHR_materials_unlit\n * - KHR_materials_volume\n * - KHR_mesh_quantization\n * - KHR_lights_punctual\n * - KHR_texture_basisu\n * - KHR_texture_transform\n * - EXT_texture_webp\n * - EXT_meshopt_compression\n * - EXT_mesh_gpu_instancing\n *\n * The following glTF 2.0 extension is supported by an external user plugin:\n * - [KHR_materials_variants]{@link https://github.com/takahirox/three-gltf-extensions}\n * - [MSFT_texture_dds]{@link https://github.com/takahirox/three-gltf-extensions}\n *\n * ```js\n * const loader = new GLTFLoader();\n *\n * // Optional: Provide a DRACOLoader instance to decode compressed mesh data\n * const dracoLoader = new DRACOLoader();\n * dracoLoader.setDecoderPath( '/examples/jsm/libs/draco/' );\n * loader.setDRACOLoader( dracoLoader );\n *\n * const gltf = await loader.loadAsync( 'models/gltf/duck/duck.gltf' );\n * scene.add( gltf.scene );\n * ```\n *\n * @augments Loader\n * @three_import import { GLTFLoader } from 'three/addons/loaders/GLTFLoader.js';\n */\nclass GLTFLoader extends Loader {\n\n\t/**\n\t * Constructs a new glTF loader.\n\t *\n\t * @param {LoadingManager} [manager] - The loading manager.\n\t */\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t\tthis.dracoLoader = null;\n\t\tthis.ktx2Loader = null;\n\t\tthis.meshoptDecoder = null;\n\n\t\tthis.pluginCallbacks = [];\n\n\t\tthis.register( function ( parser ) {\n\n\t\t\treturn new GLTFMaterialsClearcoatExtension( parser );\n\n\t\t} );\n\n\t\tthis.register( function ( parser ) {\n\n\t\t\treturn new GLTFMaterialsDispersionExtension( parser );\n\n\t\t} );\n\n\t\tthis.register( function ( parser ) {\n\n\t\t\treturn new GLTFTextureBasisUExtension( parser );\n\n\t\t} );\n\n\t\tthis.register( function ( parser ) {\n\n\t\t\treturn new GLTFTextureWebPExtension( parser );\n\n\t\t} );\n\n\t\tthis.register( function ( parser ) {\n\n\t\t\treturn new GLTFTextureAVIFExtension( parser );\n\n\t\t} );\n\n\t\tthis.register( function ( parser ) {\n\n\t\t\treturn new GLTFMaterialsSheenExtension( parser );\n\n\t\t} );\n\n\t\tthis.register( function ( parser ) {\n\n\t\t\treturn new GLTFMaterialsTransmissionExtension( parser );\n\n\t\t} );\n\n\t\tthis.register( function ( parser ) {\n\n\t\t\treturn new GLTFMaterialsVolumeExtension( parser );\n\n\t\t} );\n\n\t\tthis.register( function ( parser ) {\n\n\t\t\treturn new GLTFMaterialsIorExtension( parser );\n\n\t\t} );\n\n\t\tthis.register( function ( parser ) {\n\n\t\t\treturn new GLTFMaterialsEmissiveStrengthExtension( parser );\n\n\t\t} );\n\n\t\tthis.register( function ( parser ) {\n\n\t\t\treturn new GLTFMaterialsSpecularExtension( parser );\n\n\t\t} );\n\n\t\tthis.register( function ( parser ) {\n\n\t\t\treturn new GLTFMaterialsIridescenceExtension( parser );\n\n\t\t} );\n\n\t\tthis.register( function ( parser ) {\n\n\t\t\treturn new GLTFMaterialsAnisotropyExtension( parser );\n\n\t\t} );\n\n\t\tthis.register( function ( parser ) {\n\n\t\t\treturn new GLTFMaterialsBumpExtension( parser );\n\n\t\t} );\n\n\t\tthis.register( function ( parser ) {\n\n\t\t\treturn new GLTFLightsExtension( parser );\n\n\t\t} );\n\n\t\tthis.register( function ( parser ) {\n\n\t\t\treturn new GLTFMeshoptCompression( parser );\n\n\t\t} );\n\n\t\tthis.register( function ( parser ) {\n\n\t\t\treturn new GLTFMeshGpuInstancing( parser );\n\n\t\t} );\n\n\t}\n\n\t/**\n\t * Starts loading from the given URL and passes the loaded glTF asset\n\t * to the `onLoad()` callback.\n\t *\n\t * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.\n\t * @param {function(GLTFLoader~LoadObject)} onLoad - Executed when the loading process has been finished.\n\t * @param {onProgressCallback} onProgress - Executed while the loading is in progress.\n\t * @param {onErrorCallback} onError - Executed when errors occur.\n\t */\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tlet resourcePath;\n\n\t\tif ( this.resourcePath !== '' ) {\n\n\t\t\tresourcePath = this.resourcePath;\n\n\t\t} else if ( this.path !== '' ) {\n\n\t\t\t// If a base path is set, resources will be relative paths from that plus the relative path of the gltf file\n\t\t\t// Example  path = 'https://my-cnd-server.com/', url = 'assets/models/model.gltf'\n\t\t\t// resourcePath = 'https://my-cnd-server.com/assets/models/'\n\t\t\t// referenced resource 'model.bin' will be loaded from 'https://my-cnd-server.com/assets/models/model.bin'\n\t\t\t// referenced resource '../textures/texture.png' will be loaded from 'https://my-cnd-server.com/assets/textures/texture.png'\n\t\t\tconst relativeUrl = LoaderUtils.extractUrlBase( url );\n\t\t\tresourcePath = LoaderUtils.resolveURL( relativeUrl, this.path );\n\n\t\t} else {\n\n\t\t\tresourcePath = LoaderUtils.extractUrlBase( url );\n\n\t\t}\n\n\t\t// Tells the LoadingManager to track an extra item, which resolves after\n\t\t// the model is fully loaded. This means the count of items loaded will\n\t\t// be incorrect, but ensures manager.onLoad() does not fire early.\n\t\tthis.manager.itemStart( url );\n\n\t\tconst _onError = function ( e ) {\n\n\t\t\tif ( onError ) {\n\n\t\t\t\tonError( e );\n\n\t\t\t} else {\n\n\t\t\t\tconsole.error( e );\n\n\t\t\t}\n\n\t\t\tscope.manager.itemError( url );\n\t\t\tscope.manager.itemEnd( url );\n\n\t\t};\n\n\t\tconst loader = new FileLoader( this.manager );\n\n\t\tloader.setPath( this.path );\n\t\tloader.setResponseType( 'arraybuffer' );\n\t\tloader.setRequestHeader( this.requestHeader );\n\t\tloader.setWithCredentials( this.withCredentials );\n\n\t\tloader.load( url, function ( data ) {\n\n\t\t\ttry {\n\n\t\t\t\tscope.parse( data, resourcePath, function ( gltf ) {\n\n\t\t\t\t\tonLoad( gltf );\n\n\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t}, _onError );\n\n\t\t\t} catch ( e ) {\n\n\t\t\t\t_onError( e );\n\n\t\t\t}\n\n\t\t}, onProgress, _onError );\n\n\t}\n\n\t/**\n\t * Sets the given Draco loader to this loader. Required for decoding assets\n\t * compressed with the `KHR_draco_mesh_compression` extension.\n\t *\n\t * @param {DRACOLoader} dracoLoader - The Draco loader to set.\n\t * @return {GLTFLoader} A reference to this loader.\n\t */\n\tsetDRACOLoader( dracoLoader ) {\n\n\t\tthis.dracoLoader = dracoLoader;\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the given KTX2 loader to this loader. Required for loading KTX2\n\t * compressed textures.\n\t *\n\t * @param {KTX2Loader} ktx2Loader - The KTX2 loader to set.\n\t * @return {GLTFLoader} A reference to this loader.\n\t */\n\tsetKTX2Loader( ktx2Loader ) {\n\n\t\tthis.ktx2Loader = ktx2Loader;\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the given meshopt decoder. Required for decoding assets\n\t * compressed with the `EXT_meshopt_compression` extension.\n\t *\n\t * @param {Object} meshoptDecoder - The meshopt decoder to set.\n\t * @return {GLTFLoader} A reference to this loader.\n\t */\n\tsetMeshoptDecoder( meshoptDecoder ) {\n\n\t\tthis.meshoptDecoder = meshoptDecoder;\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Registers a plugin callback. This API is internally used to implement the various\n\t * glTF extensions but can also used by third-party code to add additional logic\n\t * to the loader.\n\t *\n\t * @param {function(parser:GLTFParser)} callback - The callback function to register.\n\t * @return {GLTFLoader} A reference to this loader.\n\t */\n\tregister( callback ) {\n\n\t\tif ( this.pluginCallbacks.indexOf( callback ) === - 1 ) {\n\n\t\t\tthis.pluginCallbacks.push( callback );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Unregisters a plugin callback.\n\t *\n\t * @param {Function} callback - The callback function to unregister.\n\t * @return {GLTFLoader} A reference to this loader.\n\t */\n\tunregister( callback ) {\n\n\t\tif ( this.pluginCallbacks.indexOf( callback ) !== - 1 ) {\n\n\t\t\tthis.pluginCallbacks.splice( this.pluginCallbacks.indexOf( callback ), 1 );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Parses the given FBX data and returns the resulting group.\n\t *\n\t * @param {string|ArrayBuffer} data - The raw glTF data.\n\t * @param {string} path - The URL base path.\n\t * @param {function(GLTFLoader~LoadObject)} onLoad - Executed when the loading process has been finished.\n\t * @param {onErrorCallback} onError - Executed when errors occur.\n\t */\n\tparse( data, path, onLoad, onError ) {\n\n\t\tlet json;\n\t\tconst extensions = {};\n\t\tconst plugins = {};\n\t\tconst textDecoder = new TextDecoder();\n\n\t\tif ( typeof data === 'string' ) {\n\n\t\t\tjson = JSON.parse( data );\n\n\t\t} else if ( data instanceof ArrayBuffer ) {\n\n\t\t\tconst magic = textDecoder.decode( new Uint8Array( data, 0, 4 ) );\n\n\t\t\tif ( magic === BINARY_EXTENSION_HEADER_MAGIC ) {\n\n\t\t\t\ttry {\n\n\t\t\t\t\textensions[ EXTENSIONS.KHR_BINARY_GLTF ] = new GLTFBinaryExtension( data );\n\n\t\t\t\t} catch ( error ) {\n\n\t\t\t\t\tif ( onError ) onError( error );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tjson = JSON.parse( extensions[ EXTENSIONS.KHR_BINARY_GLTF ].content );\n\n\t\t\t} else {\n\n\t\t\t\tjson = JSON.parse( textDecoder.decode( data ) );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tjson = data;\n\n\t\t}\n\n\t\tif ( json.asset === undefined || json.asset.version[ 0 ] < 2 ) {\n\n\t\t\tif ( onError ) onError( new Error( 'THREE.GLTFLoader: Unsupported asset. glTF versions >=2.0 are supported.' ) );\n\t\t\treturn;\n\n\t\t}\n\n\t\tconst parser = new GLTFParser( json, {\n\n\t\t\tpath: path || this.resourcePath || '',\n\t\t\tcrossOrigin: this.crossOrigin,\n\t\t\trequestHeader: this.requestHeader,\n\t\t\tmanager: this.manager,\n\t\t\tktx2Loader: this.ktx2Loader,\n\t\t\tmeshoptDecoder: this.meshoptDecoder\n\n\t\t} );\n\n\t\tparser.fileLoader.setRequestHeader( this.requestHeader );\n\n\t\tfor ( let i = 0; i < this.pluginCallbacks.length; i ++ ) {\n\n\t\t\tconst plugin = this.pluginCallbacks[ i ]( parser );\n\n\t\t\tif ( ! plugin.name ) console.error( 'THREE.GLTFLoader: Invalid plugin found: missing name' );\n\n\t\t\tplugins[ plugin.name ] = plugin;\n\n\t\t\t// Workaround to avoid determining as unknown extension\n\t\t\t// in addUnknownExtensionsToUserData().\n\t\t\t// Remove this workaround if we move all the existing\n\t\t\t// extension handlers to plugin system\n\t\t\textensions[ plugin.name ] = true;\n\n\t\t}\n\n\t\tif ( json.extensionsUsed ) {\n\n\t\t\tfor ( let i = 0; i < json.extensionsUsed.length; ++ i ) {\n\n\t\t\t\tconst extensionName = json.extensionsUsed[ i ];\n\t\t\t\tconst extensionsRequired = json.extensionsRequired || [];\n\n\t\t\t\tswitch ( extensionName ) {\n\n\t\t\t\t\tcase EXTENSIONS.KHR_MATERIALS_UNLIT:\n\t\t\t\t\t\textensions[ extensionName ] = new GLTFMaterialsUnlitExtension();\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase EXTENSIONS.KHR_DRACO_MESH_COMPRESSION:\n\t\t\t\t\t\textensions[ extensionName ] = new GLTFDracoMeshCompressionExtension( json, this.dracoLoader );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase EXTENSIONS.KHR_TEXTURE_TRANSFORM:\n\t\t\t\t\t\textensions[ extensionName ] = new GLTFTextureTransformExtension();\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase EXTENSIONS.KHR_MESH_QUANTIZATION:\n\t\t\t\t\t\textensions[ extensionName ] = new GLTFMeshQuantizationExtension();\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tif ( extensionsRequired.indexOf( extensionName ) >= 0 && plugins[ extensionName ] === undefined ) {\n\n\t\t\t\t\t\t\tconsole.warn( 'THREE.GLTFLoader: Unknown extension \"' + extensionName + '\".' );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tparser.setExtensions( extensions );\n\t\tparser.setPlugins( plugins );\n\t\tparser.parse( onLoad, onError );\n\n\t}\n\n\t/**\n\t * Async version of {@link GLTFLoader#parse}.\n\t *\n\t * @async\n\t * @param {string|ArrayBuffer} data - The raw glTF data.\n\t * @param {string} path - The URL base path.\n\t * @return {Promise<GLTFLoader~LoadObject>} A Promise that resolves with the loaded glTF when the parsing has been finished.\n\t */\n\tparseAsync( data, path ) {\n\n\t\tconst scope = this;\n\n\t\treturn new Promise( function ( resolve, reject ) {\n\n\t\t\tscope.parse( data, path, resolve, reject );\n\n\t\t} );\n\n\t}\n\n}\n\n/* GLTFREGISTRY */\n\nfunction GLTFRegistry() {\n\n\tlet objects = {};\n\n\treturn\t{\n\n\t\tget: function ( key ) {\n\n\t\t\treturn objects[ key ];\n\n\t\t},\n\n\t\tadd: function ( key, object ) {\n\n\t\t\tobjects[ key ] = object;\n\n\t\t},\n\n\t\tremove: function ( key ) {\n\n\t\t\tdelete objects[ key ];\n\n\t\t},\n\n\t\tremoveAll: function () {\n\n\t\t\tobjects = {};\n\n\t\t}\n\n\t};\n\n}\n\n/*********************************/\n/********** EXTENSIONS ***********/\n/*********************************/\n\nconst EXTENSIONS = {\n\tKHR_BINARY_GLTF: 'KHR_binary_glTF',\n\tKHR_DRACO_MESH_COMPRESSION: 'KHR_draco_mesh_compression',\n\tKHR_LIGHTS_PUNCTUAL: 'KHR_lights_punctual',\n\tKHR_MATERIALS_CLEARCOAT: 'KHR_materials_clearcoat',\n\tKHR_MATERIALS_DISPERSION: 'KHR_materials_dispersion',\n\tKHR_MATERIALS_IOR: 'KHR_materials_ior',\n\tKHR_MATERIALS_SHEEN: 'KHR_materials_sheen',\n\tKHR_MATERIALS_SPECULAR: 'KHR_materials_specular',\n\tKHR_MATERIALS_TRANSMISSION: 'KHR_materials_transmission',\n\tKHR_MATERIALS_IRIDESCENCE: 'KHR_materials_iridescence',\n\tKHR_MATERIALS_ANISOTROPY: 'KHR_materials_anisotropy',\n\tKHR_MATERIALS_UNLIT: 'KHR_materials_unlit',\n\tKHR_MATERIALS_VOLUME: 'KHR_materials_volume',\n\tKHR_TEXTURE_BASISU: 'KHR_texture_basisu',\n\tKHR_TEXTURE_TRANSFORM: 'KHR_texture_transform',\n\tKHR_MESH_QUANTIZATION: 'KHR_mesh_quantization',\n\tKHR_MATERIALS_EMISSIVE_STRENGTH: 'KHR_materials_emissive_strength',\n\tEXT_MATERIALS_BUMP: 'EXT_materials_bump',\n\tEXT_TEXTURE_WEBP: 'EXT_texture_webp',\n\tEXT_TEXTURE_AVIF: 'EXT_texture_avif',\n\tEXT_MESHOPT_COMPRESSION: 'EXT_meshopt_compression',\n\tEXT_MESH_GPU_INSTANCING: 'EXT_mesh_gpu_instancing'\n};\n\n/**\n * Punctual Lights Extension\n *\n * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_lights_punctual\n *\n * @private\n */\nclass GLTFLightsExtension {\n\n\tconstructor( parser ) {\n\n\t\tthis.parser = parser;\n\t\tthis.name = EXTENSIONS.KHR_LIGHTS_PUNCTUAL;\n\n\t\t// Object3D instance caches\n\t\tthis.cache = { refs: {}, uses: {} };\n\n\t}\n\n\t_markDefs() {\n\n\t\tconst parser = this.parser;\n\t\tconst nodeDefs = this.parser.json.nodes || [];\n\n\t\tfor ( let nodeIndex = 0, nodeLength = nodeDefs.length; nodeIndex < nodeLength; nodeIndex ++ ) {\n\n\t\t\tconst nodeDef = nodeDefs[ nodeIndex ];\n\n\t\t\tif ( nodeDef.extensions\n\t\t\t\t\t&& nodeDef.extensions[ this.name ]\n\t\t\t\t\t&& nodeDef.extensions[ this.name ].light !== undefined ) {\n\n\t\t\t\tparser._addNodeRef( this.cache, nodeDef.extensions[ this.name ].light );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t_loadLight( lightIndex ) {\n\n\t\tconst parser = this.parser;\n\t\tconst cacheKey = 'light:' + lightIndex;\n\t\tlet dependency = parser.cache.get( cacheKey );\n\n\t\tif ( dependency ) return dependency;\n\n\t\tconst json = parser.json;\n\t\tconst extensions = ( json.extensions && json.extensions[ this.name ] ) || {};\n\t\tconst lightDefs = extensions.lights || [];\n\t\tconst lightDef = lightDefs[ lightIndex ];\n\t\tlet lightNode;\n\n\t\tconst color = new Color( 0xffffff );\n\n\t\tif ( lightDef.color !== undefined ) color.setRGB( lightDef.color[ 0 ], lightDef.color[ 1 ], lightDef.color[ 2 ], LinearSRGBColorSpace );\n\n\t\tconst range = lightDef.range !== undefined ? lightDef.range : 0;\n\n\t\tswitch ( lightDef.type ) {\n\n\t\t\tcase 'directional':\n\t\t\t\tlightNode = new DirectionalLight( color );\n\t\t\t\tlightNode.target.position.set( 0, 0, - 1 );\n\t\t\t\tlightNode.add( lightNode.target );\n\t\t\t\tbreak;\n\n\t\t\tcase 'point':\n\t\t\t\tlightNode = new PointLight( color );\n\t\t\t\tlightNode.distance = range;\n\t\t\t\tbreak;\n\n\t\t\tcase 'spot':\n\t\t\t\tlightNode = new SpotLight( color );\n\t\t\t\tlightNode.distance = range;\n\t\t\t\t// Handle spotlight properties.\n\t\t\t\tlightDef.spot = lightDef.spot || {};\n\t\t\t\tlightDef.spot.innerConeAngle = lightDef.spot.innerConeAngle !== undefined ? lightDef.spot.innerConeAngle : 0;\n\t\t\t\tlightDef.spot.outerConeAngle = lightDef.spot.outerConeAngle !== undefined ? lightDef.spot.outerConeAngle : Math.PI / 4.0;\n\t\t\t\tlightNode.angle = lightDef.spot.outerConeAngle;\n\t\t\t\tlightNode.penumbra = 1.0 - lightDef.spot.innerConeAngle / lightDef.spot.outerConeAngle;\n\t\t\t\tlightNode.target.position.set( 0, 0, - 1 );\n\t\t\t\tlightNode.add( lightNode.target );\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tthrow new Error( 'THREE.GLTFLoader: Unexpected light type: ' + lightDef.type );\n\n\t\t}\n\n\t\t// Some lights (e.g. spot) default to a position other than the origin. Reset the position\n\t\t// here, because node-level parsing will only override position if explicitly specified.\n\t\tlightNode.position.set( 0, 0, 0 );\n\n\t\tassignExtrasToUserData( lightNode, lightDef );\n\n\t\tif ( lightDef.intensity !== undefined ) lightNode.intensity = lightDef.intensity;\n\n\t\tlightNode.name = parser.createUniqueName( lightDef.name || ( 'light_' + lightIndex ) );\n\n\t\tdependency = Promise.resolve( lightNode );\n\n\t\tparser.cache.add( cacheKey, dependency );\n\n\t\treturn dependency;\n\n\t}\n\n\tgetDependency( type, index ) {\n\n\t\tif ( type !== 'light' ) return;\n\n\t\treturn this._loadLight( index );\n\n\t}\n\n\tcreateNodeAttachment( nodeIndex ) {\n\n\t\tconst self = this;\n\t\tconst parser = this.parser;\n\t\tconst json = parser.json;\n\t\tconst nodeDef = json.nodes[ nodeIndex ];\n\t\tconst lightDef = ( nodeDef.extensions && nodeDef.extensions[ this.name ] ) || {};\n\t\tconst lightIndex = lightDef.light;\n\n\t\tif ( lightIndex === undefined ) return null;\n\n\t\treturn this._loadLight( lightIndex ).then( function ( light ) {\n\n\t\t\treturn parser._getNodeRef( self.cache, lightIndex, light );\n\n\t\t} );\n\n\t}\n\n}\n\n/**\n * Unlit Materials Extension\n *\n * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_materials_unlit\n *\n * @private\n */\nclass GLTFMaterialsUnlitExtension {\n\n\tconstructor() {\n\n\t\tthis.name = EXTENSIONS.KHR_MATERIALS_UNLIT;\n\n\t}\n\n\tgetMaterialType() {\n\n\t\treturn MeshBasicMaterial;\n\n\t}\n\n\textendParams( materialParams, materialDef, parser ) {\n\n\t\tconst pending = [];\n\n\t\tmaterialParams.color = new Color( 1.0, 1.0, 1.0 );\n\t\tmaterialParams.opacity = 1.0;\n\n\t\tconst metallicRoughness = materialDef.pbrMetallicRoughness;\n\n\t\tif ( metallicRoughness ) {\n\n\t\t\tif ( Array.isArray( metallicRoughness.baseColorFactor ) ) {\n\n\t\t\t\tconst array = metallicRoughness.baseColorFactor;\n\n\t\t\t\tmaterialParams.color.setRGB( array[ 0 ], array[ 1 ], array[ 2 ], LinearSRGBColorSpace );\n\t\t\t\tmaterialParams.opacity = array[ 3 ];\n\n\t\t\t}\n\n\t\t\tif ( metallicRoughness.baseColorTexture !== undefined ) {\n\n\t\t\t\tpending.push( parser.assignTexture( materialParams, 'map', metallicRoughness.baseColorTexture, SRGBColorSpace ) );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn Promise.all( pending );\n\n\t}\n\n}\n\n/**\n * Materials Emissive Strength Extension\n *\n * Specification: https://github.com/KhronosGroup/glTF/blob/5768b3ce0ef32bc39cdf1bef10b948586635ead3/extensions/2.0/Khronos/KHR_materials_emissive_strength/README.md\n *\n * @private\n */\nclass GLTFMaterialsEmissiveStrengthExtension {\n\n\tconstructor( parser ) {\n\n\t\tthis.parser = parser;\n\t\tthis.name = EXTENSIONS.KHR_MATERIALS_EMISSIVE_STRENGTH;\n\n\t}\n\n\textendMaterialParams( materialIndex, materialParams ) {\n\n\t\tconst parser = this.parser;\n\t\tconst materialDef = parser.json.materials[ materialIndex ];\n\n\t\tif ( ! materialDef.extensions || ! materialDef.extensions[ this.name ] ) {\n\n\t\t\treturn Promise.resolve();\n\n\t\t}\n\n\t\tconst emissiveStrength = materialDef.extensions[ this.name ].emissiveStrength;\n\n\t\tif ( emissiveStrength !== undefined ) {\n\n\t\t\tmaterialParams.emissiveIntensity = emissiveStrength;\n\n\t\t}\n\n\t\treturn Promise.resolve();\n\n\t}\n\n}\n\n/**\n * Clearcoat Materials Extension\n *\n * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_materials_clearcoat\n *\n * @private\n */\nclass GLTFMaterialsClearcoatExtension {\n\n\tconstructor( parser ) {\n\n\t\tthis.parser = parser;\n\t\tthis.name = EXTENSIONS.KHR_MATERIALS_CLEARCOAT;\n\n\t}\n\n\tgetMaterialType( materialIndex ) {\n\n\t\tconst parser = this.parser;\n\t\tconst materialDef = parser.json.materials[ materialIndex ];\n\n\t\tif ( ! materialDef.extensions || ! materialDef.extensions[ this.name ] ) return null;\n\n\t\treturn MeshPhysicalMaterial;\n\n\t}\n\n\textendMaterialParams( materialIndex, materialParams ) {\n\n\t\tconst parser = this.parser;\n\t\tconst materialDef = parser.json.materials[ materialIndex ];\n\n\t\tif ( ! materialDef.extensions || ! materialDef.extensions[ this.name ] ) {\n\n\t\t\treturn Promise.resolve();\n\n\t\t}\n\n\t\tconst pending = [];\n\n\t\tconst extension = materialDef.extensions[ this.name ];\n\n\t\tif ( extension.clearcoatFactor !== undefined ) {\n\n\t\t\tmaterialParams.clearcoat = extension.clearcoatFactor;\n\n\t\t}\n\n\t\tif ( extension.clearcoatTexture !== undefined ) {\n\n\t\t\tpending.push( parser.assignTexture( materialParams, 'clearcoatMap', extension.clearcoatTexture ) );\n\n\t\t}\n\n\t\tif ( extension.clearcoatRoughnessFactor !== undefined ) {\n\n\t\t\tmaterialParams.clearcoatRoughness = extension.clearcoatRoughnessFactor;\n\n\t\t}\n\n\t\tif ( extension.clearcoatRoughnessTexture !== undefined ) {\n\n\t\t\tpending.push( parser.assignTexture( materialParams, 'clearcoatRoughnessMap', extension.clearcoatRoughnessTexture ) );\n\n\t\t}\n\n\t\tif ( extension.clearcoatNormalTexture !== undefined ) {\n\n\t\t\tpending.push( parser.assignTexture( materialParams, 'clearcoatNormalMap', extension.clearcoatNormalTexture ) );\n\n\t\t\tif ( extension.clearcoatNormalTexture.scale !== undefined ) {\n\n\t\t\t\tconst scale = extension.clearcoatNormalTexture.scale;\n\n\t\t\t\tmaterialParams.clearcoatNormalScale = new Vector2( scale, scale );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn Promise.all( pending );\n\n\t}\n\n}\n\n/**\n * Materials dispersion Extension\n *\n * Specification: https://github.com/KhronosGroup/glTF/tree/main/extensions/2.0/Khronos/KHR_materials_dispersion\n *\n * @private\n */\nclass GLTFMaterialsDispersionExtension {\n\n\tconstructor( parser ) {\n\n\t\tthis.parser = parser;\n\t\tthis.name = EXTENSIONS.KHR_MATERIALS_DISPERSION;\n\n\t}\n\n\tgetMaterialType( materialIndex ) {\n\n\t\tconst parser = this.parser;\n\t\tconst materialDef = parser.json.materials[ materialIndex ];\n\n\t\tif ( ! materialDef.extensions || ! materialDef.extensions[ this.name ] ) return null;\n\n\t\treturn MeshPhysicalMaterial;\n\n\t}\n\n\textendMaterialParams( materialIndex, materialParams ) {\n\n\t\tconst parser = this.parser;\n\t\tconst materialDef = parser.json.materials[ materialIndex ];\n\n\t\tif ( ! materialDef.extensions || ! materialDef.extensions[ this.name ] ) {\n\n\t\t\treturn Promise.resolve();\n\n\t\t}\n\n\t\tconst extension = materialDef.extensions[ this.name ];\n\n\t\tmaterialParams.dispersion = extension.dispersion !== undefined ? extension.dispersion : 0;\n\n\t\treturn Promise.resolve();\n\n\t}\n\n}\n\n/**\n * Iridescence Materials Extension\n *\n * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_materials_iridescence\n *\n * @private\n */\nclass GLTFMaterialsIridescenceExtension {\n\n\tconstructor( parser ) {\n\n\t\tthis.parser = parser;\n\t\tthis.name = EXTENSIONS.KHR_MATERIALS_IRIDESCENCE;\n\n\t}\n\n\tgetMaterialType( materialIndex ) {\n\n\t\tconst parser = this.parser;\n\t\tconst materialDef = parser.json.materials[ materialIndex ];\n\n\t\tif ( ! materialDef.extensions || ! materialDef.extensions[ this.name ] ) return null;\n\n\t\treturn MeshPhysicalMaterial;\n\n\t}\n\n\textendMaterialParams( materialIndex, materialParams ) {\n\n\t\tconst parser = this.parser;\n\t\tconst materialDef = parser.json.materials[ materialIndex ];\n\n\t\tif ( ! materialDef.extensions || ! materialDef.extensions[ this.name ] ) {\n\n\t\t\treturn Promise.resolve();\n\n\t\t}\n\n\t\tconst pending = [];\n\n\t\tconst extension = materialDef.extensions[ this.name ];\n\n\t\tif ( extension.iridescenceFactor !== undefined ) {\n\n\t\t\tmaterialParams.iridescence = extension.iridescenceFactor;\n\n\t\t}\n\n\t\tif ( extension.iridescenceTexture !== undefined ) {\n\n\t\t\tpending.push( parser.assignTexture( materialParams, 'iridescenceMap', extension.iridescenceTexture ) );\n\n\t\t}\n\n\t\tif ( extension.iridescenceIor !== undefined ) {\n\n\t\t\tmaterialParams.iridescenceIOR = extension.iridescenceIor;\n\n\t\t}\n\n\t\tif ( materialParams.iridescenceThicknessRange === undefined ) {\n\n\t\t\tmaterialParams.iridescenceThicknessRange = [ 100, 400 ];\n\n\t\t}\n\n\t\tif ( extension.iridescenceThicknessMinimum !== undefined ) {\n\n\t\t\tmaterialParams.iridescenceThicknessRange[ 0 ] = extension.iridescenceThicknessMinimum;\n\n\t\t}\n\n\t\tif ( extension.iridescenceThicknessMaximum !== undefined ) {\n\n\t\t\tmaterialParams.iridescenceThicknessRange[ 1 ] = extension.iridescenceThicknessMaximum;\n\n\t\t}\n\n\t\tif ( extension.iridescenceThicknessTexture !== undefined ) {\n\n\t\t\tpending.push( parser.assignTexture( materialParams, 'iridescenceThicknessMap', extension.iridescenceThicknessTexture ) );\n\n\t\t}\n\n\t\treturn Promise.all( pending );\n\n\t}\n\n}\n\n/**\n * Sheen Materials Extension\n *\n * Specification: https://github.com/KhronosGroup/glTF/tree/main/extensions/2.0/Khronos/KHR_materials_sheen\n *\n * @private\n */\nclass GLTFMaterialsSheenExtension {\n\n\tconstructor( parser ) {\n\n\t\tthis.parser = parser;\n\t\tthis.name = EXTENSIONS.KHR_MATERIALS_SHEEN;\n\n\t}\n\n\tgetMaterialType( materialIndex ) {\n\n\t\tconst parser = this.parser;\n\t\tconst materialDef = parser.json.materials[ materialIndex ];\n\n\t\tif ( ! materialDef.extensions || ! materialDef.extensions[ this.name ] ) return null;\n\n\t\treturn MeshPhysicalMaterial;\n\n\t}\n\n\textendMaterialParams( materialIndex, materialParams ) {\n\n\t\tconst parser = this.parser;\n\t\tconst materialDef = parser.json.materials[ materialIndex ];\n\n\t\tif ( ! materialDef.extensions || ! materialDef.extensions[ this.name ] ) {\n\n\t\t\treturn Promise.resolve();\n\n\t\t}\n\n\t\tconst pending = [];\n\n\t\tmaterialParams.sheenColor = new Color( 0, 0, 0 );\n\t\tmaterialParams.sheenRoughness = 0;\n\t\tmaterialParams.sheen = 1;\n\n\t\tconst extension = materialDef.extensions[ this.name ];\n\n\t\tif ( extension.sheenColorFactor !== undefined ) {\n\n\t\t\tconst colorFactor = extension.sheenColorFactor;\n\t\t\tmaterialParams.sheenColor.setRGB( colorFactor[ 0 ], colorFactor[ 1 ], colorFactor[ 2 ], LinearSRGBColorSpace );\n\n\t\t}\n\n\t\tif ( extension.sheenRoughnessFactor !== undefined ) {\n\n\t\t\tmaterialParams.sheenRoughness = extension.sheenRoughnessFactor;\n\n\t\t}\n\n\t\tif ( extension.sheenColorTexture !== undefined ) {\n\n\t\t\tpending.push( parser.assignTexture( materialParams, 'sheenColorMap', extension.sheenColorTexture, SRGBColorSpace ) );\n\n\t\t}\n\n\t\tif ( extension.sheenRoughnessTexture !== undefined ) {\n\n\t\t\tpending.push( parser.assignTexture( materialParams, 'sheenRoughnessMap', extension.sheenRoughnessTexture ) );\n\n\t\t}\n\n\t\treturn Promise.all( pending );\n\n\t}\n\n}\n\n/**\n * Transmission Materials Extension\n *\n * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_materials_transmission\n * Draft: https://github.com/KhronosGroup/glTF/pull/1698\n *\n * @private\n */\nclass GLTFMaterialsTransmissionExtension {\n\n\tconstructor( parser ) {\n\n\t\tthis.parser = parser;\n\t\tthis.name = EXTENSIONS.KHR_MATERIALS_TRANSMISSION;\n\n\t}\n\n\tgetMaterialType( materialIndex ) {\n\n\t\tconst parser = this.parser;\n\t\tconst materialDef = parser.json.materials[ materialIndex ];\n\n\t\tif ( ! materialDef.extensions || ! materialDef.extensions[ this.name ] ) return null;\n\n\t\treturn MeshPhysicalMaterial;\n\n\t}\n\n\textendMaterialParams( materialIndex, materialParams ) {\n\n\t\tconst parser = this.parser;\n\t\tconst materialDef = parser.json.materials[ materialIndex ];\n\n\t\tif ( ! materialDef.extensions || ! materialDef.extensions[ this.name ] ) {\n\n\t\t\treturn Promise.resolve();\n\n\t\t}\n\n\t\tconst pending = [];\n\n\t\tconst extension = materialDef.extensions[ this.name ];\n\n\t\tif ( extension.transmissionFactor !== undefined ) {\n\n\t\t\tmaterialParams.transmission = extension.transmissionFactor;\n\n\t\t}\n\n\t\tif ( extension.transmissionTexture !== undefined ) {\n\n\t\t\tpending.push( parser.assignTexture( materialParams, 'transmissionMap', extension.transmissionTexture ) );\n\n\t\t}\n\n\t\treturn Promise.all( pending );\n\n\t}\n\n}\n\n/**\n * Materials Volume Extension\n *\n * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_materials_volume\n *\n * @private\n */\nclass GLTFMaterialsVolumeExtension {\n\n\tconstructor( parser ) {\n\n\t\tthis.parser = parser;\n\t\tthis.name = EXTENSIONS.KHR_MATERIALS_VOLUME;\n\n\t}\n\n\tgetMaterialType( materialIndex ) {\n\n\t\tconst parser = this.parser;\n\t\tconst materialDef = parser.json.materials[ materialIndex ];\n\n\t\tif ( ! materialDef.extensions || ! materialDef.extensions[ this.name ] ) return null;\n\n\t\treturn MeshPhysicalMaterial;\n\n\t}\n\n\textendMaterialParams( materialIndex, materialParams ) {\n\n\t\tconst parser = this.parser;\n\t\tconst materialDef = parser.json.materials[ materialIndex ];\n\n\t\tif ( ! materialDef.extensions || ! materialDef.extensions[ this.name ] ) {\n\n\t\t\treturn Promise.resolve();\n\n\t\t}\n\n\t\tconst pending = [];\n\n\t\tconst extension = materialDef.extensions[ this.name ];\n\n\t\tmaterialParams.thickness = extension.thicknessFactor !== undefined ? extension.thicknessFactor : 0;\n\n\t\tif ( extension.thicknessTexture !== undefined ) {\n\n\t\t\tpending.push( parser.assignTexture( materialParams, 'thicknessMap', extension.thicknessTexture ) );\n\n\t\t}\n\n\t\tmaterialParams.attenuationDistance = extension.attenuationDistance || Infinity;\n\n\t\tconst colorArray = extension.attenuationColor || [ 1, 1, 1 ];\n\t\tmaterialParams.attenuationColor = new Color().setRGB( colorArray[ 0 ], colorArray[ 1 ], colorArray[ 2 ], LinearSRGBColorSpace );\n\n\t\treturn Promise.all( pending );\n\n\t}\n\n}\n\n/**\n * Materials ior Extension\n *\n * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_materials_ior\n *\n * @private\n */\nclass GLTFMaterialsIorExtension {\n\n\tconstructor( parser ) {\n\n\t\tthis.parser = parser;\n\t\tthis.name = EXTENSIONS.KHR_MATERIALS_IOR;\n\n\t}\n\n\tgetMaterialType( materialIndex ) {\n\n\t\tconst parser = this.parser;\n\t\tconst materialDef = parser.json.materials[ materialIndex ];\n\n\t\tif ( ! materialDef.extensions || ! materialDef.extensions[ this.name ] ) return null;\n\n\t\treturn MeshPhysicalMaterial;\n\n\t}\n\n\textendMaterialParams( materialIndex, materialParams ) {\n\n\t\tconst parser = this.parser;\n\t\tconst materialDef = parser.json.materials[ materialIndex ];\n\n\t\tif ( ! materialDef.extensions || ! materialDef.extensions[ this.name ] ) {\n\n\t\t\treturn Promise.resolve();\n\n\t\t}\n\n\t\tconst extension = materialDef.extensions[ this.name ];\n\n\t\tmaterialParams.ior = extension.ior !== undefined ? extension.ior : 1.5;\n\n\t\treturn Promise.resolve();\n\n\t}\n\n}\n\n/**\n * Materials specular Extension\n *\n * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_materials_specular\n *\n * @private\n */\nclass GLTFMaterialsSpecularExtension {\n\n\tconstructor( parser ) {\n\n\t\tthis.parser = parser;\n\t\tthis.name = EXTENSIONS.KHR_MATERIALS_SPECULAR;\n\n\t}\n\n\tgetMaterialType( materialIndex ) {\n\n\t\tconst parser = this.parser;\n\t\tconst materialDef = parser.json.materials[ materialIndex ];\n\n\t\tif ( ! materialDef.extensions || ! materialDef.extensions[ this.name ] ) return null;\n\n\t\treturn MeshPhysicalMaterial;\n\n\t}\n\n\textendMaterialParams( materialIndex, materialParams ) {\n\n\t\tconst parser = this.parser;\n\t\tconst materialDef = parser.json.materials[ materialIndex ];\n\n\t\tif ( ! materialDef.extensions || ! materialDef.extensions[ this.name ] ) {\n\n\t\t\treturn Promise.resolve();\n\n\t\t}\n\n\t\tconst pending = [];\n\n\t\tconst extension = materialDef.extensions[ this.name ];\n\n\t\tmaterialParams.specularIntensity = extension.specularFactor !== undefined ? extension.specularFactor : 1.0;\n\n\t\tif ( extension.specularTexture !== undefined ) {\n\n\t\t\tpending.push( parser.assignTexture( materialParams, 'specularIntensityMap', extension.specularTexture ) );\n\n\t\t}\n\n\t\tconst colorArray = extension.specularColorFactor || [ 1, 1, 1 ];\n\t\tmaterialParams.specularColor = new Color().setRGB( colorArray[ 0 ], colorArray[ 1 ], colorArray[ 2 ], LinearSRGBColorSpace );\n\n\t\tif ( extension.specularColorTexture !== undefined ) {\n\n\t\t\tpending.push( parser.assignTexture( materialParams, 'specularColorMap', extension.specularColorTexture, SRGBColorSpace ) );\n\n\t\t}\n\n\t\treturn Promise.all( pending );\n\n\t}\n\n}\n\n\n/**\n * Materials bump Extension\n *\n * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/EXT_materials_bump\n *\n * @private\n */\nclass GLTFMaterialsBumpExtension {\n\n\tconstructor( parser ) {\n\n\t\tthis.parser = parser;\n\t\tthis.name = EXTENSIONS.EXT_MATERIALS_BUMP;\n\n\t}\n\n\tgetMaterialType( materialIndex ) {\n\n\t\tconst parser = this.parser;\n\t\tconst materialDef = parser.json.materials[ materialIndex ];\n\n\t\tif ( ! materialDef.extensions || ! materialDef.extensions[ this.name ] ) return null;\n\n\t\treturn MeshPhysicalMaterial;\n\n\t}\n\n\textendMaterialParams( materialIndex, materialParams ) {\n\n\t\tconst parser = this.parser;\n\t\tconst materialDef = parser.json.materials[ materialIndex ];\n\n\t\tif ( ! materialDef.extensions || ! materialDef.extensions[ this.name ] ) {\n\n\t\t\treturn Promise.resolve();\n\n\t\t}\n\n\t\tconst pending = [];\n\n\t\tconst extension = materialDef.extensions[ this.name ];\n\n\t\tmaterialParams.bumpScale = extension.bumpFactor !== undefined ? extension.bumpFactor : 1.0;\n\n\t\tif ( extension.bumpTexture !== undefined ) {\n\n\t\t\tpending.push( parser.assignTexture( materialParams, 'bumpMap', extension.bumpTexture ) );\n\n\t\t}\n\n\t\treturn Promise.all( pending );\n\n\t}\n\n}\n\n/**\n * Materials anisotropy Extension\n *\n * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_materials_anisotropy\n *\n * @private\n */\nclass GLTFMaterialsAnisotropyExtension {\n\n\tconstructor( parser ) {\n\n\t\tthis.parser = parser;\n\t\tthis.name = EXTENSIONS.KHR_MATERIALS_ANISOTROPY;\n\n\t}\n\n\tgetMaterialType( materialIndex ) {\n\n\t\tconst parser = this.parser;\n\t\tconst materialDef = parser.json.materials[ materialIndex ];\n\n\t\tif ( ! materialDef.extensions || ! materialDef.extensions[ this.name ] ) return null;\n\n\t\treturn MeshPhysicalMaterial;\n\n\t}\n\n\textendMaterialParams( materialIndex, materialParams ) {\n\n\t\tconst parser = this.parser;\n\t\tconst materialDef = parser.json.materials[ materialIndex ];\n\n\t\tif ( ! materialDef.extensions || ! materialDef.extensions[ this.name ] ) {\n\n\t\t\treturn Promise.resolve();\n\n\t\t}\n\n\t\tconst pending = [];\n\n\t\tconst extension = materialDef.extensions[ this.name ];\n\n\t\tif ( extension.anisotropyStrength !== undefined ) {\n\n\t\t\tmaterialParams.anisotropy = extension.anisotropyStrength;\n\n\t\t}\n\n\t\tif ( extension.anisotropyRotation !== undefined ) {\n\n\t\t\tmaterialParams.anisotropyRotation = extension.anisotropyRotation;\n\n\t\t}\n\n\t\tif ( extension.anisotropyTexture !== undefined ) {\n\n\t\t\tpending.push( parser.assignTexture( materialParams, 'anisotropyMap', extension.anisotropyTexture ) );\n\n\t\t}\n\n\t\treturn Promise.all( pending );\n\n\t}\n\n}\n\n/**\n * BasisU Texture Extension\n *\n * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_texture_basisu\n *\n * @private\n */\nclass GLTFTextureBasisUExtension {\n\n\tconstructor( parser ) {\n\n\t\tthis.parser = parser;\n\t\tthis.name = EXTENSIONS.KHR_TEXTURE_BASISU;\n\n\t}\n\n\tloadTexture( textureIndex ) {\n\n\t\tconst parser = this.parser;\n\t\tconst json = parser.json;\n\n\t\tconst textureDef = json.textures[ textureIndex ];\n\n\t\tif ( ! textureDef.extensions || ! textureDef.extensions[ this.name ] ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\tconst extension = textureDef.extensions[ this.name ];\n\t\tconst loader = parser.options.ktx2Loader;\n\n\t\tif ( ! loader ) {\n\n\t\t\tif ( json.extensionsRequired && json.extensionsRequired.indexOf( this.name ) >= 0 ) {\n\n\t\t\t\tthrow new Error( 'THREE.GLTFLoader: setKTX2Loader must be called before loading KTX2 textures' );\n\n\t\t\t} else {\n\n\t\t\t\t// Assumes that the extension is optional and that a fallback texture is present\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn parser.loadTextureImage( textureIndex, extension.source, loader );\n\n\t}\n\n}\n\n/**\n * WebP Texture Extension\n *\n * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Vendor/EXT_texture_webp\n *\n * @private\n */\nclass GLTFTextureWebPExtension {\n\n\tconstructor( parser ) {\n\n\t\tthis.parser = parser;\n\t\tthis.name = EXTENSIONS.EXT_TEXTURE_WEBP;\n\n\t}\n\n\tloadTexture( textureIndex ) {\n\n\t\tconst name = this.name;\n\t\tconst parser = this.parser;\n\t\tconst json = parser.json;\n\n\t\tconst textureDef = json.textures[ textureIndex ];\n\n\t\tif ( ! textureDef.extensions || ! textureDef.extensions[ name ] ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\tconst extension = textureDef.extensions[ name ];\n\t\tconst source = json.images[ extension.source ];\n\n\t\tlet loader = parser.textureLoader;\n\t\tif ( source.uri ) {\n\n\t\t\tconst handler = parser.options.manager.getHandler( source.uri );\n\t\t\tif ( handler !== null ) loader = handler;\n\n\t\t}\n\n\t\treturn parser.loadTextureImage( textureIndex, extension.source, loader );\n\n\t}\n\n}\n\n/**\n * AVIF Texture Extension\n *\n * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Vendor/EXT_texture_avif\n *\n * @private\n */\nclass GLTFTextureAVIFExtension {\n\n\tconstructor( parser ) {\n\n\t\tthis.parser = parser;\n\t\tthis.name = EXTENSIONS.EXT_TEXTURE_AVIF;\n\n\t}\n\n\tloadTexture( textureIndex ) {\n\n\t\tconst name = this.name;\n\t\tconst parser = this.parser;\n\t\tconst json = parser.json;\n\n\t\tconst textureDef = json.textures[ textureIndex ];\n\n\t\tif ( ! textureDef.extensions || ! textureDef.extensions[ name ] ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\tconst extension = textureDef.extensions[ name ];\n\t\tconst source = json.images[ extension.source ];\n\n\t\tlet loader = parser.textureLoader;\n\t\tif ( source.uri ) {\n\n\t\t\tconst handler = parser.options.manager.getHandler( source.uri );\n\t\t\tif ( handler !== null ) loader = handler;\n\n\t\t}\n\n\t\treturn parser.loadTextureImage( textureIndex, extension.source, loader );\n\n\t}\n\n}\n\n/**\n * meshopt BufferView Compression Extension\n *\n * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Vendor/EXT_meshopt_compression\n *\n * @private\n */\nclass GLTFMeshoptCompression {\n\n\tconstructor( parser ) {\n\n\t\tthis.name = EXTENSIONS.EXT_MESHOPT_COMPRESSION;\n\t\tthis.parser = parser;\n\n\t}\n\n\tloadBufferView( index ) {\n\n\t\tconst json = this.parser.json;\n\t\tconst bufferView = json.bufferViews[ index ];\n\n\t\tif ( bufferView.extensions && bufferView.extensions[ this.name ] ) {\n\n\t\t\tconst extensionDef = bufferView.extensions[ this.name ];\n\n\t\t\tconst buffer = this.parser.getDependency( 'buffer', extensionDef.buffer );\n\t\t\tconst decoder = this.parser.options.meshoptDecoder;\n\n\t\t\tif ( ! decoder || ! decoder.supported ) {\n\n\t\t\t\tif ( json.extensionsRequired && json.extensionsRequired.indexOf( this.name ) >= 0 ) {\n\n\t\t\t\t\tthrow new Error( 'THREE.GLTFLoader: setMeshoptDecoder must be called before loading compressed files' );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// Assumes that the extension is optional and that fallback buffer data is present\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn buffer.then( function ( res ) {\n\n\t\t\t\tconst byteOffset = extensionDef.byteOffset || 0;\n\t\t\t\tconst byteLength = extensionDef.byteLength || 0;\n\n\t\t\t\tconst count = extensionDef.count;\n\t\t\t\tconst stride = extensionDef.byteStride;\n\n\t\t\t\tconst source = new Uint8Array( res, byteOffset, byteLength );\n\n\t\t\t\tif ( decoder.decodeGltfBufferAsync ) {\n\n\t\t\t\t\treturn decoder.decodeGltfBufferAsync( count, stride, source, extensionDef.mode, extensionDef.filter ).then( function ( res ) {\n\n\t\t\t\t\t\treturn res.buffer;\n\n\t\t\t\t\t} );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// Support for MeshoptDecoder 0.18 or earlier, without decodeGltfBufferAsync\n\t\t\t\t\treturn decoder.ready.then( function () {\n\n\t\t\t\t\t\tconst result = new ArrayBuffer( count * stride );\n\t\t\t\t\t\tdecoder.decodeGltfBuffer( new Uint8Array( result ), count, stride, source, extensionDef.mode, extensionDef.filter );\n\t\t\t\t\t\treturn result;\n\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t} else {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t}\n\n}\n\n/**\n * GPU Instancing Extension\n *\n * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Vendor/EXT_mesh_gpu_instancing\n *\n * @private\n */\nclass GLTFMeshGpuInstancing {\n\n\tconstructor( parser ) {\n\n\t\tthis.name = EXTENSIONS.EXT_MESH_GPU_INSTANCING;\n\t\tthis.parser = parser;\n\n\t}\n\n\tcreateNodeMesh( nodeIndex ) {\n\n\t\tconst json = this.parser.json;\n\t\tconst nodeDef = json.nodes[ nodeIndex ];\n\n\t\tif ( ! nodeDef.extensions || ! nodeDef.extensions[ this.name ] ||\n\t\t\tnodeDef.mesh === undefined ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\tconst meshDef = json.meshes[ nodeDef.mesh ];\n\n\t\t// No Points or Lines + Instancing support yet\n\n\t\tfor ( const primitive of meshDef.primitives ) {\n\n\t\t\tif ( primitive.mode !== WEBGL_CONSTANTS.TRIANGLES &&\n\t\t\t\t primitive.mode !== WEBGL_CONSTANTS.TRIANGLE_STRIP &&\n\t\t\t\t primitive.mode !== WEBGL_CONSTANTS.TRIANGLE_FAN &&\n\t\t\t\t primitive.mode !== undefined ) {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst extensionDef = nodeDef.extensions[ this.name ];\n\t\tconst attributesDef = extensionDef.attributes;\n\n\t\t// @TODO: Can we support InstancedMesh + SkinnedMesh?\n\n\t\tconst pending = [];\n\t\tconst attributes = {};\n\n\t\tfor ( const key in attributesDef ) {\n\n\t\t\tpending.push( this.parser.getDependency( 'accessor', attributesDef[ key ] ).then( accessor => {\n\n\t\t\t\tattributes[ key ] = accessor;\n\t\t\t\treturn attributes[ key ];\n\n\t\t\t} ) );\n\n\t\t}\n\n\t\tif ( pending.length < 1 ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\tpending.push( this.parser.createNodeMesh( nodeIndex ) );\n\n\t\treturn Promise.all( pending ).then( results => {\n\n\t\t\tconst nodeObject = results.pop();\n\t\t\tconst meshes = nodeObject.isGroup ? nodeObject.children : [ nodeObject ];\n\t\t\tconst count = results[ 0 ].count; // All attribute counts should be same\n\t\t\tconst instancedMeshes = [];\n\n\t\t\tfor ( const mesh of meshes ) {\n\n\t\t\t\t// Temporal variables\n\t\t\t\tconst m = new Matrix4();\n\t\t\t\tconst p = new Vector3();\n\t\t\t\tconst q = new Quaternion();\n\t\t\t\tconst s = new Vector3( 1, 1, 1 );\n\n\t\t\t\tconst instancedMesh = new InstancedMesh( mesh.geometry, mesh.material, count );\n\n\t\t\t\tfor ( let i = 0; i < count; i ++ ) {\n\n\t\t\t\t\tif ( attributes.TRANSLATION ) {\n\n\t\t\t\t\t\tp.fromBufferAttribute( attributes.TRANSLATION, i );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( attributes.ROTATION ) {\n\n\t\t\t\t\t\tq.fromBufferAttribute( attributes.ROTATION, i );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( attributes.SCALE ) {\n\n\t\t\t\t\t\ts.fromBufferAttribute( attributes.SCALE, i );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tinstancedMesh.setMatrixAt( i, m.compose( p, q, s ) );\n\n\t\t\t\t}\n\n\t\t\t\t// Add instance attributes to the geometry, excluding TRS.\n\t\t\t\tfor ( const attributeName in attributes ) {\n\n\t\t\t\t\tif ( attributeName === '_COLOR_0' ) {\n\n\t\t\t\t\t\tconst attr = attributes[ attributeName ];\n\t\t\t\t\t\tinstancedMesh.instanceColor = new InstancedBufferAttribute( attr.array, attr.itemSize, attr.normalized );\n\n\t\t\t\t\t} else if ( attributeName !== 'TRANSLATION' &&\n\t\t\t\t\t\t attributeName !== 'ROTATION' &&\n\t\t\t\t\t\t attributeName !== 'SCALE' ) {\n\n\t\t\t\t\t\tmesh.geometry.setAttribute( attributeName, attributes[ attributeName ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// Just in case\n\t\t\t\tObject3D.prototype.copy.call( instancedMesh, mesh );\n\n\t\t\t\tthis.parser.assignFinalMaterial( instancedMesh );\n\n\t\t\t\tinstancedMeshes.push( instancedMesh );\n\n\t\t\t}\n\n\t\t\tif ( nodeObject.isGroup ) {\n\n\t\t\t\tnodeObject.clear();\n\n\t\t\t\tnodeObject.add( ... instancedMeshes );\n\n\t\t\t\treturn nodeObject;\n\n\t\t\t}\n\n\t\t\treturn instancedMeshes[ 0 ];\n\n\t\t} );\n\n\t}\n\n}\n\n/* BINARY EXTENSION */\nconst BINARY_EXTENSION_HEADER_MAGIC = 'glTF';\nconst BINARY_EXTENSION_HEADER_LENGTH = 12;\nconst BINARY_EXTENSION_CHUNK_TYPES = { JSON: 0x4E4F534A, BIN: 0x004E4942 };\n\nclass GLTFBinaryExtension {\n\n\tconstructor( data ) {\n\n\t\tthis.name = EXTENSIONS.KHR_BINARY_GLTF;\n\t\tthis.content = null;\n\t\tthis.body = null;\n\n\t\tconst headerView = new DataView( data, 0, BINARY_EXTENSION_HEADER_LENGTH );\n\t\tconst textDecoder = new TextDecoder();\n\n\t\tthis.header = {\n\t\t\tmagic: textDecoder.decode( new Uint8Array( data.slice( 0, 4 ) ) ),\n\t\t\tversion: headerView.getUint32( 4, true ),\n\t\t\tlength: headerView.getUint32( 8, true )\n\t\t};\n\n\t\tif ( this.header.magic !== BINARY_EXTENSION_HEADER_MAGIC ) {\n\n\t\t\tthrow new Error( 'THREE.GLTFLoader: Unsupported glTF-Binary header.' );\n\n\t\t} else if ( this.header.version < 2.0 ) {\n\n\t\t\tthrow new Error( 'THREE.GLTFLoader: Legacy binary file detected.' );\n\n\t\t}\n\n\t\tconst chunkContentsLength = this.header.length - BINARY_EXTENSION_HEADER_LENGTH;\n\t\tconst chunkView = new DataView( data, BINARY_EXTENSION_HEADER_LENGTH );\n\t\tlet chunkIndex = 0;\n\n\t\twhile ( chunkIndex < chunkContentsLength ) {\n\n\t\t\tconst chunkLength = chunkView.getUint32( chunkIndex, true );\n\t\t\tchunkIndex += 4;\n\n\t\t\tconst chunkType = chunkView.getUint32( chunkIndex, true );\n\t\t\tchunkIndex += 4;\n\n\t\t\tif ( chunkType === BINARY_EXTENSION_CHUNK_TYPES.JSON ) {\n\n\t\t\t\tconst contentArray = new Uint8Array( data, BINARY_EXTENSION_HEADER_LENGTH + chunkIndex, chunkLength );\n\t\t\t\tthis.content = textDecoder.decode( contentArray );\n\n\t\t\t} else if ( chunkType === BINARY_EXTENSION_CHUNK_TYPES.BIN ) {\n\n\t\t\t\tconst byteOffset = BINARY_EXTENSION_HEADER_LENGTH + chunkIndex;\n\t\t\t\tthis.body = data.slice( byteOffset, byteOffset + chunkLength );\n\n\t\t\t}\n\n\t\t\t// Clients must ignore chunks with unknown types.\n\n\t\t\tchunkIndex += chunkLength;\n\n\t\t}\n\n\t\tif ( this.content === null ) {\n\n\t\t\tthrow new Error( 'THREE.GLTFLoader: JSON content not found.' );\n\n\t\t}\n\n\t}\n\n}\n\n/**\n * DRACO Mesh Compression Extension\n *\n * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_draco_mesh_compression\n *\n * @private\n */\nclass GLTFDracoMeshCompressionExtension {\n\n\tconstructor( json, dracoLoader ) {\n\n\t\tif ( ! dracoLoader ) {\n\n\t\t\tthrow new Error( 'THREE.GLTFLoader: No DRACOLoader instance provided.' );\n\n\t\t}\n\n\t\tthis.name = EXTENSIONS.KHR_DRACO_MESH_COMPRESSION;\n\t\tthis.json = json;\n\t\tthis.dracoLoader = dracoLoader;\n\t\tthis.dracoLoader.preload();\n\n\t}\n\n\tdecodePrimitive( primitive, parser ) {\n\n\t\tconst json = this.json;\n\t\tconst dracoLoader = this.dracoLoader;\n\t\tconst bufferViewIndex = primitive.extensions[ this.name ].bufferView;\n\t\tconst gltfAttributeMap = primitive.extensions[ this.name ].attributes;\n\t\tconst threeAttributeMap = {};\n\t\tconst attributeNormalizedMap = {};\n\t\tconst attributeTypeMap = {};\n\n\t\tfor ( const attributeName in gltfAttributeMap ) {\n\n\t\t\tconst threeAttributeName = ATTRIBUTES[ attributeName ] || attributeName.toLowerCase();\n\n\t\t\tthreeAttributeMap[ threeAttributeName ] = gltfAttributeMap[ attributeName ];\n\n\t\t}\n\n\t\tfor ( const attributeName in primitive.attributes ) {\n\n\t\t\tconst threeAttributeName = ATTRIBUTES[ attributeName ] || attributeName.toLowerCase();\n\n\t\t\tif ( gltfAttributeMap[ attributeName ] !== undefined ) {\n\n\t\t\t\tconst accessorDef = json.accessors[ primitive.attributes[ attributeName ] ];\n\t\t\t\tconst componentType = WEBGL_COMPONENT_TYPES[ accessorDef.componentType ];\n\n\t\t\t\tattributeTypeMap[ threeAttributeName ] = componentType.name;\n\t\t\t\tattributeNormalizedMap[ threeAttributeName ] = accessorDef.normalized === true;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn parser.getDependency( 'bufferView', bufferViewIndex ).then( function ( bufferView ) {\n\n\t\t\treturn new Promise( function ( resolve, reject ) {\n\n\t\t\t\tdracoLoader.decodeDracoFile( bufferView, function ( geometry ) {\n\n\t\t\t\t\tfor ( const attributeName in geometry.attributes ) {\n\n\t\t\t\t\t\tconst attribute = geometry.attributes[ attributeName ];\n\t\t\t\t\t\tconst normalized = attributeNormalizedMap[ attributeName ];\n\n\t\t\t\t\t\tif ( normalized !== undefined ) attribute.normalized = normalized;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tresolve( geometry );\n\n\t\t\t\t}, threeAttributeMap, attributeTypeMap, LinearSRGBColorSpace, reject );\n\n\t\t\t} );\n\n\t\t} );\n\n\t}\n\n}\n\n/**\n * Texture Transform Extension\n *\n * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_texture_transform\n *\n * @private\n */\nclass GLTFTextureTransformExtension {\n\n\tconstructor() {\n\n\t\tthis.name = EXTENSIONS.KHR_TEXTURE_TRANSFORM;\n\n\t}\n\n\textendTexture( texture, transform ) {\n\n\t\tif ( ( transform.texCoord === undefined || transform.texCoord === texture.channel )\n\t\t\t&& transform.offset === undefined\n\t\t\t&& transform.rotation === undefined\n\t\t\t&& transform.scale === undefined ) {\n\n\t\t\t// See https://github.com/mrdoob/three.js/issues/21819.\n\t\t\treturn texture;\n\n\t\t}\n\n\t\ttexture = texture.clone();\n\n\t\tif ( transform.texCoord !== undefined ) {\n\n\t\t\ttexture.channel = transform.texCoord;\n\n\t\t}\n\n\t\tif ( transform.offset !== undefined ) {\n\n\t\t\ttexture.offset.fromArray( transform.offset );\n\n\t\t}\n\n\t\tif ( transform.rotation !== undefined ) {\n\n\t\t\ttexture.rotation = transform.rotation;\n\n\t\t}\n\n\t\tif ( transform.scale !== undefined ) {\n\n\t\t\ttexture.repeat.fromArray( transform.scale );\n\n\t\t}\n\n\t\ttexture.needsUpdate = true;\n\n\t\treturn texture;\n\n\t}\n\n}\n\n/**\n * Mesh Quantization Extension\n *\n * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_mesh_quantization\n *\n * @private\n */\nclass GLTFMeshQuantizationExtension {\n\n\tconstructor() {\n\n\t\tthis.name = EXTENSIONS.KHR_MESH_QUANTIZATION;\n\n\t}\n\n}\n\n/*********************************/\n/********** INTERPOLATION ********/\n/*********************************/\n\n// Spline Interpolation\n// Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#appendix-c-spline-interpolation\nclass GLTFCubicSplineInterpolant extends Interpolant {\n\n\tconstructor( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tsuper( parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n\t}\n\n\tcopySampleValue_( index ) {\n\n\t\t// Copies a sample value to the result buffer. See description of glTF\n\t\t// CUBICSPLINE values layout in interpolate_() function below.\n\n\t\tconst result = this.resultBuffer,\n\t\t\tvalues = this.sampleValues,\n\t\t\tvalueSize = this.valueSize,\n\t\t\toffset = index * valueSize * 3 + valueSize;\n\n\t\tfor ( let i = 0; i !== valueSize; i ++ ) {\n\n\t\t\tresult[ i ] = values[ offset + i ];\n\n\t\t}\n\n\t\treturn result;\n\n\t}\n\n\tinterpolate_( i1, t0, t, t1 ) {\n\n\t\tconst result = this.resultBuffer;\n\t\tconst values = this.sampleValues;\n\t\tconst stride = this.valueSize;\n\n\t\tconst stride2 = stride * 2;\n\t\tconst stride3 = stride * 3;\n\n\t\tconst td = t1 - t0;\n\n\t\tconst p = ( t - t0 ) / td;\n\t\tconst pp = p * p;\n\t\tconst ppp = pp * p;\n\n\t\tconst offset1 = i1 * stride3;\n\t\tconst offset0 = offset1 - stride3;\n\n\t\tconst s2 = - 2 * ppp + 3 * pp;\n\t\tconst s3 = ppp - pp;\n\t\tconst s0 = 1 - s2;\n\t\tconst s1 = s3 - pp + p;\n\n\t\t// Layout of keyframe output values for CUBICSPLINE animations:\n\t\t//   [ inTangent_1, splineVertex_1, outTangent_1, inTangent_2, splineVertex_2, ... ]\n\t\tfor ( let i = 0; i !== stride; i ++ ) {\n\n\t\t\tconst p0 = values[ offset0 + i + stride ]; // splineVertex_k\n\t\t\tconst m0 = values[ offset0 + i + stride2 ] * td; // outTangent_k * (t_k+1 - t_k)\n\t\t\tconst p1 = values[ offset1 + i + stride ]; // splineVertex_k+1\n\t\t\tconst m1 = values[ offset1 + i ] * td; // inTangent_k+1 * (t_k+1 - t_k)\n\n\t\t\tresult[ i ] = s0 * p0 + s1 * m0 + s2 * p1 + s3 * m1;\n\n\t\t}\n\n\t\treturn result;\n\n\t}\n\n}\n\nconst _quaternion = new Quaternion();\n\nclass GLTFCubicSplineQuaternionInterpolant extends GLTFCubicSplineInterpolant {\n\n\tinterpolate_( i1, t0, t, t1 ) {\n\n\t\tconst result = super.interpolate_( i1, t0, t, t1 );\n\n\t\t_quaternion.fromArray( result ).normalize().toArray( result );\n\n\t\treturn result;\n\n\t}\n\n}\n\n\n/*********************************/\n/********** INTERNALS ************/\n/*********************************/\n\n/* CONSTANTS */\n\nconst WEBGL_CONSTANTS = {\n\tFLOAT: 5126,\n\t//FLOAT_MAT2: 35674,\n\tFLOAT_MAT3: 35675,\n\tFLOAT_MAT4: 35676,\n\tFLOAT_VEC2: 35664,\n\tFLOAT_VEC3: 35665,\n\tFLOAT_VEC4: 35666,\n\tLINEAR: 9729,\n\tREPEAT: 10497,\n\tSAMPLER_2D: 35678,\n\tPOINTS: 0,\n\tLINES: 1,\n\tLINE_LOOP: 2,\n\tLINE_STRIP: 3,\n\tTRIANGLES: 4,\n\tTRIANGLE_STRIP: 5,\n\tTRIANGLE_FAN: 6,\n\tUNSIGNED_BYTE: 5121,\n\tUNSIGNED_SHORT: 5123\n};\n\nconst WEBGL_COMPONENT_TYPES = {\n\t5120: Int8Array,\n\t5121: Uint8Array,\n\t5122: Int16Array,\n\t5123: Uint16Array,\n\t5125: Uint32Array,\n\t5126: Float32Array\n};\n\nconst WEBGL_FILTERS = {\n\t9728: NearestFilter,\n\t9729: LinearFilter,\n\t9984: NearestMipmapNearestFilter,\n\t9985: LinearMipmapNearestFilter,\n\t9986: NearestMipmapLinearFilter,\n\t9987: LinearMipmapLinearFilter\n};\n\nconst WEBGL_WRAPPINGS = {\n\t33071: ClampToEdgeWrapping,\n\t33648: MirroredRepeatWrapping,\n\t10497: RepeatWrapping\n};\n\nconst WEBGL_TYPE_SIZES = {\n\t'SCALAR': 1,\n\t'VEC2': 2,\n\t'VEC3': 3,\n\t'VEC4': 4,\n\t'MAT2': 4,\n\t'MAT3': 9,\n\t'MAT4': 16\n};\n\nconst ATTRIBUTES = {\n\tPOSITION: 'position',\n\tNORMAL: 'normal',\n\tTANGENT: 'tangent',\n\tTEXCOORD_0: 'uv',\n\tTEXCOORD_1: 'uv1',\n\tTEXCOORD_2: 'uv2',\n\tTEXCOORD_3: 'uv3',\n\tCOLOR_0: 'color',\n\tWEIGHTS_0: 'skinWeight',\n\tJOINTS_0: 'skinIndex',\n};\n\nconst PATH_PROPERTIES = {\n\tscale: 'scale',\n\ttranslation: 'position',\n\trotation: 'quaternion',\n\tweights: 'morphTargetInfluences'\n};\n\nconst INTERPOLATION = {\n\tCUBICSPLINE: undefined, // We use a custom interpolant (GLTFCubicSplineInterpolation) for CUBICSPLINE tracks. Each\n\t\t                        // keyframe track will be initialized with a default interpolation type, then modified.\n\tLINEAR: InterpolateLinear,\n\tSTEP: InterpolateDiscrete\n};\n\nconst ALPHA_MODES = {\n\tOPAQUE: 'OPAQUE',\n\tMASK: 'MASK',\n\tBLEND: 'BLEND'\n};\n\n/**\n * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#default-material\n *\n * @private\n * @param {Object<string, Material>} cache\n * @return {Material}\n */\nfunction createDefaultMaterial( cache ) {\n\n\tif ( cache[ 'DefaultMaterial' ] === undefined ) {\n\n\t\tcache[ 'DefaultMaterial' ] = new MeshStandardMaterial( {\n\t\t\tcolor: 0xFFFFFF,\n\t\t\temissive: 0x000000,\n\t\t\tmetalness: 1,\n\t\t\troughness: 1,\n\t\t\ttransparent: false,\n\t\t\tdepthTest: true,\n\t\t\tside: FrontSide\n\t\t} );\n\n\t}\n\n\treturn cache[ 'DefaultMaterial' ];\n\n}\n\nfunction addUnknownExtensionsToUserData( knownExtensions, object, objectDef ) {\n\n\t// Add unknown glTF extensions to an object's userData.\n\n\tfor ( const name in objectDef.extensions ) {\n\n\t\tif ( knownExtensions[ name ] === undefined ) {\n\n\t\t\tobject.userData.gltfExtensions = object.userData.gltfExtensions || {};\n\t\t\tobject.userData.gltfExtensions[ name ] = objectDef.extensions[ name ];\n\n\t\t}\n\n\t}\n\n}\n\n/**\n *\n * @private\n * @param {Object3D|Material|BufferGeometry|Object|AnimationClip} object\n * @param {GLTF.definition} gltfDef\n */\nfunction assignExtrasToUserData( object, gltfDef ) {\n\n\tif ( gltfDef.extras !== undefined ) {\n\n\t\tif ( typeof gltfDef.extras === 'object' ) {\n\n\t\t\tObject.assign( object.userData, gltfDef.extras );\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'THREE.GLTFLoader: Ignoring primitive type .extras, ' + gltfDef.extras );\n\n\t\t}\n\n\t}\n\n}\n\n/**\n * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#morph-targets\n *\n * @private\n * @param {BufferGeometry} geometry\n * @param {Array<GLTF.Target>} targets\n * @param {GLTFParser} parser\n * @return {Promise<BufferGeometry>}\n */\nfunction addMorphTargets( geometry, targets, parser ) {\n\n\tlet hasMorphPosition = false;\n\tlet hasMorphNormal = false;\n\tlet hasMorphColor = false;\n\n\tfor ( let i = 0, il = targets.length; i < il; i ++ ) {\n\n\t\tconst target = targets[ i ];\n\n\t\tif ( target.POSITION !== undefined ) hasMorphPosition = true;\n\t\tif ( target.NORMAL !== undefined ) hasMorphNormal = true;\n\t\tif ( target.COLOR_0 !== undefined ) hasMorphColor = true;\n\n\t\tif ( hasMorphPosition && hasMorphNormal && hasMorphColor ) break;\n\n\t}\n\n\tif ( ! hasMorphPosition && ! hasMorphNormal && ! hasMorphColor ) return Promise.resolve( geometry );\n\n\tconst pendingPositionAccessors = [];\n\tconst pendingNormalAccessors = [];\n\tconst pendingColorAccessors = [];\n\n\tfor ( let i = 0, il = targets.length; i < il; i ++ ) {\n\n\t\tconst target = targets[ i ];\n\n\t\tif ( hasMorphPosition ) {\n\n\t\t\tconst pendingAccessor = target.POSITION !== undefined\n\t\t\t\t? parser.getDependency( 'accessor', target.POSITION )\n\t\t\t\t: geometry.attributes.position;\n\n\t\t\tpendingPositionAccessors.push( pendingAccessor );\n\n\t\t}\n\n\t\tif ( hasMorphNormal ) {\n\n\t\t\tconst pendingAccessor = target.NORMAL !== undefined\n\t\t\t\t? parser.getDependency( 'accessor', target.NORMAL )\n\t\t\t\t: geometry.attributes.normal;\n\n\t\t\tpendingNormalAccessors.push( pendingAccessor );\n\n\t\t}\n\n\t\tif ( hasMorphColor ) {\n\n\t\t\tconst pendingAccessor = target.COLOR_0 !== undefined\n\t\t\t\t? parser.getDependency( 'accessor', target.COLOR_0 )\n\t\t\t\t: geometry.attributes.color;\n\n\t\t\tpendingColorAccessors.push( pendingAccessor );\n\n\t\t}\n\n\t}\n\n\treturn Promise.all( [\n\t\tPromise.all( pendingPositionAccessors ),\n\t\tPromise.all( pendingNormalAccessors ),\n\t\tPromise.all( pendingColorAccessors )\n\t] ).then( function ( accessors ) {\n\n\t\tconst morphPositions = accessors[ 0 ];\n\t\tconst morphNormals = accessors[ 1 ];\n\t\tconst morphColors = accessors[ 2 ];\n\n\t\tif ( hasMorphPosition ) geometry.morphAttributes.position = morphPositions;\n\t\tif ( hasMorphNormal ) geometry.morphAttributes.normal = morphNormals;\n\t\tif ( hasMorphColor ) geometry.morphAttributes.color = morphColors;\n\t\tgeometry.morphTargetsRelative = true;\n\n\t\treturn geometry;\n\n\t} );\n\n}\n\n/**\n *\n * @private\n * @param {Mesh} mesh\n * @param {GLTF.Mesh} meshDef\n */\nfunction updateMorphTargets( mesh, meshDef ) {\n\n\tmesh.updateMorphTargets();\n\n\tif ( meshDef.weights !== undefined ) {\n\n\t\tfor ( let i = 0, il = meshDef.weights.length; i < il; i ++ ) {\n\n\t\t\tmesh.morphTargetInfluences[ i ] = meshDef.weights[ i ];\n\n\t\t}\n\n\t}\n\n\t// .extras has user-defined data, so check that .extras.targetNames is an array.\n\tif ( meshDef.extras && Array.isArray( meshDef.extras.targetNames ) ) {\n\n\t\tconst targetNames = meshDef.extras.targetNames;\n\n\t\tif ( mesh.morphTargetInfluences.length === targetNames.length ) {\n\n\t\t\tmesh.morphTargetDictionary = {};\n\n\t\t\tfor ( let i = 0, il = targetNames.length; i < il; i ++ ) {\n\n\t\t\t\tmesh.morphTargetDictionary[ targetNames[ i ] ] = i;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'THREE.GLTFLoader: Invalid extras.targetNames length. Ignoring names.' );\n\n\t\t}\n\n\t}\n\n}\n\nfunction createPrimitiveKey( primitiveDef ) {\n\n\tlet geometryKey;\n\n\tconst dracoExtension = primitiveDef.extensions && primitiveDef.extensions[ EXTENSIONS.KHR_DRACO_MESH_COMPRESSION ];\n\n\tif ( dracoExtension ) {\n\n\t\tgeometryKey = 'draco:' + dracoExtension.bufferView\n\t\t\t\t+ ':' + dracoExtension.indices\n\t\t\t\t+ ':' + createAttributesKey( dracoExtension.attributes );\n\n\t} else {\n\n\t\tgeometryKey = primitiveDef.indices + ':' + createAttributesKey( primitiveDef.attributes ) + ':' + primitiveDef.mode;\n\n\t}\n\n\tif ( primitiveDef.targets !== undefined ) {\n\n\t\tfor ( let i = 0, il = primitiveDef.targets.length; i < il; i ++ ) {\n\n\t\t\tgeometryKey += ':' + createAttributesKey( primitiveDef.targets[ i ] );\n\n\t\t}\n\n\t}\n\n\treturn geometryKey;\n\n}\n\nfunction createAttributesKey( attributes ) {\n\n\tlet attributesKey = '';\n\n\tconst keys = Object.keys( attributes ).sort();\n\n\tfor ( let i = 0, il = keys.length; i < il; i ++ ) {\n\n\t\tattributesKey += keys[ i ] + ':' + attributes[ keys[ i ] ] + ';';\n\n\t}\n\n\treturn attributesKey;\n\n}\n\nfunction getNormalizedComponentScale( constructor ) {\n\n\t// Reference:\n\t// https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_mesh_quantization#encoding-quantized-data\n\n\tswitch ( constructor ) {\n\n\t\tcase Int8Array:\n\t\t\treturn 1 / 127;\n\n\t\tcase Uint8Array:\n\t\t\treturn 1 / 255;\n\n\t\tcase Int16Array:\n\t\t\treturn 1 / 32767;\n\n\t\tcase Uint16Array:\n\t\t\treturn 1 / 65535;\n\n\t\tdefault:\n\t\t\tthrow new Error( 'THREE.GLTFLoader: Unsupported normalized accessor component type.' );\n\n\t}\n\n}\n\nfunction getImageURIMimeType( uri ) {\n\n\tif ( uri.search( /\\.jpe?g($|\\?)/i ) > 0 || uri.search( /^data\\:image\\/jpeg/ ) === 0 ) return 'image/jpeg';\n\tif ( uri.search( /\\.webp($|\\?)/i ) > 0 || uri.search( /^data\\:image\\/webp/ ) === 0 ) return 'image/webp';\n\tif ( uri.search( /\\.ktx2($|\\?)/i ) > 0 || uri.search( /^data\\:image\\/ktx2/ ) === 0 ) return 'image/ktx2';\n\n\treturn 'image/png';\n\n}\n\nconst _identityMatrix = new Matrix4();\n\n/* GLTF PARSER */\n\nclass GLTFParser {\n\n\tconstructor( json = {}, options = {} ) {\n\n\t\tthis.json = json;\n\t\tthis.extensions = {};\n\t\tthis.plugins = {};\n\t\tthis.options = options;\n\n\t\t// loader object cache\n\t\tthis.cache = new GLTFRegistry();\n\n\t\t// associations between Three.js objects and glTF elements\n\t\tthis.associations = new Map();\n\n\t\t// BufferGeometry caching\n\t\tthis.primitiveCache = {};\n\n\t\t// Node cache\n\t\tthis.nodeCache = {};\n\n\t\t// Object3D instance caches\n\t\tthis.meshCache = { refs: {}, uses: {} };\n\t\tthis.cameraCache = { refs: {}, uses: {} };\n\t\tthis.lightCache = { refs: {}, uses: {} };\n\n\t\tthis.sourceCache = {};\n\t\tthis.textureCache = {};\n\n\t\t// Track node names, to ensure no duplicates\n\t\tthis.nodeNamesUsed = {};\n\n\t\t// Use an ImageBitmapLoader if imageBitmaps are supported. Moves much of the\n\t\t// expensive work of uploading a texture to the GPU off the main thread.\n\n\t\tlet isSafari = false;\n\t\tlet safariVersion = - 1;\n\t\tlet isFirefox = false;\n\t\tlet firefoxVersion = - 1;\n\n\t\tif ( typeof navigator !== 'undefined' ) {\n\n\t\t\tconst userAgent = navigator.userAgent;\n\n\t\t\tisSafari = /^((?!chrome|android).)*safari/i.test( userAgent ) === true;\n\t\t\tconst safariMatch = userAgent.match( /Version\\/(\\d+)/ );\n\t\t\tsafariVersion = isSafari && safariMatch ? parseInt( safariMatch[ 1 ], 10 ) : - 1;\n\n\t\t\tisFirefox = userAgent.indexOf( 'Firefox' ) > - 1;\n\t\t\tfirefoxVersion = isFirefox ? userAgent.match( /Firefox\\/([0-9]+)\\./ )[ 1 ] : - 1;\n\n\t\t}\n\n\t\tif ( typeof createImageBitmap === 'undefined' || ( isSafari && safariVersion < 17 ) || ( isFirefox && firefoxVersion < 98 ) ) {\n\n\t\t\tthis.textureLoader = new TextureLoader( this.options.manager );\n\n\t\t} else {\n\n\t\t\tthis.textureLoader = new ImageBitmapLoader( this.options.manager );\n\n\t\t}\n\n\t\tthis.textureLoader.setCrossOrigin( this.options.crossOrigin );\n\t\tthis.textureLoader.setRequestHeader( this.options.requestHeader );\n\n\t\tthis.fileLoader = new FileLoader( this.options.manager );\n\t\tthis.fileLoader.setResponseType( 'arraybuffer' );\n\n\t\tif ( this.options.crossOrigin === 'use-credentials' ) {\n\n\t\t\tthis.fileLoader.setWithCredentials( true );\n\n\t\t}\n\n\t}\n\n\tsetExtensions( extensions ) {\n\n\t\tthis.extensions = extensions;\n\n\t}\n\n\tsetPlugins( plugins ) {\n\n\t\tthis.plugins = plugins;\n\n\t}\n\n\tparse( onLoad, onError ) {\n\n\t\tconst parser = this;\n\t\tconst json = this.json;\n\t\tconst extensions = this.extensions;\n\n\t\t// Clear the loader cache\n\t\tthis.cache.removeAll();\n\t\tthis.nodeCache = {};\n\n\t\t// Mark the special nodes/meshes in json for efficient parse\n\t\tthis._invokeAll( function ( ext ) {\n\n\t\t\treturn ext._markDefs && ext._markDefs();\n\n\t\t} );\n\n\t\tPromise.all( this._invokeAll( function ( ext ) {\n\n\t\t\treturn ext.beforeRoot && ext.beforeRoot();\n\n\t\t} ) ).then( function () {\n\n\t\t\treturn Promise.all( [\n\n\t\t\t\tparser.getDependencies( 'scene' ),\n\t\t\t\tparser.getDependencies( 'animation' ),\n\t\t\t\tparser.getDependencies( 'camera' ),\n\n\t\t\t] );\n\n\t\t} ).then( function ( dependencies ) {\n\n\t\t\tconst result = {\n\t\t\t\tscene: dependencies[ 0 ][ json.scene || 0 ],\n\t\t\t\tscenes: dependencies[ 0 ],\n\t\t\t\tanimations: dependencies[ 1 ],\n\t\t\t\tcameras: dependencies[ 2 ],\n\t\t\t\tasset: json.asset,\n\t\t\t\tparser: parser,\n\t\t\t\tuserData: {}\n\t\t\t};\n\n\t\t\taddUnknownExtensionsToUserData( extensions, result, json );\n\n\t\t\tassignExtrasToUserData( result, json );\n\n\t\t\treturn Promise.all( parser._invokeAll( function ( ext ) {\n\n\t\t\t\treturn ext.afterRoot && ext.afterRoot( result );\n\n\t\t\t} ) ).then( function () {\n\n\t\t\t\tfor ( const scene of result.scenes ) {\n\n\t\t\t\t\tscene.updateMatrixWorld();\n\n\t\t\t\t}\n\n\t\t\t\tonLoad( result );\n\n\t\t\t} );\n\n\t\t} ).catch( onError );\n\n\t}\n\n\t/**\n\t * Marks the special nodes/meshes in json for efficient parse.\n\t *\n\t * @private\n\t */\n\t_markDefs() {\n\n\t\tconst nodeDefs = this.json.nodes || [];\n\t\tconst skinDefs = this.json.skins || [];\n\t\tconst meshDefs = this.json.meshes || [];\n\n\t\t// Nothing in the node definition indicates whether it is a Bone or an\n\t\t// Object3D. Use the skins' joint references to mark bones.\n\t\tfor ( let skinIndex = 0, skinLength = skinDefs.length; skinIndex < skinLength; skinIndex ++ ) {\n\n\t\t\tconst joints = skinDefs[ skinIndex ].joints;\n\n\t\t\tfor ( let i = 0, il = joints.length; i < il; i ++ ) {\n\n\t\t\t\tnodeDefs[ joints[ i ] ].isBone = true;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Iterate over all nodes, marking references to shared resources,\n\t\t// as well as skeleton joints.\n\t\tfor ( let nodeIndex = 0, nodeLength = nodeDefs.length; nodeIndex < nodeLength; nodeIndex ++ ) {\n\n\t\t\tconst nodeDef = nodeDefs[ nodeIndex ];\n\n\t\t\tif ( nodeDef.mesh !== undefined ) {\n\n\t\t\t\tthis._addNodeRef( this.meshCache, nodeDef.mesh );\n\n\t\t\t\t// Nothing in the mesh definition indicates whether it is\n\t\t\t\t// a SkinnedMesh or Mesh. Use the node's mesh reference\n\t\t\t\t// to mark SkinnedMesh if node has skin.\n\t\t\t\tif ( nodeDef.skin !== undefined ) {\n\n\t\t\t\t\tmeshDefs[ nodeDef.mesh ].isSkinnedMesh = true;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( nodeDef.camera !== undefined ) {\n\n\t\t\t\tthis._addNodeRef( this.cameraCache, nodeDef.camera );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Counts references to shared node / Object3D resources. These resources\n\t * can be reused, or \"instantiated\", at multiple nodes in the scene\n\t * hierarchy. Mesh, Camera, and Light instances are instantiated and must\n\t * be marked. Non-scenegraph resources (like Materials, Geometries, and\n\t * Textures) can be reused directly and are not marked here.\n\t *\n\t * Example: CesiumMilkTruck sample model reuses \"Wheel\" meshes.\n\t *\n\t * @private\n\t * @param {Object} cache\n\t * @param {Object3D} index\n\t */\n\t_addNodeRef( cache, index ) {\n\n\t\tif ( index === undefined ) return;\n\n\t\tif ( cache.refs[ index ] === undefined ) {\n\n\t\t\tcache.refs[ index ] = cache.uses[ index ] = 0;\n\n\t\t}\n\n\t\tcache.refs[ index ] ++;\n\n\t}\n\n\t/**\n\t * Returns a reference to a shared resource, cloning it if necessary.\n\t *\n\t * @private\n\t * @param {Object} cache\n\t * @param {number} index\n\t * @param {Object} object\n\t * @return {Object}\n\t */\n\t_getNodeRef( cache, index, object ) {\n\n\t\tif ( cache.refs[ index ] <= 1 ) return object;\n\n\t\tconst ref = object.clone();\n\n\t\t// Propagates mappings to the cloned object, prevents mappings on the\n\t\t// original object from being lost.\n\t\tconst updateMappings = ( original, clone ) => {\n\n\t\t\tconst mappings = this.associations.get( original );\n\t\t\tif ( mappings != null ) {\n\n\t\t\t\tthis.associations.set( clone, mappings );\n\n\t\t\t}\n\n\t\t\tfor ( const [ i, child ] of original.children.entries() ) {\n\n\t\t\t\tupdateMappings( child, clone.children[ i ] );\n\n\t\t\t}\n\n\t\t};\n\n\t\tupdateMappings( object, ref );\n\n\t\tref.name += '_instance_' + ( cache.uses[ index ] ++ );\n\n\t\treturn ref;\n\n\t}\n\n\t_invokeOne( func ) {\n\n\t\tconst extensions = Object.values( this.plugins );\n\t\textensions.push( this );\n\n\t\tfor ( let i = 0; i < extensions.length; i ++ ) {\n\n\t\t\tconst result = func( extensions[ i ] );\n\n\t\t\tif ( result ) return result;\n\n\t\t}\n\n\t\treturn null;\n\n\t}\n\n\t_invokeAll( func ) {\n\n\t\tconst extensions = Object.values( this.plugins );\n\t\textensions.unshift( this );\n\n\t\tconst pending = [];\n\n\t\tfor ( let i = 0; i < extensions.length; i ++ ) {\n\n\t\t\tconst result = func( extensions[ i ] );\n\n\t\t\tif ( result ) pending.push( result );\n\n\t\t}\n\n\t\treturn pending;\n\n\t}\n\n\t/**\n\t * Requests the specified dependency asynchronously, with caching.\n\t *\n\t * @private\n\t * @param {string} type\n\t * @param {number} index\n\t * @return {Promise<Object3D|Material|Texture|AnimationClip|ArrayBuffer|Object>}\n\t */\n\tgetDependency( type, index ) {\n\n\t\tconst cacheKey = type + ':' + index;\n\t\tlet dependency = this.cache.get( cacheKey );\n\n\t\tif ( ! dependency ) {\n\n\t\t\tswitch ( type ) {\n\n\t\t\t\tcase 'scene':\n\t\t\t\t\tdependency = this.loadScene( index );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'node':\n\t\t\t\t\tdependency = this._invokeOne( function ( ext ) {\n\n\t\t\t\t\t\treturn ext.loadNode && ext.loadNode( index );\n\n\t\t\t\t\t} );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'mesh':\n\t\t\t\t\tdependency = this._invokeOne( function ( ext ) {\n\n\t\t\t\t\t\treturn ext.loadMesh && ext.loadMesh( index );\n\n\t\t\t\t\t} );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'accessor':\n\t\t\t\t\tdependency = this.loadAccessor( index );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'bufferView':\n\t\t\t\t\tdependency = this._invokeOne( function ( ext ) {\n\n\t\t\t\t\t\treturn ext.loadBufferView && ext.loadBufferView( index );\n\n\t\t\t\t\t} );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'buffer':\n\t\t\t\t\tdependency = this.loadBuffer( index );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'material':\n\t\t\t\t\tdependency = this._invokeOne( function ( ext ) {\n\n\t\t\t\t\t\treturn ext.loadMaterial && ext.loadMaterial( index );\n\n\t\t\t\t\t} );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'texture':\n\t\t\t\t\tdependency = this._invokeOne( function ( ext ) {\n\n\t\t\t\t\t\treturn ext.loadTexture && ext.loadTexture( index );\n\n\t\t\t\t\t} );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'skin':\n\t\t\t\t\tdependency = this.loadSkin( index );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'animation':\n\t\t\t\t\tdependency = this._invokeOne( function ( ext ) {\n\n\t\t\t\t\t\treturn ext.loadAnimation && ext.loadAnimation( index );\n\n\t\t\t\t\t} );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'camera':\n\t\t\t\t\tdependency = this.loadCamera( index );\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tdependency = this._invokeOne( function ( ext ) {\n\n\t\t\t\t\t\treturn ext != this && ext.getDependency && ext.getDependency( type, index );\n\n\t\t\t\t\t} );\n\n\t\t\t\t\tif ( ! dependency ) {\n\n\t\t\t\t\t\tthrow new Error( 'Unknown type: ' + type );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tthis.cache.add( cacheKey, dependency );\n\n\t\t}\n\n\t\treturn dependency;\n\n\t}\n\n\t/**\n\t * Requests all dependencies of the specified type asynchronously, with caching.\n\t *\n\t * @private\n\t * @param {string} type\n\t * @return {Promise<Array<Object>>}\n\t */\n\tgetDependencies( type ) {\n\n\t\tlet dependencies = this.cache.get( type );\n\n\t\tif ( ! dependencies ) {\n\n\t\t\tconst parser = this;\n\t\t\tconst defs = this.json[ type + ( type === 'mesh' ? 'es' : 's' ) ] || [];\n\n\t\t\tdependencies = Promise.all( defs.map( function ( def, index ) {\n\n\t\t\t\treturn parser.getDependency( type, index );\n\n\t\t\t} ) );\n\n\t\t\tthis.cache.add( type, dependencies );\n\n\t\t}\n\n\t\treturn dependencies;\n\n\t}\n\n\t/**\n\t * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#buffers-and-buffer-views\n\t *\n\t * @private\n\t * @param {number} bufferIndex\n\t * @return {Promise<ArrayBuffer>}\n\t */\n\tloadBuffer( bufferIndex ) {\n\n\t\tconst bufferDef = this.json.buffers[ bufferIndex ];\n\t\tconst loader = this.fileLoader;\n\n\t\tif ( bufferDef.type && bufferDef.type !== 'arraybuffer' ) {\n\n\t\t\tthrow new Error( 'THREE.GLTFLoader: ' + bufferDef.type + ' buffer type is not supported.' );\n\n\t\t}\n\n\t\t// If present, GLB container is required to be the first buffer.\n\t\tif ( bufferDef.uri === undefined && bufferIndex === 0 ) {\n\n\t\t\treturn Promise.resolve( this.extensions[ EXTENSIONS.KHR_BINARY_GLTF ].body );\n\n\t\t}\n\n\t\tconst options = this.options;\n\n\t\treturn new Promise( function ( resolve, reject ) {\n\n\t\t\tloader.load( LoaderUtils.resolveURL( bufferDef.uri, options.path ), resolve, undefined, function () {\n\n\t\t\t\treject( new Error( 'THREE.GLTFLoader: Failed to load buffer \"' + bufferDef.uri + '\".' ) );\n\n\t\t\t} );\n\n\t\t} );\n\n\t}\n\n\t/**\n\t * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#buffers-and-buffer-views\n\t *\n\t * @private\n\t * @param {number} bufferViewIndex\n\t * @return {Promise<ArrayBuffer>}\n\t */\n\tloadBufferView( bufferViewIndex ) {\n\n\t\tconst bufferViewDef = this.json.bufferViews[ bufferViewIndex ];\n\n\t\treturn this.getDependency( 'buffer', bufferViewDef.buffer ).then( function ( buffer ) {\n\n\t\t\tconst byteLength = bufferViewDef.byteLength || 0;\n\t\t\tconst byteOffset = bufferViewDef.byteOffset || 0;\n\t\t\treturn buffer.slice( byteOffset, byteOffset + byteLength );\n\n\t\t} );\n\n\t}\n\n\t/**\n\t * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#accessors\n\t *\n\t * @private\n\t * @param {number} accessorIndex\n\t * @return {Promise<BufferAttribute|InterleavedBufferAttribute>}\n\t */\n\tloadAccessor( accessorIndex ) {\n\n\t\tconst parser = this;\n\t\tconst json = this.json;\n\n\t\tconst accessorDef = this.json.accessors[ accessorIndex ];\n\n\t\tif ( accessorDef.bufferView === undefined && accessorDef.sparse === undefined ) {\n\n\t\t\tconst itemSize = WEBGL_TYPE_SIZES[ accessorDef.type ];\n\t\t\tconst TypedArray = WEBGL_COMPONENT_TYPES[ accessorDef.componentType ];\n\t\t\tconst normalized = accessorDef.normalized === true;\n\n\t\t\tconst array = new TypedArray( accessorDef.count * itemSize );\n\t\t\treturn Promise.resolve( new BufferAttribute( array, itemSize, normalized ) );\n\n\t\t}\n\n\t\tconst pendingBufferViews = [];\n\n\t\tif ( accessorDef.bufferView !== undefined ) {\n\n\t\t\tpendingBufferViews.push( this.getDependency( 'bufferView', accessorDef.bufferView ) );\n\n\t\t} else {\n\n\t\t\tpendingBufferViews.push( null );\n\n\t\t}\n\n\t\tif ( accessorDef.sparse !== undefined ) {\n\n\t\t\tpendingBufferViews.push( this.getDependency( 'bufferView', accessorDef.sparse.indices.bufferView ) );\n\t\t\tpendingBufferViews.push( this.getDependency( 'bufferView', accessorDef.sparse.values.bufferView ) );\n\n\t\t}\n\n\t\treturn Promise.all( pendingBufferViews ).then( function ( bufferViews ) {\n\n\t\t\tconst bufferView = bufferViews[ 0 ];\n\n\t\t\tconst itemSize = WEBGL_TYPE_SIZES[ accessorDef.type ];\n\t\t\tconst TypedArray = WEBGL_COMPONENT_TYPES[ accessorDef.componentType ];\n\n\t\t\t// For VEC3: itemSize is 3, elementBytes is 4, itemBytes is 12.\n\t\t\tconst elementBytes = TypedArray.BYTES_PER_ELEMENT;\n\t\t\tconst itemBytes = elementBytes * itemSize;\n\t\t\tconst byteOffset = accessorDef.byteOffset || 0;\n\t\t\tconst byteStride = accessorDef.bufferView !== undefined ? json.bufferViews[ accessorDef.bufferView ].byteStride : undefined;\n\t\t\tconst normalized = accessorDef.normalized === true;\n\t\t\tlet array, bufferAttribute;\n\n\t\t\t// The buffer is not interleaved if the stride is the item size in bytes.\n\t\t\tif ( byteStride && byteStride !== itemBytes ) {\n\n\t\t\t\t// Each \"slice\" of the buffer, as defined by 'count' elements of 'byteStride' bytes, gets its own InterleavedBuffer\n\t\t\t\t// This makes sure that IBA.count reflects accessor.count properly\n\t\t\t\tconst ibSlice = Math.floor( byteOffset / byteStride );\n\t\t\t\tconst ibCacheKey = 'InterleavedBuffer:' + accessorDef.bufferView + ':' + accessorDef.componentType + ':' + ibSlice + ':' + accessorDef.count;\n\t\t\t\tlet ib = parser.cache.get( ibCacheKey );\n\n\t\t\t\tif ( ! ib ) {\n\n\t\t\t\t\tarray = new TypedArray( bufferView, ibSlice * byteStride, accessorDef.count * byteStride / elementBytes );\n\n\t\t\t\t\t// Integer parameters to IB/IBA are in array elements, not bytes.\n\t\t\t\t\tib = new InterleavedBuffer( array, byteStride / elementBytes );\n\n\t\t\t\t\tparser.cache.add( ibCacheKey, ib );\n\n\t\t\t\t}\n\n\t\t\t\tbufferAttribute = new InterleavedBufferAttribute( ib, itemSize, ( byteOffset % byteStride ) / elementBytes, normalized );\n\n\t\t\t} else {\n\n\t\t\t\tif ( bufferView === null ) {\n\n\t\t\t\t\tarray = new TypedArray( accessorDef.count * itemSize );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tarray = new TypedArray( bufferView, byteOffset, accessorDef.count * itemSize );\n\n\t\t\t\t}\n\n\t\t\t\tbufferAttribute = new BufferAttribute( array, itemSize, normalized );\n\n\t\t\t}\n\n\t\t\t// https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#sparse-accessors\n\t\t\tif ( accessorDef.sparse !== undefined ) {\n\n\t\t\t\tconst itemSizeIndices = WEBGL_TYPE_SIZES.SCALAR;\n\t\t\t\tconst TypedArrayIndices = WEBGL_COMPONENT_TYPES[ accessorDef.sparse.indices.componentType ];\n\n\t\t\t\tconst byteOffsetIndices = accessorDef.sparse.indices.byteOffset || 0;\n\t\t\t\tconst byteOffsetValues = accessorDef.sparse.values.byteOffset || 0;\n\n\t\t\t\tconst sparseIndices = new TypedArrayIndices( bufferViews[ 1 ], byteOffsetIndices, accessorDef.sparse.count * itemSizeIndices );\n\t\t\t\tconst sparseValues = new TypedArray( bufferViews[ 2 ], byteOffsetValues, accessorDef.sparse.count * itemSize );\n\n\t\t\t\tif ( bufferView !== null ) {\n\n\t\t\t\t\t// Avoid modifying the original ArrayBuffer, if the bufferView wasn't initialized with zeroes.\n\t\t\t\t\tbufferAttribute = new BufferAttribute( bufferAttribute.array.slice(), bufferAttribute.itemSize, bufferAttribute.normalized );\n\n\t\t\t\t}\n\n\t\t\t\t// Ignore normalized since we copy from sparse\n\t\t\t\tbufferAttribute.normalized = false;\n\n\t\t\t\tfor ( let i = 0, il = sparseIndices.length; i < il; i ++ ) {\n\n\t\t\t\t\tconst index = sparseIndices[ i ];\n\n\t\t\t\t\tbufferAttribute.setX( index, sparseValues[ i * itemSize ] );\n\t\t\t\t\tif ( itemSize >= 2 ) bufferAttribute.setY( index, sparseValues[ i * itemSize + 1 ] );\n\t\t\t\t\tif ( itemSize >= 3 ) bufferAttribute.setZ( index, sparseValues[ i * itemSize + 2 ] );\n\t\t\t\t\tif ( itemSize >= 4 ) bufferAttribute.setW( index, sparseValues[ i * itemSize + 3 ] );\n\t\t\t\t\tif ( itemSize >= 5 ) throw new Error( 'THREE.GLTFLoader: Unsupported itemSize in sparse BufferAttribute.' );\n\n\t\t\t\t}\n\n\t\t\t\tbufferAttribute.normalized = normalized;\n\n\t\t\t}\n\n\t\t\treturn bufferAttribute;\n\n\t\t} );\n\n\t}\n\n\t/**\n\t * Specification: https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#textures\n\t *\n\t * @private\n\t * @param {number} textureIndex\n\t * @return {Promise<?Texture>}\n\t */\n\tloadTexture( textureIndex ) {\n\n\t\tconst json = this.json;\n\t\tconst options = this.options;\n\t\tconst textureDef = json.textures[ textureIndex ];\n\t\tconst sourceIndex = textureDef.source;\n\t\tconst sourceDef = json.images[ sourceIndex ];\n\n\t\tlet loader = this.textureLoader;\n\n\t\tif ( sourceDef.uri ) {\n\n\t\t\tconst handler = options.manager.getHandler( sourceDef.uri );\n\t\t\tif ( handler !== null ) loader = handler;\n\n\t\t}\n\n\t\treturn this.loadTextureImage( textureIndex, sourceIndex, loader );\n\n\t}\n\n\tloadTextureImage( textureIndex, sourceIndex, loader ) {\n\n\t\tconst parser = this;\n\t\tconst json = this.json;\n\n\t\tconst textureDef = json.textures[ textureIndex ];\n\t\tconst sourceDef = json.images[ sourceIndex ];\n\n\t\tconst cacheKey = ( sourceDef.uri || sourceDef.bufferView ) + ':' + textureDef.sampler;\n\n\t\tif ( this.textureCache[ cacheKey ] ) {\n\n\t\t\t// See https://github.com/mrdoob/three.js/issues/21559.\n\t\t\treturn this.textureCache[ cacheKey ];\n\n\t\t}\n\n\t\tconst promise = this.loadImageSource( sourceIndex, loader ).then( function ( texture ) {\n\n\t\t\ttexture.flipY = false;\n\n\t\t\ttexture.name = textureDef.name || sourceDef.name || '';\n\n\t\t\tif ( texture.name === '' && typeof sourceDef.uri === 'string' && sourceDef.uri.startsWith( 'data:image/' ) === false ) {\n\n\t\t\t\ttexture.name = sourceDef.uri;\n\n\t\t\t}\n\n\t\t\tconst samplers = json.samplers || {};\n\t\t\tconst sampler = samplers[ textureDef.sampler ] || {};\n\n\t\t\ttexture.magFilter = WEBGL_FILTERS[ sampler.magFilter ] || LinearFilter;\n\t\t\ttexture.minFilter = WEBGL_FILTERS[ sampler.minFilter ] || LinearMipmapLinearFilter;\n\t\t\ttexture.wrapS = WEBGL_WRAPPINGS[ sampler.wrapS ] || RepeatWrapping;\n\t\t\ttexture.wrapT = WEBGL_WRAPPINGS[ sampler.wrapT ] || RepeatWrapping;\n\t\t\ttexture.generateMipmaps = ! texture.isCompressedTexture && texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter;\n\n\t\t\tparser.associations.set( texture, { textures: textureIndex } );\n\n\t\t\treturn texture;\n\n\t\t} ).catch( function () {\n\n\t\t\treturn null;\n\n\t\t} );\n\n\t\tthis.textureCache[ cacheKey ] = promise;\n\n\t\treturn promise;\n\n\t}\n\n\tloadImageSource( sourceIndex, loader ) {\n\n\t\tconst parser = this;\n\t\tconst json = this.json;\n\t\tconst options = this.options;\n\n\t\tif ( this.sourceCache[ sourceIndex ] !== undefined ) {\n\n\t\t\treturn this.sourceCache[ sourceIndex ].then( ( texture ) => texture.clone() );\n\n\t\t}\n\n\t\tconst sourceDef = json.images[ sourceIndex ];\n\n\t\tconst URL = self.URL || self.webkitURL;\n\n\t\tlet sourceURI = sourceDef.uri || '';\n\t\tlet isObjectURL = false;\n\n\t\tif ( sourceDef.bufferView !== undefined ) {\n\n\t\t\t// Load binary image data from bufferView, if provided.\n\n\t\t\tsourceURI = parser.getDependency( 'bufferView', sourceDef.bufferView ).then( function ( bufferView ) {\n\n\t\t\t\tisObjectURL = true;\n\t\t\t\tconst blob = new Blob( [ bufferView ], { type: sourceDef.mimeType } );\n\t\t\t\tsourceURI = URL.createObjectURL( blob );\n\t\t\t\treturn sourceURI;\n\n\t\t\t} );\n\n\t\t} else if ( sourceDef.uri === undefined ) {\n\n\t\t\tthrow new Error( 'THREE.GLTFLoader: Image ' + sourceIndex + ' is missing URI and bufferView' );\n\n\t\t}\n\n\t\tconst promise = Promise.resolve( sourceURI ).then( function ( sourceURI ) {\n\n\t\t\treturn new Promise( function ( resolve, reject ) {\n\n\t\t\t\tlet onLoad = resolve;\n\n\t\t\t\tif ( loader.isImageBitmapLoader === true ) {\n\n\t\t\t\t\tonLoad = function ( imageBitmap ) {\n\n\t\t\t\t\t\tconst texture = new Texture( imageBitmap );\n\t\t\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\t\t\tresolve( texture );\n\n\t\t\t\t\t};\n\n\t\t\t\t}\n\n\t\t\t\tloader.load( LoaderUtils.resolveURL( sourceURI, options.path ), onLoad, undefined, reject );\n\n\t\t\t} );\n\n\t\t} ).then( function ( texture ) {\n\n\t\t\t// Clean up resources and configure Texture.\n\n\t\t\tif ( isObjectURL === true ) {\n\n\t\t\t\tURL.revokeObjectURL( sourceURI );\n\n\t\t\t}\n\n\t\t\tassignExtrasToUserData( texture, sourceDef );\n\n\t\t\ttexture.userData.mimeType = sourceDef.mimeType || getImageURIMimeType( sourceDef.uri );\n\n\t\t\treturn texture;\n\n\t\t} ).catch( function ( error ) {\n\n\t\t\tconsole.error( 'THREE.GLTFLoader: Couldn\\'t load texture', sourceURI );\n\t\t\tthrow error;\n\n\t\t} );\n\n\t\tthis.sourceCache[ sourceIndex ] = promise;\n\t\treturn promise;\n\n\t}\n\n\t/**\n\t * Asynchronously assigns a texture to the given material parameters.\n\t *\n\t * @private\n\t * @param {Object} materialParams\n\t * @param {string} mapName\n\t * @param {Object} mapDef\n\t * @param {string} [colorSpace]\n\t * @return {Promise<Texture>}\n\t */\n\tassignTexture( materialParams, mapName, mapDef, colorSpace ) {\n\n\t\tconst parser = this;\n\n\t\treturn this.getDependency( 'texture', mapDef.index ).then( function ( texture ) {\n\n\t\t\tif ( ! texture ) return null;\n\n\t\t\tif ( mapDef.texCoord !== undefined && mapDef.texCoord > 0 ) {\n\n\t\t\t\ttexture = texture.clone();\n\t\t\t\ttexture.channel = mapDef.texCoord;\n\n\t\t\t}\n\n\t\t\tif ( parser.extensions[ EXTENSIONS.KHR_TEXTURE_TRANSFORM ] ) {\n\n\t\t\t\tconst transform = mapDef.extensions !== undefined ? mapDef.extensions[ EXTENSIONS.KHR_TEXTURE_TRANSFORM ] : undefined;\n\n\t\t\t\tif ( transform ) {\n\n\t\t\t\t\tconst gltfReference = parser.associations.get( texture );\n\t\t\t\t\ttexture = parser.extensions[ EXTENSIONS.KHR_TEXTURE_TRANSFORM ].extendTexture( texture, transform );\n\t\t\t\t\tparser.associations.set( texture, gltfReference );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( colorSpace !== undefined ) {\n\n\t\t\t\ttexture.colorSpace = colorSpace;\n\n\t\t\t}\n\n\t\t\tmaterialParams[ mapName ] = texture;\n\n\t\t\treturn texture;\n\n\t\t} );\n\n\t}\n\n\t/**\n\t * Assigns final material to a Mesh, Line, or Points instance. The instance\n\t * already has a material (generated from the glTF material options alone)\n\t * but reuse of the same glTF material may require multiple threejs materials\n\t * to accommodate different primitive types, defines, etc. New materials will\n\t * be created if necessary, and reused from a cache.\n\t *\n\t * @private\n\t * @param {Object3D} mesh Mesh, Line, or Points instance.\n\t */\n\tassignFinalMaterial( mesh ) {\n\n\t\tconst geometry = mesh.geometry;\n\t\tlet material = mesh.material;\n\n\t\tconst useDerivativeTangents = geometry.attributes.tangent === undefined;\n\t\tconst useVertexColors = geometry.attributes.color !== undefined;\n\t\tconst useFlatShading = geometry.attributes.normal === undefined;\n\n\t\tif ( mesh.isPoints ) {\n\n\t\t\tconst cacheKey = 'PointsMaterial:' + material.uuid;\n\n\t\t\tlet pointsMaterial = this.cache.get( cacheKey );\n\n\t\t\tif ( ! pointsMaterial ) {\n\n\t\t\t\tpointsMaterial = new PointsMaterial();\n\t\t\t\tMaterial.prototype.copy.call( pointsMaterial, material );\n\t\t\t\tpointsMaterial.color.copy( material.color );\n\t\t\t\tpointsMaterial.map = material.map;\n\t\t\t\tpointsMaterial.sizeAttenuation = false; // glTF spec says points should be 1px\n\n\t\t\t\tthis.cache.add( cacheKey, pointsMaterial );\n\n\t\t\t}\n\n\t\t\tmaterial = pointsMaterial;\n\n\t\t} else if ( mesh.isLine ) {\n\n\t\t\tconst cacheKey = 'LineBasicMaterial:' + material.uuid;\n\n\t\t\tlet lineMaterial = this.cache.get( cacheKey );\n\n\t\t\tif ( ! lineMaterial ) {\n\n\t\t\t\tlineMaterial = new LineBasicMaterial();\n\t\t\t\tMaterial.prototype.copy.call( lineMaterial, material );\n\t\t\t\tlineMaterial.color.copy( material.color );\n\t\t\t\tlineMaterial.map = material.map;\n\n\t\t\t\tthis.cache.add( cacheKey, lineMaterial );\n\n\t\t\t}\n\n\t\t\tmaterial = lineMaterial;\n\n\t\t}\n\n\t\t// Clone the material if it will be modified\n\t\tif ( useDerivativeTangents || useVertexColors || useFlatShading ) {\n\n\t\t\tlet cacheKey = 'ClonedMaterial:' + material.uuid + ':';\n\n\t\t\tif ( useDerivativeTangents ) cacheKey += 'derivative-tangents:';\n\t\t\tif ( useVertexColors ) cacheKey += 'vertex-colors:';\n\t\t\tif ( useFlatShading ) cacheKey += 'flat-shading:';\n\n\t\t\tlet cachedMaterial = this.cache.get( cacheKey );\n\n\t\t\tif ( ! cachedMaterial ) {\n\n\t\t\t\tcachedMaterial = material.clone();\n\n\t\t\t\tif ( useVertexColors ) cachedMaterial.vertexColors = true;\n\t\t\t\tif ( useFlatShading ) cachedMaterial.flatShading = true;\n\n\t\t\t\tif ( useDerivativeTangents ) {\n\n\t\t\t\t\t// https://github.com/mrdoob/three.js/issues/11438#issuecomment-507003995\n\t\t\t\t\tif ( cachedMaterial.normalScale ) cachedMaterial.normalScale.y *= - 1;\n\t\t\t\t\tif ( cachedMaterial.clearcoatNormalScale ) cachedMaterial.clearcoatNormalScale.y *= - 1;\n\n\t\t\t\t}\n\n\t\t\t\tthis.cache.add( cacheKey, cachedMaterial );\n\n\t\t\t\tthis.associations.set( cachedMaterial, this.associations.get( material ) );\n\n\t\t\t}\n\n\t\t\tmaterial = cachedMaterial;\n\n\t\t}\n\n\t\tmesh.material = material;\n\n\t}\n\n\tgetMaterialType( /* materialIndex */ ) {\n\n\t\treturn MeshStandardMaterial;\n\n\t}\n\n\t/**\n\t * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#materials\n\t *\n\t * @private\n\t * @param {number} materialIndex\n\t * @return {Promise<Material>}\n\t */\n\tloadMaterial( materialIndex ) {\n\n\t\tconst parser = this;\n\t\tconst json = this.json;\n\t\tconst extensions = this.extensions;\n\t\tconst materialDef = json.materials[ materialIndex ];\n\n\t\tlet materialType;\n\t\tconst materialParams = {};\n\t\tconst materialExtensions = materialDef.extensions || {};\n\n\t\tconst pending = [];\n\n\t\tif ( materialExtensions[ EXTENSIONS.KHR_MATERIALS_UNLIT ] ) {\n\n\t\t\tconst kmuExtension = extensions[ EXTENSIONS.KHR_MATERIALS_UNLIT ];\n\t\t\tmaterialType = kmuExtension.getMaterialType();\n\t\t\tpending.push( kmuExtension.extendParams( materialParams, materialDef, parser ) );\n\n\t\t} else {\n\n\t\t\t// Specification:\n\t\t\t// https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#metallic-roughness-material\n\n\t\t\tconst metallicRoughness = materialDef.pbrMetallicRoughness || {};\n\n\t\t\tmaterialParams.color = new Color( 1.0, 1.0, 1.0 );\n\t\t\tmaterialParams.opacity = 1.0;\n\n\t\t\tif ( Array.isArray( metallicRoughness.baseColorFactor ) ) {\n\n\t\t\t\tconst array = metallicRoughness.baseColorFactor;\n\n\t\t\t\tmaterialParams.color.setRGB( array[ 0 ], array[ 1 ], array[ 2 ], LinearSRGBColorSpace );\n\t\t\t\tmaterialParams.opacity = array[ 3 ];\n\n\t\t\t}\n\n\t\t\tif ( metallicRoughness.baseColorTexture !== undefined ) {\n\n\t\t\t\tpending.push( parser.assignTexture( materialParams, 'map', metallicRoughness.baseColorTexture, SRGBColorSpace ) );\n\n\t\t\t}\n\n\t\t\tmaterialParams.metalness = metallicRoughness.metallicFactor !== undefined ? metallicRoughness.metallicFactor : 1.0;\n\t\t\tmaterialParams.roughness = metallicRoughness.roughnessFactor !== undefined ? metallicRoughness.roughnessFactor : 1.0;\n\n\t\t\tif ( metallicRoughness.metallicRoughnessTexture !== undefined ) {\n\n\t\t\t\tpending.push( parser.assignTexture( materialParams, 'metalnessMap', metallicRoughness.metallicRoughnessTexture ) );\n\t\t\t\tpending.push( parser.assignTexture( materialParams, 'roughnessMap', metallicRoughness.metallicRoughnessTexture ) );\n\n\t\t\t}\n\n\t\t\tmaterialType = this._invokeOne( function ( ext ) {\n\n\t\t\t\treturn ext.getMaterialType && ext.getMaterialType( materialIndex );\n\n\t\t\t} );\n\n\t\t\tpending.push( Promise.all( this._invokeAll( function ( ext ) {\n\n\t\t\t\treturn ext.extendMaterialParams && ext.extendMaterialParams( materialIndex, materialParams );\n\n\t\t\t} ) ) );\n\n\t\t}\n\n\t\tif ( materialDef.doubleSided === true ) {\n\n\t\t\tmaterialParams.side = DoubleSide;\n\n\t\t}\n\n\t\tconst alphaMode = materialDef.alphaMode || ALPHA_MODES.OPAQUE;\n\n\t\tif ( alphaMode === ALPHA_MODES.BLEND ) {\n\n\t\t\tmaterialParams.transparent = true;\n\n\t\t\t// See: https://github.com/mrdoob/three.js/issues/17706\n\t\t\tmaterialParams.depthWrite = false;\n\n\t\t} else {\n\n\t\t\tmaterialParams.transparent = false;\n\n\t\t\tif ( alphaMode === ALPHA_MODES.MASK ) {\n\n\t\t\t\tmaterialParams.alphaTest = materialDef.alphaCutoff !== undefined ? materialDef.alphaCutoff : 0.5;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( materialDef.normalTexture !== undefined && materialType !== MeshBasicMaterial ) {\n\n\t\t\tpending.push( parser.assignTexture( materialParams, 'normalMap', materialDef.normalTexture ) );\n\n\t\t\tmaterialParams.normalScale = new Vector2( 1, 1 );\n\n\t\t\tif ( materialDef.normalTexture.scale !== undefined ) {\n\n\t\t\t\tconst scale = materialDef.normalTexture.scale;\n\n\t\t\t\tmaterialParams.normalScale.set( scale, scale );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( materialDef.occlusionTexture !== undefined && materialType !== MeshBasicMaterial ) {\n\n\t\t\tpending.push( parser.assignTexture( materialParams, 'aoMap', materialDef.occlusionTexture ) );\n\n\t\t\tif ( materialDef.occlusionTexture.strength !== undefined ) {\n\n\t\t\t\tmaterialParams.aoMapIntensity = materialDef.occlusionTexture.strength;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( materialDef.emissiveFactor !== undefined && materialType !== MeshBasicMaterial ) {\n\n\t\t\tconst emissiveFactor = materialDef.emissiveFactor;\n\t\t\tmaterialParams.emissive = new Color().setRGB( emissiveFactor[ 0 ], emissiveFactor[ 1 ], emissiveFactor[ 2 ], LinearSRGBColorSpace );\n\n\t\t}\n\n\t\tif ( materialDef.emissiveTexture !== undefined && materialType !== MeshBasicMaterial ) {\n\n\t\t\tpending.push( parser.assignTexture( materialParams, 'emissiveMap', materialDef.emissiveTexture, SRGBColorSpace ) );\n\n\t\t}\n\n\t\treturn Promise.all( pending ).then( function () {\n\n\t\t\tconst material = new materialType( materialParams );\n\n\t\t\tif ( materialDef.name ) material.name = materialDef.name;\n\n\t\t\tassignExtrasToUserData( material, materialDef );\n\n\t\t\tparser.associations.set( material, { materials: materialIndex } );\n\n\t\t\tif ( materialDef.extensions ) addUnknownExtensionsToUserData( extensions, material, materialDef );\n\n\t\t\treturn material;\n\n\t\t} );\n\n\t}\n\n\t/**\n\t * When Object3D instances are targeted by animation, they need unique names.\n\t *\n\t * @private\n\t * @param {string} originalName\n\t * @return {string}\n\t */\n\tcreateUniqueName( originalName ) {\n\n\t\tconst sanitizedName = PropertyBinding.sanitizeNodeName( originalName || '' );\n\n\t\tif ( sanitizedName in this.nodeNamesUsed ) {\n\n\t\t\treturn sanitizedName + '_' + ( ++ this.nodeNamesUsed[ sanitizedName ] );\n\n\t\t} else {\n\n\t\t\tthis.nodeNamesUsed[ sanitizedName ] = 0;\n\n\t\t\treturn sanitizedName;\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#geometry\n\t *\n\t * Creates BufferGeometries from primitives.\n\t *\n\t * @private\n\t * @param {Array<GLTF.Primitive>} primitives\n\t * @return {Promise<Array<BufferGeometry>>}\n\t */\n\tloadGeometries( primitives ) {\n\n\t\tconst parser = this;\n\t\tconst extensions = this.extensions;\n\t\tconst cache = this.primitiveCache;\n\n\t\tfunction createDracoPrimitive( primitive ) {\n\n\t\t\treturn extensions[ EXTENSIONS.KHR_DRACO_MESH_COMPRESSION ]\n\t\t\t\t.decodePrimitive( primitive, parser )\n\t\t\t\t.then( function ( geometry ) {\n\n\t\t\t\t\treturn addPrimitiveAttributes( geometry, primitive, parser );\n\n\t\t\t\t} );\n\n\t\t}\n\n\t\tconst pending = [];\n\n\t\tfor ( let i = 0, il = primitives.length; i < il; i ++ ) {\n\n\t\t\tconst primitive = primitives[ i ];\n\t\t\tconst cacheKey = createPrimitiveKey( primitive );\n\n\t\t\t// See if we've already created this geometry\n\t\t\tconst cached = cache[ cacheKey ];\n\n\t\t\tif ( cached ) {\n\n\t\t\t\t// Use the cached geometry if it exists\n\t\t\t\tpending.push( cached.promise );\n\n\t\t\t} else {\n\n\t\t\t\tlet geometryPromise;\n\n\t\t\t\tif ( primitive.extensions && primitive.extensions[ EXTENSIONS.KHR_DRACO_MESH_COMPRESSION ] ) {\n\n\t\t\t\t\t// Use DRACO geometry if available\n\t\t\t\t\tgeometryPromise = createDracoPrimitive( primitive );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// Otherwise create a new geometry\n\t\t\t\t\tgeometryPromise = addPrimitiveAttributes( new BufferGeometry(), primitive, parser );\n\n\t\t\t\t}\n\n\t\t\t\t// Cache this geometry\n\t\t\t\tcache[ cacheKey ] = { primitive: primitive, promise: geometryPromise };\n\n\t\t\t\tpending.push( geometryPromise );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn Promise.all( pending );\n\n\t}\n\n\t/**\n\t * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#meshes\n\t *\n\t * @private\n\t * @param {number} meshIndex\n\t * @return {Promise<Group|Mesh|SkinnedMesh|Line|Points>}\n\t */\n\tloadMesh( meshIndex ) {\n\n\t\tconst parser = this;\n\t\tconst json = this.json;\n\t\tconst extensions = this.extensions;\n\n\t\tconst meshDef = json.meshes[ meshIndex ];\n\t\tconst primitives = meshDef.primitives;\n\n\t\tconst pending = [];\n\n\t\tfor ( let i = 0, il = primitives.length; i < il; i ++ ) {\n\n\t\t\tconst material = primitives[ i ].material === undefined\n\t\t\t\t? createDefaultMaterial( this.cache )\n\t\t\t\t: this.getDependency( 'material', primitives[ i ].material );\n\n\t\t\tpending.push( material );\n\n\t\t}\n\n\t\tpending.push( parser.loadGeometries( primitives ) );\n\n\t\treturn Promise.all( pending ).then( function ( results ) {\n\n\t\t\tconst materials = results.slice( 0, results.length - 1 );\n\t\t\tconst geometries = results[ results.length - 1 ];\n\n\t\t\tconst meshes = [];\n\n\t\t\tfor ( let i = 0, il = geometries.length; i < il; i ++ ) {\n\n\t\t\t\tconst geometry = geometries[ i ];\n\t\t\t\tconst primitive = primitives[ i ];\n\n\t\t\t\t// 1. create Mesh\n\n\t\t\t\tlet mesh;\n\n\t\t\t\tconst material = materials[ i ];\n\n\t\t\t\tif ( primitive.mode === WEBGL_CONSTANTS.TRIANGLES ||\n\t\t\t\t\t\tprimitive.mode === WEBGL_CONSTANTS.TRIANGLE_STRIP ||\n\t\t\t\t\t\tprimitive.mode === WEBGL_CONSTANTS.TRIANGLE_FAN ||\n\t\t\t\t\t\tprimitive.mode === undefined ) {\n\n\t\t\t\t\t// .isSkinnedMesh isn't in glTF spec. See ._markDefs()\n\t\t\t\t\tmesh = meshDef.isSkinnedMesh === true\n\t\t\t\t\t\t? new SkinnedMesh( geometry, material )\n\t\t\t\t\t\t: new Mesh( geometry, material );\n\n\t\t\t\t\tif ( mesh.isSkinnedMesh === true ) {\n\n\t\t\t\t\t\t// normalize skin weights to fix malformed assets (see #15319)\n\t\t\t\t\t\tmesh.normalizeSkinWeights();\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( primitive.mode === WEBGL_CONSTANTS.TRIANGLE_STRIP ) {\n\n\t\t\t\t\t\tmesh.geometry = toTrianglesDrawMode( mesh.geometry, TriangleStripDrawMode );\n\n\t\t\t\t\t} else if ( primitive.mode === WEBGL_CONSTANTS.TRIANGLE_FAN ) {\n\n\t\t\t\t\t\tmesh.geometry = toTrianglesDrawMode( mesh.geometry, TriangleFanDrawMode );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( primitive.mode === WEBGL_CONSTANTS.LINES ) {\n\n\t\t\t\t\tmesh = new LineSegments( geometry, material );\n\n\t\t\t\t} else if ( primitive.mode === WEBGL_CONSTANTS.LINE_STRIP ) {\n\n\t\t\t\t\tmesh = new Line( geometry, material );\n\n\t\t\t\t} else if ( primitive.mode === WEBGL_CONSTANTS.LINE_LOOP ) {\n\n\t\t\t\t\tmesh = new LineLoop( geometry, material );\n\n\t\t\t\t} else if ( primitive.mode === WEBGL_CONSTANTS.POINTS ) {\n\n\t\t\t\t\tmesh = new Points( geometry, material );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthrow new Error( 'THREE.GLTFLoader: Primitive mode unsupported: ' + primitive.mode );\n\n\t\t\t\t}\n\n\t\t\t\tif ( Object.keys( mesh.geometry.morphAttributes ).length > 0 ) {\n\n\t\t\t\t\tupdateMorphTargets( mesh, meshDef );\n\n\t\t\t\t}\n\n\t\t\t\tmesh.name = parser.createUniqueName( meshDef.name || ( 'mesh_' + meshIndex ) );\n\n\t\t\t\tassignExtrasToUserData( mesh, meshDef );\n\n\t\t\t\tif ( primitive.extensions ) addUnknownExtensionsToUserData( extensions, mesh, primitive );\n\n\t\t\t\tparser.assignFinalMaterial( mesh );\n\n\t\t\t\tmeshes.push( mesh );\n\n\t\t\t}\n\n\t\t\tfor ( let i = 0, il = meshes.length; i < il; i ++ ) {\n\n\t\t\t\tparser.associations.set( meshes[ i ], {\n\t\t\t\t\tmeshes: meshIndex,\n\t\t\t\t\tprimitives: i\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\tif ( meshes.length === 1 ) {\n\n\t\t\t\tif ( meshDef.extensions ) addUnknownExtensionsToUserData( extensions, meshes[ 0 ], meshDef );\n\n\t\t\t\treturn meshes[ 0 ];\n\n\t\t\t}\n\n\t\t\tconst group = new Group();\n\n\t\t\tif ( meshDef.extensions ) addUnknownExtensionsToUserData( extensions, group, meshDef );\n\n\t\t\tparser.associations.set( group, { meshes: meshIndex } );\n\n\t\t\tfor ( let i = 0, il = meshes.length; i < il; i ++ ) {\n\n\t\t\t\tgroup.add( meshes[ i ] );\n\n\t\t\t}\n\n\t\t\treturn group;\n\n\t\t} );\n\n\t}\n\n\t/**\n\t * Specification: https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#cameras\n\t *\n\t * @private\n\t * @param {number} cameraIndex\n\t * @return {Promise<Camera>|undefined}\n\t */\n\tloadCamera( cameraIndex ) {\n\n\t\tlet camera;\n\t\tconst cameraDef = this.json.cameras[ cameraIndex ];\n\t\tconst params = cameraDef[ cameraDef.type ];\n\n\t\tif ( ! params ) {\n\n\t\t\tconsole.warn( 'THREE.GLTFLoader: Missing camera parameters.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( cameraDef.type === 'perspective' ) {\n\n\t\t\tcamera = new PerspectiveCamera( MathUtils.radToDeg( params.yfov ), params.aspectRatio || 1, params.znear || 1, params.zfar || 2e6 );\n\n\t\t} else if ( cameraDef.type === 'orthographic' ) {\n\n\t\t\tcamera = new OrthographicCamera( - params.xmag, params.xmag, params.ymag, - params.ymag, params.znear, params.zfar );\n\n\t\t}\n\n\t\tif ( cameraDef.name ) camera.name = this.createUniqueName( cameraDef.name );\n\n\t\tassignExtrasToUserData( camera, cameraDef );\n\n\t\treturn Promise.resolve( camera );\n\n\t}\n\n\t/**\n\t * Specification: https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#skins\n\t *\n\t * @private\n\t * @param {number} skinIndex\n\t * @return {Promise<Skeleton>}\n\t */\n\tloadSkin( skinIndex ) {\n\n\t\tconst skinDef = this.json.skins[ skinIndex ];\n\n\t\tconst pending = [];\n\n\t\tfor ( let i = 0, il = skinDef.joints.length; i < il; i ++ ) {\n\n\t\t\tpending.push( this._loadNodeShallow( skinDef.joints[ i ] ) );\n\n\t\t}\n\n\t\tif ( skinDef.inverseBindMatrices !== undefined ) {\n\n\t\t\tpending.push( this.getDependency( 'accessor', skinDef.inverseBindMatrices ) );\n\n\t\t} else {\n\n\t\t\tpending.push( null );\n\n\t\t}\n\n\t\treturn Promise.all( pending ).then( function ( results ) {\n\n\t\t\tconst inverseBindMatrices = results.pop();\n\t\t\tconst jointNodes = results;\n\n\t\t\t// Note that bones (joint nodes) may or may not be in the\n\t\t\t// scene graph at this time.\n\n\t\t\tconst bones = [];\n\t\t\tconst boneInverses = [];\n\n\t\t\tfor ( let i = 0, il = jointNodes.length; i < il; i ++ ) {\n\n\t\t\t\tconst jointNode = jointNodes[ i ];\n\n\t\t\t\tif ( jointNode ) {\n\n\t\t\t\t\tbones.push( jointNode );\n\n\t\t\t\t\tconst mat = new Matrix4();\n\n\t\t\t\t\tif ( inverseBindMatrices !== null ) {\n\n\t\t\t\t\t\tmat.fromArray( inverseBindMatrices.array, i * 16 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tboneInverses.push( mat );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn( 'THREE.GLTFLoader: Joint \"%s\" could not be found.', skinDef.joints[ i ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn new Skeleton( bones, boneInverses );\n\n\t\t} );\n\n\t}\n\n\t/**\n\t * Specification: https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#animations\n\t *\n\t * @private\n\t * @param {number} animationIndex\n\t * @return {Promise<AnimationClip>}\n\t */\n\tloadAnimation( animationIndex ) {\n\n\t\tconst json = this.json;\n\t\tconst parser = this;\n\n\t\tconst animationDef = json.animations[ animationIndex ];\n\t\tconst animationName = animationDef.name ? animationDef.name : 'animation_' + animationIndex;\n\n\t\tconst pendingNodes = [];\n\t\tconst pendingInputAccessors = [];\n\t\tconst pendingOutputAccessors = [];\n\t\tconst pendingSamplers = [];\n\t\tconst pendingTargets = [];\n\n\t\tfor ( let i = 0, il = animationDef.channels.length; i < il; i ++ ) {\n\n\t\t\tconst channel = animationDef.channels[ i ];\n\t\t\tconst sampler = animationDef.samplers[ channel.sampler ];\n\t\t\tconst target = channel.target;\n\t\t\tconst name = target.node;\n\t\t\tconst input = animationDef.parameters !== undefined ? animationDef.parameters[ sampler.input ] : sampler.input;\n\t\t\tconst output = animationDef.parameters !== undefined ? animationDef.parameters[ sampler.output ] : sampler.output;\n\n\t\t\tif ( target.node === undefined ) continue;\n\n\t\t\tpendingNodes.push( this.getDependency( 'node', name ) );\n\t\t\tpendingInputAccessors.push( this.getDependency( 'accessor', input ) );\n\t\t\tpendingOutputAccessors.push( this.getDependency( 'accessor', output ) );\n\t\t\tpendingSamplers.push( sampler );\n\t\t\tpendingTargets.push( target );\n\n\t\t}\n\n\t\treturn Promise.all( [\n\n\t\t\tPromise.all( pendingNodes ),\n\t\t\tPromise.all( pendingInputAccessors ),\n\t\t\tPromise.all( pendingOutputAccessors ),\n\t\t\tPromise.all( pendingSamplers ),\n\t\t\tPromise.all( pendingTargets )\n\n\t\t] ).then( function ( dependencies ) {\n\n\t\t\tconst nodes = dependencies[ 0 ];\n\t\t\tconst inputAccessors = dependencies[ 1 ];\n\t\t\tconst outputAccessors = dependencies[ 2 ];\n\t\t\tconst samplers = dependencies[ 3 ];\n\t\t\tconst targets = dependencies[ 4 ];\n\n\t\t\tconst tracks = [];\n\n\t\t\tfor ( let i = 0, il = nodes.length; i < il; i ++ ) {\n\n\t\t\t\tconst node = nodes[ i ];\n\t\t\t\tconst inputAccessor = inputAccessors[ i ];\n\t\t\t\tconst outputAccessor = outputAccessors[ i ];\n\t\t\t\tconst sampler = samplers[ i ];\n\t\t\t\tconst target = targets[ i ];\n\n\t\t\t\tif ( node === undefined ) continue;\n\n\t\t\t\tif ( node.updateMatrix ) {\n\n\t\t\t\t\tnode.updateMatrix();\n\n\t\t\t\t}\n\n\t\t\t\tconst createdTracks = parser._createAnimationTracks( node, inputAccessor, outputAccessor, sampler, target );\n\n\t\t\t\tif ( createdTracks ) {\n\n\t\t\t\t\tfor ( let k = 0; k < createdTracks.length; k ++ ) {\n\n\t\t\t\t\t\ttracks.push( createdTracks[ k ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tconst animation = new AnimationClip( animationName, undefined, tracks );\n\n\t\t\tassignExtrasToUserData( animation, animationDef );\n\n\t\t\treturn animation;\n\n\t\t} );\n\n\t}\n\n\tcreateNodeMesh( nodeIndex ) {\n\n\t\tconst json = this.json;\n\t\tconst parser = this;\n\t\tconst nodeDef = json.nodes[ nodeIndex ];\n\n\t\tif ( nodeDef.mesh === undefined ) return null;\n\n\t\treturn parser.getDependency( 'mesh', nodeDef.mesh ).then( function ( mesh ) {\n\n\t\t\tconst node = parser._getNodeRef( parser.meshCache, nodeDef.mesh, mesh );\n\n\t\t\t// if weights are provided on the node, override weights on the mesh.\n\t\t\tif ( nodeDef.weights !== undefined ) {\n\n\t\t\t\tnode.traverse( function ( o ) {\n\n\t\t\t\t\tif ( ! o.isMesh ) return;\n\n\t\t\t\t\tfor ( let i = 0, il = nodeDef.weights.length; i < il; i ++ ) {\n\n\t\t\t\t\t\to.morphTargetInfluences[ i ] = nodeDef.weights[ i ];\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\treturn node;\n\n\t\t} );\n\n\t}\n\n\t/**\n\t * Specification: https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#nodes-and-hierarchy\n\t *\n\t * @private\n\t * @param {number} nodeIndex\n\t * @return {Promise<Object3D>}\n\t */\n\tloadNode( nodeIndex ) {\n\n\t\tconst json = this.json;\n\t\tconst parser = this;\n\n\t\tconst nodeDef = json.nodes[ nodeIndex ];\n\n\t\tconst nodePending = parser._loadNodeShallow( nodeIndex );\n\n\t\tconst childPending = [];\n\t\tconst childrenDef = nodeDef.children || [];\n\n\t\tfor ( let i = 0, il = childrenDef.length; i < il; i ++ ) {\n\n\t\t\tchildPending.push( parser.getDependency( 'node', childrenDef[ i ] ) );\n\n\t\t}\n\n\t\tconst skeletonPending = nodeDef.skin === undefined\n\t\t\t? Promise.resolve( null )\n\t\t\t: parser.getDependency( 'skin', nodeDef.skin );\n\n\t\treturn Promise.all( [\n\t\t\tnodePending,\n\t\t\tPromise.all( childPending ),\n\t\t\tskeletonPending\n\t\t] ).then( function ( results ) {\n\n\t\t\tconst node = results[ 0 ];\n\t\t\tconst children = results[ 1 ];\n\t\t\tconst skeleton = results[ 2 ];\n\n\t\t\tif ( skeleton !== null ) {\n\n\t\t\t\t// This full traverse should be fine because\n\t\t\t\t// child glTF nodes have not been added to this node yet.\n\t\t\t\tnode.traverse( function ( mesh ) {\n\n\t\t\t\t\tif ( ! mesh.isSkinnedMesh ) return;\n\n\t\t\t\t\tmesh.bind( skeleton, _identityMatrix );\n\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\tfor ( let i = 0, il = children.length; i < il; i ++ ) {\n\n\t\t\t\tnode.add( children[ i ] );\n\n\t\t\t}\n\n\t\t\treturn node;\n\n\t\t} );\n\n\t}\n\n\t// ._loadNodeShallow() parses a single node.\n\t// skin and child nodes are created and added in .loadNode() (no '_' prefix).\n\t_loadNodeShallow( nodeIndex ) {\n\n\t\tconst json = this.json;\n\t\tconst extensions = this.extensions;\n\t\tconst parser = this;\n\n\t\t// This method is called from .loadNode() and .loadSkin().\n\t\t// Cache a node to avoid duplication.\n\n\t\tif ( this.nodeCache[ nodeIndex ] !== undefined ) {\n\n\t\t\treturn this.nodeCache[ nodeIndex ];\n\n\t\t}\n\n\t\tconst nodeDef = json.nodes[ nodeIndex ];\n\n\t\t// reserve node's name before its dependencies, so the root has the intended name.\n\t\tconst nodeName = nodeDef.name ? parser.createUniqueName( nodeDef.name ) : '';\n\n\t\tconst pending = [];\n\n\t\tconst meshPromise = parser._invokeOne( function ( ext ) {\n\n\t\t\treturn ext.createNodeMesh && ext.createNodeMesh( nodeIndex );\n\n\t\t} );\n\n\t\tif ( meshPromise ) {\n\n\t\t\tpending.push( meshPromise );\n\n\t\t}\n\n\t\tif ( nodeDef.camera !== undefined ) {\n\n\t\t\tpending.push( parser.getDependency( 'camera', nodeDef.camera ).then( function ( camera ) {\n\n\t\t\t\treturn parser._getNodeRef( parser.cameraCache, nodeDef.camera, camera );\n\n\t\t\t} ) );\n\n\t\t}\n\n\t\tparser._invokeAll( function ( ext ) {\n\n\t\t\treturn ext.createNodeAttachment && ext.createNodeAttachment( nodeIndex );\n\n\t\t} ).forEach( function ( promise ) {\n\n\t\t\tpending.push( promise );\n\n\t\t} );\n\n\t\tthis.nodeCache[ nodeIndex ] = Promise.all( pending ).then( function ( objects ) {\n\n\t\t\tlet node;\n\n\t\t\t// .isBone isn't in glTF spec. See ._markDefs\n\t\t\tif ( nodeDef.isBone === true ) {\n\n\t\t\t\tnode = new Bone();\n\n\t\t\t} else if ( objects.length > 1 ) {\n\n\t\t\t\tnode = new Group();\n\n\t\t\t} else if ( objects.length === 1 ) {\n\n\t\t\t\tnode = objects[ 0 ];\n\n\t\t\t} else {\n\n\t\t\t\tnode = new Object3D();\n\n\t\t\t}\n\n\t\t\tif ( node !== objects[ 0 ] ) {\n\n\t\t\t\tfor ( let i = 0, il = objects.length; i < il; i ++ ) {\n\n\t\t\t\t\tnode.add( objects[ i ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( nodeDef.name ) {\n\n\t\t\t\tnode.userData.name = nodeDef.name;\n\t\t\t\tnode.name = nodeName;\n\n\t\t\t}\n\n\t\t\tassignExtrasToUserData( node, nodeDef );\n\n\t\t\tif ( nodeDef.extensions ) addUnknownExtensionsToUserData( extensions, node, nodeDef );\n\n\t\t\tif ( nodeDef.matrix !== undefined ) {\n\n\t\t\t\tconst matrix = new Matrix4();\n\t\t\t\tmatrix.fromArray( nodeDef.matrix );\n\t\t\t\tnode.applyMatrix4( matrix );\n\n\t\t\t} else {\n\n\t\t\t\tif ( nodeDef.translation !== undefined ) {\n\n\t\t\t\t\tnode.position.fromArray( nodeDef.translation );\n\n\t\t\t\t}\n\n\t\t\t\tif ( nodeDef.rotation !== undefined ) {\n\n\t\t\t\t\tnode.quaternion.fromArray( nodeDef.rotation );\n\n\t\t\t\t}\n\n\t\t\t\tif ( nodeDef.scale !== undefined ) {\n\n\t\t\t\t\tnode.scale.fromArray( nodeDef.scale );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( ! parser.associations.has( node ) ) {\n\n\t\t\t\tparser.associations.set( node, {} );\n\n\t\t\t} else if ( nodeDef.mesh !== undefined && parser.meshCache.refs[ nodeDef.mesh ] > 1 ) {\n\n\t\t\t\tconst mapping = parser.associations.get( node );\n\t\t\t\tparser.associations.set( node, { ...mapping } );\n\n\t\t\t}\n\n\t\t\tparser.associations.get( node ).nodes = nodeIndex;\n\n\t\t\treturn node;\n\n\t\t} );\n\n\t\treturn this.nodeCache[ nodeIndex ];\n\n\t}\n\n\t/**\n\t * Specification: https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#scenes\n\t *\n\t * @private\n\t * @param {number} sceneIndex\n\t * @return {Promise<Group>}\n\t */\n\tloadScene( sceneIndex ) {\n\n\t\tconst extensions = this.extensions;\n\t\tconst sceneDef = this.json.scenes[ sceneIndex ];\n\t\tconst parser = this;\n\n\t\t// Loader returns Group, not Scene.\n\t\t// See: https://github.com/mrdoob/three.js/issues/18342#issuecomment-578981172\n\t\tconst scene = new Group();\n\t\tif ( sceneDef.name ) scene.name = parser.createUniqueName( sceneDef.name );\n\n\t\tassignExtrasToUserData( scene, sceneDef );\n\n\t\tif ( sceneDef.extensions ) addUnknownExtensionsToUserData( extensions, scene, sceneDef );\n\n\t\tconst nodeIds = sceneDef.nodes || [];\n\n\t\tconst pending = [];\n\n\t\tfor ( let i = 0, il = nodeIds.length; i < il; i ++ ) {\n\n\t\t\tpending.push( parser.getDependency( 'node', nodeIds[ i ] ) );\n\n\t\t}\n\n\t\treturn Promise.all( pending ).then( function ( nodes ) {\n\n\t\t\tfor ( let i = 0, il = nodes.length; i < il; i ++ ) {\n\n\t\t\t\tscene.add( nodes[ i ] );\n\n\t\t\t}\n\n\t\t\t// Removes dangling associations, associations that reference a node that\n\t\t\t// didn't make it into the scene.\n\t\t\tconst reduceAssociations = ( node ) => {\n\n\t\t\t\tconst reducedAssociations = new Map();\n\n\t\t\t\tfor ( const [ key, value ] of parser.associations ) {\n\n\t\t\t\t\tif ( key instanceof Material || key instanceof Texture ) {\n\n\t\t\t\t\t\treducedAssociations.set( key, value );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tnode.traverse( ( node ) => {\n\n\t\t\t\t\tconst mappings = parser.associations.get( node );\n\n\t\t\t\t\tif ( mappings != null ) {\n\n\t\t\t\t\t\treducedAssociations.set( node, mappings );\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\n\t\t\t\treturn reducedAssociations;\n\n\t\t\t};\n\n\t\t\tparser.associations = reduceAssociations( scene );\n\n\t\t\treturn scene;\n\n\t\t} );\n\n\t}\n\n\t_createAnimationTracks( node, inputAccessor, outputAccessor, sampler, target ) {\n\n\t\tconst tracks = [];\n\n\t\tconst targetName = node.name ? node.name : node.uuid;\n\t\tconst targetNames = [];\n\n\t\tif ( PATH_PROPERTIES[ target.path ] === PATH_PROPERTIES.weights ) {\n\n\t\t\tnode.traverse( function ( object ) {\n\n\t\t\t\tif ( object.morphTargetInfluences ) {\n\n\t\t\t\t\ttargetNames.push( object.name ? object.name : object.uuid );\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t} else {\n\n\t\t\ttargetNames.push( targetName );\n\n\t\t}\n\n\t\tlet TypedKeyframeTrack;\n\n\t\tswitch ( PATH_PROPERTIES[ target.path ] ) {\n\n\t\t\tcase PATH_PROPERTIES.weights:\n\n\t\t\t\tTypedKeyframeTrack = NumberKeyframeTrack;\n\t\t\t\tbreak;\n\n\t\t\tcase PATH_PROPERTIES.rotation:\n\n\t\t\t\tTypedKeyframeTrack = QuaternionKeyframeTrack;\n\t\t\t\tbreak;\n\n\t\t\tcase PATH_PROPERTIES.translation:\n\t\t\tcase PATH_PROPERTIES.scale:\n\n\t\t\t\tTypedKeyframeTrack = VectorKeyframeTrack;\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\n\t\t\t\tswitch ( outputAccessor.itemSize ) {\n\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\tTypedKeyframeTrack = NumberKeyframeTrack;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2:\n\t\t\t\t\tcase 3:\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tTypedKeyframeTrack = VectorKeyframeTrack;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t}\n\n\t\tconst interpolation = sampler.interpolation !== undefined ? INTERPOLATION[ sampler.interpolation ] : InterpolateLinear;\n\n\n\t\tconst outputArray = this._getArrayFromAccessor( outputAccessor );\n\n\t\tfor ( let j = 0, jl = targetNames.length; j < jl; j ++ ) {\n\n\t\t\tconst track = new TypedKeyframeTrack(\n\t\t\t\ttargetNames[ j ] + '.' + PATH_PROPERTIES[ target.path ],\n\t\t\t\tinputAccessor.array,\n\t\t\t\toutputArray,\n\t\t\t\tinterpolation\n\t\t\t);\n\n\t\t\t// Override interpolation with custom factory method.\n\t\t\tif ( sampler.interpolation === 'CUBICSPLINE' ) {\n\n\t\t\t\tthis._createCubicSplineTrackInterpolant( track );\n\n\t\t\t}\n\n\t\t\ttracks.push( track );\n\n\t\t}\n\n\t\treturn tracks;\n\n\t}\n\n\t_getArrayFromAccessor( accessor ) {\n\n\t\tlet outputArray = accessor.array;\n\n\t\tif ( accessor.normalized ) {\n\n\t\t\tconst scale = getNormalizedComponentScale( outputArray.constructor );\n\t\t\tconst scaled = new Float32Array( outputArray.length );\n\n\t\t\tfor ( let j = 0, jl = outputArray.length; j < jl; j ++ ) {\n\n\t\t\t\tscaled[ j ] = outputArray[ j ] * scale;\n\n\t\t\t}\n\n\t\t\toutputArray = scaled;\n\n\t\t}\n\n\t\treturn outputArray;\n\n\t}\n\n\t_createCubicSplineTrackInterpolant( track ) {\n\n\t\ttrack.createInterpolant = function InterpolantFactoryMethodGLTFCubicSpline( result ) {\n\n\t\t\t// A CUBICSPLINE keyframe in glTF has three output values for each input value,\n\t\t\t// representing inTangent, splineVertex, and outTangent. As a result, track.getValueSize()\n\t\t\t// must be divided by three to get the interpolant's sampleSize argument.\n\n\t\t\tconst interpolantType = ( this instanceof QuaternionKeyframeTrack ) ? GLTFCubicSplineQuaternionInterpolant : GLTFCubicSplineInterpolant;\n\n\t\t\treturn new interpolantType( this.times, this.values, this.getValueSize() / 3, result );\n\n\t\t};\n\n\t\t// Mark as CUBICSPLINE. `track.getInterpolation()` doesn't support custom interpolants.\n\t\ttrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline = true;\n\n\t}\n\n}\n\n/**\n *\n * @private\n * @param {BufferGeometry} geometry\n * @param {GLTF.Primitive} primitiveDef\n * @param {GLTFParser} parser\n */\nfunction computeBounds( geometry, primitiveDef, parser ) {\n\n\tconst attributes = primitiveDef.attributes;\n\n\tconst box = new Box3();\n\n\tif ( attributes.POSITION !== undefined ) {\n\n\t\tconst accessor = parser.json.accessors[ attributes.POSITION ];\n\n\t\tconst min = accessor.min;\n\t\tconst max = accessor.max;\n\n\t\t// glTF requires 'min' and 'max', but VRM (which extends glTF) currently ignores that requirement.\n\n\t\tif ( min !== undefined && max !== undefined ) {\n\n\t\t\tbox.set(\n\t\t\t\tnew Vector3( min[ 0 ], min[ 1 ], min[ 2 ] ),\n\t\t\t\tnew Vector3( max[ 0 ], max[ 1 ], max[ 2 ] )\n\t\t\t);\n\n\t\t\tif ( accessor.normalized ) {\n\n\t\t\t\tconst boxScale = getNormalizedComponentScale( WEBGL_COMPONENT_TYPES[ accessor.componentType ] );\n\t\t\t\tbox.min.multiplyScalar( boxScale );\n\t\t\t\tbox.max.multiplyScalar( boxScale );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'THREE.GLTFLoader: Missing min/max properties for accessor POSITION.' );\n\n\t\t\treturn;\n\n\t\t}\n\n\t} else {\n\n\t\treturn;\n\n\t}\n\n\tconst targets = primitiveDef.targets;\n\n\tif ( targets !== undefined ) {\n\n\t\tconst maxDisplacement = new Vector3();\n\t\tconst vector = new Vector3();\n\n\t\tfor ( let i = 0, il = targets.length; i < il; i ++ ) {\n\n\t\t\tconst target = targets[ i ];\n\n\t\t\tif ( target.POSITION !== undefined ) {\n\n\t\t\t\tconst accessor = parser.json.accessors[ target.POSITION ];\n\t\t\t\tconst min = accessor.min;\n\t\t\t\tconst max = accessor.max;\n\n\t\t\t\t// glTF requires 'min' and 'max', but VRM (which extends glTF) currently ignores that requirement.\n\n\t\t\t\tif ( min !== undefined && max !== undefined ) {\n\n\t\t\t\t\t// we need to get max of absolute components because target weight is [-1,1]\n\t\t\t\t\tvector.setX( Math.max( Math.abs( min[ 0 ] ), Math.abs( max[ 0 ] ) ) );\n\t\t\t\t\tvector.setY( Math.max( Math.abs( min[ 1 ] ), Math.abs( max[ 1 ] ) ) );\n\t\t\t\t\tvector.setZ( Math.max( Math.abs( min[ 2 ] ), Math.abs( max[ 2 ] ) ) );\n\n\n\t\t\t\t\tif ( accessor.normalized ) {\n\n\t\t\t\t\t\tconst boxScale = getNormalizedComponentScale( WEBGL_COMPONENT_TYPES[ accessor.componentType ] );\n\t\t\t\t\t\tvector.multiplyScalar( boxScale );\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// Note: this assumes that the sum of all weights is at most 1. This isn't quite correct - it's more conservative\n\t\t\t\t\t// to assume that each target can have a max weight of 1. However, for some use cases - notably, when morph targets\n\t\t\t\t\t// are used to implement key-frame animations and as such only two are active at a time - this results in very large\n\t\t\t\t\t// boxes. So for now we make a box that's sometimes a touch too small but is hopefully mostly of reasonable size.\n\t\t\t\t\tmaxDisplacement.max( vector );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn( 'THREE.GLTFLoader: Missing min/max properties for accessor POSITION.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// As per comment above this box isn't conservative, but has a reasonable size for a very large number of morph targets.\n\t\tbox.expandByVector( maxDisplacement );\n\n\t}\n\n\tgeometry.boundingBox = box;\n\n\tconst sphere = new Sphere();\n\n\tbox.getCenter( sphere.center );\n\tsphere.radius = box.min.distanceTo( box.max ) / 2;\n\n\tgeometry.boundingSphere = sphere;\n\n}\n\n/**\n *\n * @private\n * @param {BufferGeometry} geometry\n * @param {GLTF.Primitive} primitiveDef\n * @param {GLTFParser} parser\n * @return {Promise<BufferGeometry>}\n */\nfunction addPrimitiveAttributes( geometry, primitiveDef, parser ) {\n\n\tconst attributes = primitiveDef.attributes;\n\n\tconst pending = [];\n\n\tfunction assignAttributeAccessor( accessorIndex, attributeName ) {\n\n\t\treturn parser.getDependency( 'accessor', accessorIndex )\n\t\t\t.then( function ( accessor ) {\n\n\t\t\t\tgeometry.setAttribute( attributeName, accessor );\n\n\t\t\t} );\n\n\t}\n\n\tfor ( const gltfAttributeName in attributes ) {\n\n\t\tconst threeAttributeName = ATTRIBUTES[ gltfAttributeName ] || gltfAttributeName.toLowerCase();\n\n\t\t// Skip attributes already provided by e.g. Draco extension.\n\t\tif ( threeAttributeName in geometry.attributes ) continue;\n\n\t\tpending.push( assignAttributeAccessor( attributes[ gltfAttributeName ], threeAttributeName ) );\n\n\t}\n\n\tif ( primitiveDef.indices !== undefined && ! geometry.index ) {\n\n\t\tconst accessor = parser.getDependency( 'accessor', primitiveDef.indices ).then( function ( accessor ) {\n\n\t\t\tgeometry.setIndex( accessor );\n\n\t\t} );\n\n\t\tpending.push( accessor );\n\n\t}\n\n\tif ( ColorManagement.workingColorSpace !== LinearSRGBColorSpace && 'COLOR_0' in attributes ) {\n\n\t\tconsole.warn( `THREE.GLTFLoader: Converting vertex colors from \"srgb-linear\" to \"${ColorManagement.workingColorSpace}\" not supported.` );\n\n\t}\n\n\tassignExtrasToUserData( geometry, primitiveDef );\n\n\tcomputeBounds( geometry, primitiveDef, parser );\n\n\treturn Promise.all( pending ).then( function () {\n\n\t\treturn primitiveDef.targets !== undefined\n\t\t\t? addMorphTargets( geometry, primitiveDef.targets, parser )\n\t\t\t: geometry;\n\n\t} );\n\n}\n\n/**\n * Loader result of `GLTFLoader`.\n *\n * @typedef {Object} GLTFLoader~LoadObject\n * @property {Array<AnimationClip>} animations - An array of animation clips.\n * @property {Object} asset - Meta data about the loaded asset.\n * @property {Array<Camera>} cameras - An array of cameras.\n * @property {GLTFParser} parser - A reference to the internal parser.\n * @property {Group} scene - The default scene.\n * @property {Array<Group>} scenes - glTF assets might define multiple scenes.\n * @property {Object} userData - Additional data.\n **/\n\nexport { GLTFLoader };\n"],"mappings":"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"}