{"version":3,"file":"three_examples_jsm_loaders_MTLLoader__js.js","names":[],"sources":["../../three/examples/jsm/loaders/MTLLoader.js"],"sourcesContent":["import {\n\tColor,\n\tColorManagement,\n\tDefaultLoadingManager,\n\tFileLoader,\n\tFrontSide,\n\tLoader,\n\tLoaderUtils,\n\tMeshPhongMaterial,\n\tRepeatWrapping,\n\tTextureLoader,\n\tVector2,\n\tSRGBColorSpace\n} from 'three';\n\n/**\n * A loader for the MTL format.\n *\n * The Material Template Library format (MTL) or .MTL File Format is a companion file format\n * to OBJ that describes surface shading (material) properties of objects within one or more\n * OBJ files.\n *\n * ```js\n * const loader = new MTLLoader();\n * const materials = await loader.loadAsync( 'models/obj/male02/male02.mtl' );\n *\n * const objLoader = new OBJLoader();\n * objLoader.setMaterials( materials );\n * ```\n *\n * @augments Loader\n * @three_import import { MTLLoader } from 'three/addons/loaders/MTLLoader.js';\n */\nclass MTLLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\t/**\n\t * Starts loading from the given URL and passes the loaded MTL asset\n\t * to the `onLoad()` callback.\n\t *\n\t * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.\n\t * @param {function(MaterialCreator)} onLoad - Executed when the loading process has been finished.\n\t * @param {onProgressCallback} onProgress - Executed while the loading is in progress.\n\t * @param {onErrorCallback} onError - Executed when errors occur.\n\t */\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tconst path = ( this.path === '' ) ? LoaderUtils.extractUrlBase( url ) : this.path;\n\n\t\tconst loader = new FileLoader( this.manager );\n\t\tloader.setPath( this.path );\n\t\tloader.setRequestHeader( this.requestHeader );\n\t\tloader.setWithCredentials( this.withCredentials );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\ttry {\n\n\t\t\t\tonLoad( scope.parse( text, path ) );\n\n\t\t\t} catch ( e ) {\n\n\t\t\t\tif ( onError ) {\n\n\t\t\t\t\tonError( e );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( e );\n\n\t\t\t\t}\n\n\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t}\n\n\t\t}, onProgress, onError );\n\n\t}\n\n\t/**\n\t * Sets the material options.\n\t *\n\t * @param {MTLLoader~MaterialOptions} value - The material options.\n\t * @return {MTLLoader} A reference to this loader.\n\t */\n\tsetMaterialOptions( value ) {\n\n\t\tthis.materialOptions = value;\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Parses the given MTL data and returns the resulting material creator.\n\t *\n\t * @param {string} text - The raw MTL data as a string.\n\t * @param {string} path - The URL base path.\n\t * @return {MaterialCreator} The material creator.\n\t */\n\tparse( text, path ) {\n\n\t\tconst lines = text.split( '\\n' );\n\t\tlet info = {};\n\t\tconst delimiter_pattern = /\\s+/;\n\t\tconst materialsInfo = {};\n\n\t\tfor ( let i = 0; i < lines.length; i ++ ) {\n\n\t\t\tlet line = lines[ i ];\n\t\t\tline = line.trim();\n\n\t\t\tif ( line.length === 0 || line.charAt( 0 ) === '#' ) {\n\n\t\t\t\t// Blank line or comment ignore\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\tconst pos = line.indexOf( ' ' );\n\n\t\t\tlet key = ( pos >= 0 ) ? line.substring( 0, pos ) : line;\n\t\t\tkey = key.toLowerCase();\n\n\t\t\tlet value = ( pos >= 0 ) ? line.substring( pos + 1 ) : '';\n\t\t\tvalue = value.trim();\n\n\t\t\tif ( key === 'newmtl' ) {\n\n\t\t\t\t// New material\n\n\t\t\t\tinfo = { name: value };\n\t\t\t\tmaterialsInfo[ value ] = info;\n\n\t\t\t} else {\n\n\t\t\t\tif ( key === 'ka' || key === 'kd' || key === 'ks' || key === 'ke' ) {\n\n\t\t\t\t\tconst ss = value.split( delimiter_pattern, 3 );\n\t\t\t\t\tinfo[ key ] = [ parseFloat( ss[ 0 ] ), parseFloat( ss[ 1 ] ), parseFloat( ss[ 2 ] ) ];\n\n\t\t\t\t} else {\n\n\t\t\t\t\tinfo[ key ] = value;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst materialCreator = new MaterialCreator( this.resourcePath || path, this.materialOptions );\n\t\tmaterialCreator.setCrossOrigin( this.crossOrigin );\n\t\tmaterialCreator.setManager( this.manager );\n\t\tmaterialCreator.setMaterials( materialsInfo );\n\t\treturn materialCreator;\n\n\t}\n\n}\n\n/**\n * Material options of `MTLLoader`.\n *\n * @typedef {Object} MTLLoader~MaterialOptions\n * @property {(FrontSide|BackSide|DoubleSide)} [side=FrontSide] - Which side to apply the material.\n * @property {(RepeatWrapping|ClampToEdgeWrapping|MirroredRepeatWrapping)} [wrap=RepeatWrapping] - What type of wrapping to apply for textures.\n * @property {boolean} [normalizeRGB=false] - Whether RGB colors should be normalized to `0-1` from `0-255`.\n * @property {boolean} [ignoreZeroRGBs=false] - Ignore values of RGBs (Ka,Kd,Ks) that are all 0's.\n */\n\nclass MaterialCreator {\n\n\tconstructor( baseUrl = '', options = {} ) {\n\n\t\tthis.baseUrl = baseUrl;\n\t\tthis.options = options;\n\t\tthis.materialsInfo = {};\n\t\tthis.materials = {};\n\t\tthis.materialsArray = [];\n\t\tthis.nameLookup = {};\n\n\t\tthis.crossOrigin = 'anonymous';\n\n\t\tthis.side = ( this.options.side !== undefined ) ? this.options.side : FrontSide;\n\t\tthis.wrap = ( this.options.wrap !== undefined ) ? this.options.wrap : RepeatWrapping;\n\n\t}\n\n\tsetCrossOrigin( value ) {\n\n\t\tthis.crossOrigin = value;\n\t\treturn this;\n\n\t}\n\n\tsetManager( value ) {\n\n\t\tthis.manager = value;\n\n\t}\n\n\tsetMaterials( materialsInfo ) {\n\n\t\tthis.materialsInfo = this.convert( materialsInfo );\n\t\tthis.materials = {};\n\t\tthis.materialsArray = [];\n\t\tthis.nameLookup = {};\n\n\t}\n\n\tconvert( materialsInfo ) {\n\n\t\tif ( ! this.options ) return materialsInfo;\n\n\t\tconst converted = {};\n\n\t\tfor ( const mn in materialsInfo ) {\n\n\t\t\t// Convert materials info into normalized form based on options\n\n\t\t\tconst mat = materialsInfo[ mn ];\n\n\t\t\tconst covmat = {};\n\n\t\t\tconverted[ mn ] = covmat;\n\n\t\t\tfor ( const prop in mat ) {\n\n\t\t\t\tlet save = true;\n\t\t\t\tlet value = mat[ prop ];\n\t\t\t\tconst lprop = prop.toLowerCase();\n\n\t\t\t\tswitch ( lprop ) {\n\n\t\t\t\t\tcase 'kd':\n\t\t\t\t\tcase 'ka':\n\t\t\t\t\tcase 'ks':\n\n\t\t\t\t\t\t// Diffuse color (color under white light) using RGB values\n\n\t\t\t\t\t\tif ( this.options && this.options.normalizeRGB ) {\n\n\t\t\t\t\t\t\tvalue = [ value[ 0 ] / 255, value[ 1 ] / 255, value[ 2 ] / 255 ];\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( this.options && this.options.ignoreZeroRGBs ) {\n\n\t\t\t\t\t\t\tif ( value[ 0 ] === 0 && value[ 1 ] === 0 && value[ 2 ] === 0 ) {\n\n\t\t\t\t\t\t\t\t// ignore\n\n\t\t\t\t\t\t\t\tsave = false;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\tif ( save ) {\n\n\t\t\t\t\tcovmat[ lprop ] = value;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn converted;\n\n\t}\n\n\tpreload() {\n\n\t\tfor ( const mn in this.materialsInfo ) {\n\n\t\t\tthis.create( mn );\n\n\t\t}\n\n\t}\n\n\tgetIndex( materialName ) {\n\n\t\treturn this.nameLookup[ materialName ];\n\n\t}\n\n\tgetAsArray() {\n\n\t\tlet index = 0;\n\n\t\tfor ( const mn in this.materialsInfo ) {\n\n\t\t\tthis.materialsArray[ index ] = this.create( mn );\n\t\t\tthis.nameLookup[ mn ] = index;\n\t\t\tindex ++;\n\n\t\t}\n\n\t\treturn this.materialsArray;\n\n\t}\n\n\tcreate( materialName ) {\n\n\t\tif ( this.materials[ materialName ] === undefined ) {\n\n\t\t\tthis.createMaterial_( materialName );\n\n\t\t}\n\n\t\treturn this.materials[ materialName ];\n\n\t}\n\n\tcreateMaterial_( materialName ) {\n\n\t\t// Create material\n\n\t\tconst scope = this;\n\t\tconst mat = this.materialsInfo[ materialName ];\n\t\tconst params = {\n\n\t\t\tname: materialName,\n\t\t\tside: this.side\n\n\t\t};\n\n\t\tfunction resolveURL( baseUrl, url ) {\n\n\t\t\tif ( typeof url !== 'string' || url === '' )\n\t\t\t\treturn '';\n\n\t\t\t// Absolute URL\n\t\t\tif ( /^https?:\\/\\//i.test( url ) ) return url;\n\n\t\t\treturn baseUrl + url;\n\n\t\t}\n\n\t\tfunction setMapForType( mapType, value ) {\n\n\t\t\tif ( params[ mapType ] ) return; // Keep the first encountered texture\n\n\t\t\tconst texParams = scope.getTextureParams( value, params );\n\t\t\tconst map = scope.loadTexture( resolveURL( scope.baseUrl, texParams.url ) );\n\n\t\t\tmap.repeat.copy( texParams.scale );\n\t\t\tmap.offset.copy( texParams.offset );\n\n\t\t\tmap.wrapS = scope.wrap;\n\t\t\tmap.wrapT = scope.wrap;\n\n\t\t\tif ( mapType === 'map' || mapType === 'emissiveMap' ) {\n\n\t\t\t\tmap.colorSpace = SRGBColorSpace;\n\n\t\t\t}\n\n\t\t\tparams[ mapType ] = map;\n\n\t\t}\n\n\t\tfor ( const prop in mat ) {\n\n\t\t\tconst value = mat[ prop ];\n\t\t\tlet n;\n\n\t\t\tif ( value === '' ) continue;\n\n\t\t\tswitch ( prop.toLowerCase() ) {\n\n\t\t\t\t// Ns is material specular exponent\n\n\t\t\t\tcase 'kd':\n\n\t\t\t\t\t// Diffuse color (color under white light) using RGB values\n\n\t\t\t\t\tparams.color = ColorManagement.colorSpaceToWorking( new Color().fromArray( value ), SRGBColorSpace );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ks':\n\n\t\t\t\t\t// Specular color (color when light is reflected from shiny surface) using RGB values\n\t\t\t\t\tparams.specular = ColorManagement.colorSpaceToWorking( new Color().fromArray( value ), SRGBColorSpace );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ke':\n\n\t\t\t\t\t// Emissive using RGB values\n\t\t\t\t\tparams.emissive = ColorManagement.colorSpaceToWorking( new Color().fromArray( value ), SRGBColorSpace );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'map_kd':\n\n\t\t\t\t\t// Diffuse texture map\n\n\t\t\t\t\tsetMapForType( 'map', value );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'map_ks':\n\n\t\t\t\t\t// Specular map\n\n\t\t\t\t\tsetMapForType( 'specularMap', value );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'map_ke':\n\n\t\t\t\t\t// Emissive map\n\n\t\t\t\t\tsetMapForType( 'emissiveMap', value );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'norm':\n\n\t\t\t\t\tsetMapForType( 'normalMap', value );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'map_bump':\n\t\t\t\tcase 'bump':\n\n\t\t\t\t\t// Bump texture map\n\n\t\t\t\t\tsetMapForType( 'bumpMap', value );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'disp':\n\n\t\t\t\t\t// Displacement texture map\n\n\t\t\t\t\tsetMapForType( 'displacementMap', value );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'map_d':\n\n\t\t\t\t\t// Alpha map\n\n\t\t\t\t\tsetMapForType( 'alphaMap', value );\n\t\t\t\t\tparams.transparent = true;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ns':\n\n\t\t\t\t\t// The specular exponent (defines the focus of the specular highlight)\n\t\t\t\t\t// A high exponent results in a tight, concentrated highlight. Ns values normally range from 0 to 1000.\n\n\t\t\t\t\tparams.shininess = parseFloat( value );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'd':\n\t\t\t\t\tn = parseFloat( value );\n\n\t\t\t\t\tif ( n < 1 ) {\n\n\t\t\t\t\t\tparams.opacity = n;\n\t\t\t\t\t\tparams.transparent = true;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'tr':\n\t\t\t\t\tn = parseFloat( value );\n\n\t\t\t\t\tif ( this.options && this.options.invertTrProperty ) n = 1 - n;\n\n\t\t\t\t\tif ( n > 0 ) {\n\n\t\t\t\t\t\tparams.opacity = 1 - n;\n\t\t\t\t\t\tparams.transparent = true;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.materials[ materialName ] = new MeshPhongMaterial( params );\n\t\treturn this.materials[ materialName ];\n\n\t}\n\n\tgetTextureParams( value, matParams ) {\n\n\t\tconst texParams = {\n\n\t\t\tscale: new Vector2( 1, 1 ),\n\t\t\toffset: new Vector2( 0, 0 )\n\n\t\t };\n\n\t\tconst items = value.split( /\\s+/ );\n\t\tlet pos;\n\n\t\tpos = items.indexOf( '-bm' );\n\n\t\tif ( pos >= 0 ) {\n\n\t\t\tmatParams.bumpScale = parseFloat( items[ pos + 1 ] );\n\t\t\titems.splice( pos, 2 );\n\n\t\t}\n\n\t\tpos = items.indexOf( '-mm' );\n\n\t\tif ( pos >= 0 ) {\n\n\t\t\tmatParams.displacementBias = parseFloat( items[ pos + 1 ] );\n\t\t\tmatParams.displacementScale = parseFloat( items[ pos + 2 ] );\n\t\t\titems.splice( pos, 3 );\n\n\t\t}\n\n\t\tpos = items.indexOf( '-s' );\n\n\t\tif ( pos >= 0 ) {\n\n\t\t\ttexParams.scale.set( parseFloat( items[ pos + 1 ] ), parseFloat( items[ pos + 2 ] ) );\n\t\t\titems.splice( pos, 4 ); // we expect 3 parameters here!\n\n\t\t}\n\n\t\tpos = items.indexOf( '-o' );\n\n\t\tif ( pos >= 0 ) {\n\n\t\t\ttexParams.offset.set( parseFloat( items[ pos + 1 ] ), parseFloat( items[ pos + 2 ] ) );\n\t\t\titems.splice( pos, 4 ); // we expect 3 parameters here!\n\n\t\t}\n\n\t\ttexParams.url = items.join( ' ' ).trim();\n\t\treturn texParams;\n\n\t}\n\n\tloadTexture( url, mapping, onLoad, onProgress, onError ) {\n\n\t\tconst manager = ( this.manager !== undefined ) ? this.manager : DefaultLoadingManager;\n\t\tlet loader = manager.getHandler( url );\n\n\t\tif ( loader === null ) {\n\n\t\t\tloader = new TextureLoader( manager );\n\n\t\t}\n\n\t\tif ( loader.setCrossOrigin ) loader.setCrossOrigin( this.crossOrigin );\n\n\t\tconst texture = loader.load( url, onLoad, onProgress, onError );\n\n\t\tif ( mapping !== undefined ) texture.mapping = mapping;\n\n\t\treturn texture;\n\n\t}\n\n}\n\nexport { MTLLoader };\n"],"mappings":"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"}