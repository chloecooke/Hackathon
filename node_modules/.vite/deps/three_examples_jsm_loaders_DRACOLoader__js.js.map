{"version":3,"file":"three_examples_jsm_loaders_DRACOLoader__js.js","names":["worker"],"sources":["../../three/examples/jsm/loaders/DRACOLoader.js"],"sourcesContent":["import {\n\tBufferAttribute,\n\tBufferGeometry,\n\tColor,\n\tColorManagement,\n\tFileLoader,\n\tLoader,\n\tLinearSRGBColorSpace,\n\tSRGBColorSpace\n} from 'three';\n\nconst _taskCache = new WeakMap();\n\n/**\n * A loader for the Draco format.\n *\n * [Draco]{@link https://google.github.io/draco/} is an open source library for compressing\n * and decompressing 3D meshes and point clouds. Compressed geometry can be significantly smaller,\n * at the cost of additional decoding time on the client device.\n *\n * Standalone Draco files have a `.drc` extension, and contain vertex positions, normals, colors,\n * and other attributes. Draco files do not contain materials, textures, animation, or node hierarchies â€“\n * to use these features, embed Draco geometry inside of a glTF file. A normal glTF file can be converted\n * to a Draco-compressed glTF file using [glTF-Pipeline]{@link https://github.com/CesiumGS/gltf-pipeline}.\n * When using Draco with glTF, an instance of `DRACOLoader` will be used internally by {@link GLTFLoader}.\n *\n * It is recommended to create one DRACOLoader instance and reuse it to avoid loading and creating\n * multiple decoder instances.\n *\n * `DRACOLoader` will automatically use either the JS or the WASM decoding library, based on\n * browser capabilities.\n *\n * ```js\n * const loader = new DRACOLoader();\n * loader.setDecoderPath( '/examples/jsm/libs/draco/' );\n *\n * const geometry = await dracoLoader.loadAsync( 'models/draco/bunny.drc' );\n * geometry.computeVertexNormals(); // optional\n *\n * dracoLoader.dispose();\n * ```\n *\n * @augments Loader\n * @three_import import { DRACOLoader } from 'three/addons/loaders/DRACOLoader.js';\n */\nclass DRACOLoader extends Loader {\n\n\t/**\n\t * Constructs a new Draco loader.\n\t *\n\t * @param {LoadingManager} [manager] - The loading manager.\n\t */\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t\tthis.decoderPath = '';\n\t\tthis.decoderConfig = {};\n\t\tthis.decoderBinary = null;\n\t\tthis.decoderPending = null;\n\n\t\tthis.workerLimit = 4;\n\t\tthis.workerPool = [];\n\t\tthis.workerNextTaskID = 1;\n\t\tthis.workerSourceURL = '';\n\n\t\tthis.defaultAttributeIDs = {\n\t\t\tposition: 'POSITION',\n\t\t\tnormal: 'NORMAL',\n\t\t\tcolor: 'COLOR',\n\t\t\tuv: 'TEX_COORD'\n\t\t};\n\t\tthis.defaultAttributeTypes = {\n\t\t\tposition: 'Float32Array',\n\t\t\tnormal: 'Float32Array',\n\t\t\tcolor: 'Float32Array',\n\t\t\tuv: 'Float32Array'\n\t\t};\n\n\t}\n\n\t/**\n\t * Provides configuration for the decoder libraries. Configuration cannot be changed after decoding begins.\n\t *\n\t * @param {string} path - The decoder path.\n\t * @return {DRACOLoader} A reference to this loader.\n\t */\n\tsetDecoderPath( path ) {\n\n\t\tthis.decoderPath = path;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Provides configuration for the decoder libraries. Configuration cannot be changed after decoding begins.\n\t *\n\t * @param {{type:('js'|'wasm')}} config - The decoder config.\n\t * @return {DRACOLoader} A reference to this loader.\n\t */\n\tsetDecoderConfig( config ) {\n\n\t\tthis.decoderConfig = config;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the maximum number of Web Workers to be used during decoding.\n\t * A lower limit may be preferable if workers are also for other tasks in the application.\n\t *\n\t * @param {number} workerLimit - The worker limit.\n\t * @return {DRACOLoader} A reference to this loader.\n\t */\n\tsetWorkerLimit( workerLimit ) {\n\n\t\tthis.workerLimit = workerLimit;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Starts loading from the given URL and passes the loaded Draco asset\n\t * to the `onLoad()` callback.\n\t *\n\t * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.\n\t * @param {function(BufferGeometry)} onLoad - Executed when the loading process has been finished.\n\t * @param {onProgressCallback} onProgress - Executed while the loading is in progress.\n\t * @param {onErrorCallback} onError - Executed when errors occur.\n\t */\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst loader = new FileLoader( this.manager );\n\n\t\tloader.setPath( this.path );\n\t\tloader.setResponseType( 'arraybuffer' );\n\t\tloader.setRequestHeader( this.requestHeader );\n\t\tloader.setWithCredentials( this.withCredentials );\n\n\t\tloader.load( url, ( buffer ) => {\n\n\t\t\tthis.parse( buffer, onLoad, onError );\n\n\t\t}, onProgress, onError );\n\n\t}\n\n\t/**\n\t * Parses the given Draco data.\n\t *\n\t * @param {ArrayBuffer} buffer - The raw Draco data as an array buffer.\n\t * @param {function(BufferGeometry)} onLoad - Executed when the loading/parsing process has been finished.\n\t * @param {onErrorCallback} onError - Executed when errors occur.\n\t */\n\tparse( buffer, onLoad, onError = ()=>{} ) {\n\n\t\tthis.decodeDracoFile( buffer, onLoad, null, null, SRGBColorSpace, onError ).catch( onError );\n\n\t}\n\n\t//\n\n\tdecodeDracoFile( buffer, callback, attributeIDs, attributeTypes, vertexColorSpace = LinearSRGBColorSpace, onError = () => {} ) {\n\n\t\tconst taskConfig = {\n\t\t\tattributeIDs: attributeIDs || this.defaultAttributeIDs,\n\t\t\tattributeTypes: attributeTypes || this.defaultAttributeTypes,\n\t\t\tuseUniqueIDs: !! attributeIDs,\n\t\t\tvertexColorSpace: vertexColorSpace,\n\t\t};\n\n\t\treturn this.decodeGeometry( buffer, taskConfig ).then( callback ).catch( onError );\n\n\t}\n\n\tdecodeGeometry( buffer, taskConfig ) {\n\n\t\tconst taskKey = JSON.stringify( taskConfig );\n\n\t\t// Check for an existing task using this buffer. A transferred buffer cannot be transferred\n\t\t// again from this thread.\n\t\tif ( _taskCache.has( buffer ) ) {\n\n\t\t\tconst cachedTask = _taskCache.get( buffer );\n\n\t\t\tif ( cachedTask.key === taskKey ) {\n\n\t\t\t\treturn cachedTask.promise;\n\n\t\t\t} else if ( buffer.byteLength === 0 ) {\n\n\t\t\t\t// Technically, it would be possible to wait for the previous task to complete,\n\t\t\t\t// transfer the buffer back, and decode again with the second configuration. That\n\t\t\t\t// is complex, and I don't know of any reason to decode a Draco buffer twice in\n\t\t\t\t// different ways, so this is left unimplemented.\n\t\t\t\tthrow new Error(\n\n\t\t\t\t\t'THREE.DRACOLoader: Unable to re-decode a buffer with different ' +\n\t\t\t\t\t'settings. Buffer has already been transferred.'\n\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tlet worker;\n\t\tconst taskID = this.workerNextTaskID ++;\n\t\tconst taskCost = buffer.byteLength;\n\n\t\t// Obtain a worker and assign a task, and construct a geometry instance\n\t\t// when the task completes.\n\t\tconst geometryPending = this._getWorker( taskID, taskCost )\n\t\t\t.then( ( _worker ) => {\n\n\t\t\t\tworker = _worker;\n\n\t\t\t\treturn new Promise( ( resolve, reject ) => {\n\n\t\t\t\t\tworker._callbacks[ taskID ] = { resolve, reject };\n\n\t\t\t\t\tworker.postMessage( { type: 'decode', id: taskID, taskConfig, buffer }, [ buffer ] );\n\n\t\t\t\t\t// this.debug();\n\n\t\t\t\t} );\n\n\t\t\t} )\n\t\t\t.then( ( message ) => this._createGeometry( message.geometry ) );\n\n\t\t// Remove task from the task list.\n\t\t// Note: replaced '.finally()' with '.catch().then()' block - iOS 11 support (#19416)\n\t\tgeometryPending\n\t\t\t.catch( () => true )\n\t\t\t.then( () => {\n\n\t\t\t\tif ( worker && taskID ) {\n\n\t\t\t\t\tthis._releaseTask( worker, taskID );\n\n\t\t\t\t\t// this.debug();\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t// Cache the task result.\n\t\t_taskCache.set( buffer, {\n\n\t\t\tkey: taskKey,\n\t\t\tpromise: geometryPending\n\n\t\t} );\n\n\t\treturn geometryPending;\n\n\t}\n\n\t_createGeometry( geometryData ) {\n\n\t\tconst geometry = new BufferGeometry();\n\n\t\tif ( geometryData.index ) {\n\n\t\t\tgeometry.setIndex( new BufferAttribute( geometryData.index.array, 1 ) );\n\n\t\t}\n\n\t\tfor ( let i = 0; i < geometryData.attributes.length; i ++ ) {\n\n\t\t\tconst result = geometryData.attributes[ i ];\n\t\t\tconst name = result.name;\n\t\t\tconst array = result.array;\n\t\t\tconst itemSize = result.itemSize;\n\n\t\t\tconst attribute = new BufferAttribute( array, itemSize );\n\n\t\t\tif ( name === 'color' ) {\n\n\t\t\t\tthis._assignVertexColorSpace( attribute, result.vertexColorSpace );\n\n\t\t\t\tattribute.normalized = ( array instanceof Float32Array ) === false;\n\n\t\t\t}\n\n\t\t\tgeometry.setAttribute( name, attribute );\n\n\t\t}\n\n\t\treturn geometry;\n\n\t}\n\n\t_assignVertexColorSpace( attribute, inputColorSpace ) {\n\n\t\t// While .drc files do not specify colorspace, the only 'official' tooling\n\t\t// is PLY and OBJ converters, which use sRGB. We'll assume sRGB when a .drc\n\t\t// file is passed into .load() or .parse(). GLTFLoader uses internal APIs\n\t\t// to decode geometry, and vertex colors are already Linear-sRGB in there.\n\n\t\tif ( inputColorSpace !== SRGBColorSpace ) return;\n\n\t\tconst _color = new Color();\n\n\t\tfor ( let i = 0, il = attribute.count; i < il; i ++ ) {\n\n\t\t\t_color.fromBufferAttribute( attribute, i );\n\t\t\tColorManagement.colorSpaceToWorking( _color, SRGBColorSpace );\n\t\t\tattribute.setXYZ( i, _color.r, _color.g, _color.b );\n\n\t\t}\n\n\t}\n\n\t_loadLibrary( url, responseType ) {\n\n\t\tconst loader = new FileLoader( this.manager );\n\t\tloader.setPath( this.decoderPath );\n\t\tloader.setResponseType( responseType );\n\t\tloader.setWithCredentials( this.withCredentials );\n\n\t\treturn new Promise( ( resolve, reject ) => {\n\n\t\t\tloader.load( url, resolve, undefined, reject );\n\n\t\t} );\n\n\t}\n\n\tpreload() {\n\n\t\tthis._initDecoder();\n\n\t\treturn this;\n\n\t}\n\n\t_initDecoder() {\n\n\t\tif ( this.decoderPending ) return this.decoderPending;\n\n\t\tconst useJS = typeof WebAssembly !== 'object' || this.decoderConfig.type === 'js';\n\t\tconst librariesPending = [];\n\n\t\tif ( useJS ) {\n\n\t\t\tlibrariesPending.push( this._loadLibrary( 'draco_decoder.js', 'text' ) );\n\n\t\t} else {\n\n\t\t\tlibrariesPending.push( this._loadLibrary( 'draco_wasm_wrapper.js', 'text' ) );\n\t\t\tlibrariesPending.push( this._loadLibrary( 'draco_decoder.wasm', 'arraybuffer' ) );\n\n\t\t}\n\n\t\tthis.decoderPending = Promise.all( librariesPending )\n\t\t\t.then( ( libraries ) => {\n\n\t\t\t\tconst jsContent = libraries[ 0 ];\n\n\t\t\t\tif ( ! useJS ) {\n\n\t\t\t\t\tthis.decoderConfig.wasmBinary = libraries[ 1 ];\n\n\t\t\t\t}\n\n\t\t\t\tconst fn = DRACOWorker.toString();\n\n\t\t\t\tconst body = [\n\t\t\t\t\t'/* draco decoder */',\n\t\t\t\t\tjsContent,\n\t\t\t\t\t'',\n\t\t\t\t\t'/* worker */',\n\t\t\t\t\tfn.substring( fn.indexOf( '{' ) + 1, fn.lastIndexOf( '}' ) )\n\t\t\t\t].join( '\\n' );\n\n\t\t\t\tthis.workerSourceURL = URL.createObjectURL( new Blob( [ body ] ) );\n\n\t\t\t} );\n\n\t\treturn this.decoderPending;\n\n\t}\n\n\t_getWorker( taskID, taskCost ) {\n\n\t\treturn this._initDecoder().then( () => {\n\n\t\t\tif ( this.workerPool.length < this.workerLimit ) {\n\n\t\t\t\tconst worker = new Worker( this.workerSourceURL );\n\n\t\t\t\tworker._callbacks = {};\n\t\t\t\tworker._taskCosts = {};\n\t\t\t\tworker._taskLoad = 0;\n\n\t\t\t\tworker.postMessage( { type: 'init', decoderConfig: this.decoderConfig } );\n\n\t\t\t\tworker.onmessage = function ( e ) {\n\n\t\t\t\t\tconst message = e.data;\n\n\t\t\t\t\tswitch ( message.type ) {\n\n\t\t\t\t\t\tcase 'decode':\n\t\t\t\t\t\t\tworker._callbacks[ message.id ].resolve( message );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'error':\n\t\t\t\t\t\t\tworker._callbacks[ message.id ].reject( message );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tconsole.error( 'THREE.DRACOLoader: Unexpected message, \"' + message.type + '\"' );\n\n\t\t\t\t\t}\n\n\t\t\t\t};\n\n\t\t\t\tthis.workerPool.push( worker );\n\n\t\t\t} else {\n\n\t\t\t\tthis.workerPool.sort( function ( a, b ) {\n\n\t\t\t\t\treturn a._taskLoad > b._taskLoad ? - 1 : 1;\n\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\tconst worker = this.workerPool[ this.workerPool.length - 1 ];\n\t\t\tworker._taskCosts[ taskID ] = taskCost;\n\t\t\tworker._taskLoad += taskCost;\n\t\t\treturn worker;\n\n\t\t} );\n\n\t}\n\n\t_releaseTask( worker, taskID ) {\n\n\t\tworker._taskLoad -= worker._taskCosts[ taskID ];\n\t\tdelete worker._callbacks[ taskID ];\n\t\tdelete worker._taskCosts[ taskID ];\n\n\t}\n\n\tdebug() {\n\n\t\tconsole.log( 'Task load: ', this.workerPool.map( ( worker ) => worker._taskLoad ) );\n\n\t}\n\n\tdispose() {\n\n\t\tfor ( let i = 0; i < this.workerPool.length; ++ i ) {\n\n\t\t\tthis.workerPool[ i ].terminate();\n\n\t\t}\n\n\t\tthis.workerPool.length = 0;\n\n\t\tif ( this.workerSourceURL !== '' ) {\n\n\t\t\tURL.revokeObjectURL( this.workerSourceURL );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n}\n\n/* WEB WORKER */\n\nfunction DRACOWorker() {\n\n\tlet decoderConfig;\n\tlet decoderPending;\n\n\tonmessage = function ( e ) {\n\n\t\tconst message = e.data;\n\n\t\tswitch ( message.type ) {\n\n\t\t\tcase 'init':\n\t\t\t\tdecoderConfig = message.decoderConfig;\n\t\t\t\tdecoderPending = new Promise( function ( resolve/*, reject*/ ) {\n\n\t\t\t\t\tdecoderConfig.onModuleLoaded = function ( draco ) {\n\n\t\t\t\t\t\t// Module is Promise-like. Wrap before resolving to avoid loop.\n\t\t\t\t\t\tresolve( { draco: draco } );\n\n\t\t\t\t\t};\n\n\t\t\t\t\tDracoDecoderModule( decoderConfig ); // eslint-disable-line no-undef\n\n\t\t\t\t} );\n\t\t\t\tbreak;\n\n\t\t\tcase 'decode':\n\t\t\t\tconst buffer = message.buffer;\n\t\t\t\tconst taskConfig = message.taskConfig;\n\t\t\t\tdecoderPending.then( ( module ) => {\n\n\t\t\t\t\tconst draco = module.draco;\n\t\t\t\t\tconst decoder = new draco.Decoder();\n\n\t\t\t\t\ttry {\n\n\t\t\t\t\t\tconst geometry = decodeGeometry( draco, decoder, new Int8Array( buffer ), taskConfig );\n\n\t\t\t\t\t\tconst buffers = geometry.attributes.map( ( attr ) => attr.array.buffer );\n\n\t\t\t\t\t\tif ( geometry.index ) buffers.push( geometry.index.array.buffer );\n\n\t\t\t\t\t\tself.postMessage( { type: 'decode', id: message.id, geometry }, buffers );\n\n\t\t\t\t\t} catch ( error ) {\n\n\t\t\t\t\t\tconsole.error( error );\n\n\t\t\t\t\t\tself.postMessage( { type: 'error', id: message.id, error: error.message } );\n\n\t\t\t\t\t} finally {\n\n\t\t\t\t\t\tdraco.destroy( decoder );\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\t\t\t\tbreak;\n\n\t\t}\n\n\t};\n\n\tfunction decodeGeometry( draco, decoder, array, taskConfig ) {\n\n\t\tconst attributeIDs = taskConfig.attributeIDs;\n\t\tconst attributeTypes = taskConfig.attributeTypes;\n\n\t\tlet dracoGeometry;\n\t\tlet decodingStatus;\n\n\t\tconst geometryType = decoder.GetEncodedGeometryType( array );\n\n\t\tif ( geometryType === draco.TRIANGULAR_MESH ) {\n\n\t\t\tdracoGeometry = new draco.Mesh();\n\t\t\tdecodingStatus = decoder.DecodeArrayToMesh( array, array.byteLength, dracoGeometry );\n\n\t\t} else if ( geometryType === draco.POINT_CLOUD ) {\n\n\t\t\tdracoGeometry = new draco.PointCloud();\n\t\t\tdecodingStatus = decoder.DecodeArrayToPointCloud( array, array.byteLength, dracoGeometry );\n\n\t\t} else {\n\n\t\t\tthrow new Error( 'THREE.DRACOLoader: Unexpected geometry type.' );\n\n\t\t}\n\n\t\tif ( ! decodingStatus.ok() || dracoGeometry.ptr === 0 ) {\n\n\t\t\tthrow new Error( 'THREE.DRACOLoader: Decoding failed: ' + decodingStatus.error_msg() );\n\n\t\t}\n\n\t\tconst geometry = { index: null, attributes: [] };\n\n\t\t// Gather all vertex attributes.\n\t\tfor ( const attributeName in attributeIDs ) {\n\n\t\t\tconst attributeType = self[ attributeTypes[ attributeName ] ];\n\n\t\t\tlet attribute;\n\t\t\tlet attributeID;\n\n\t\t\t// A Draco file may be created with default vertex attributes, whose attribute IDs\n\t\t\t// are mapped 1:1 from their semantic name (POSITION, NORMAL, ...). Alternatively,\n\t\t\t// a Draco file may contain a custom set of attributes, identified by known unique\n\t\t\t// IDs. glTF files always do the latter, and `.drc` files typically do the former.\n\t\t\tif ( taskConfig.useUniqueIDs ) {\n\n\t\t\t\tattributeID = attributeIDs[ attributeName ];\n\t\t\t\tattribute = decoder.GetAttributeByUniqueId( dracoGeometry, attributeID );\n\n\t\t\t} else {\n\n\t\t\t\tattributeID = decoder.GetAttributeId( dracoGeometry, draco[ attributeIDs[ attributeName ] ] );\n\n\t\t\t\tif ( attributeID === - 1 ) continue;\n\n\t\t\t\tattribute = decoder.GetAttribute( dracoGeometry, attributeID );\n\n\t\t\t}\n\n\t\t\tconst attributeResult = decodeAttribute( draco, decoder, dracoGeometry, attributeName, attributeType, attribute );\n\n\t\t\tif ( attributeName === 'color' ) {\n\n\t\t\t\tattributeResult.vertexColorSpace = taskConfig.vertexColorSpace;\n\n\t\t\t}\n\n\t\t\tgeometry.attributes.push( attributeResult );\n\n\t\t}\n\n\t\t// Add index.\n\t\tif ( geometryType === draco.TRIANGULAR_MESH ) {\n\n\t\t\tgeometry.index = decodeIndex( draco, decoder, dracoGeometry );\n\n\t\t}\n\n\t\tdraco.destroy( dracoGeometry );\n\n\t\treturn geometry;\n\n\t}\n\n\tfunction decodeIndex( draco, decoder, dracoGeometry ) {\n\n\t\tconst numFaces = dracoGeometry.num_faces();\n\t\tconst numIndices = numFaces * 3;\n\t\tconst byteLength = numIndices * 4;\n\n\t\tconst ptr = draco._malloc( byteLength );\n\t\tdecoder.GetTrianglesUInt32Array( dracoGeometry, byteLength, ptr );\n\t\tconst index = new Uint32Array( draco.HEAPF32.buffer, ptr, numIndices ).slice();\n\t\tdraco._free( ptr );\n\n\t\treturn { array: index, itemSize: 1 };\n\n\t}\n\n\tfunction decodeAttribute( draco, decoder, dracoGeometry, attributeName, attributeType, attribute ) {\n\n\t\tconst numComponents = attribute.num_components();\n\t\tconst numPoints = dracoGeometry.num_points();\n\t\tconst numValues = numPoints * numComponents;\n\t\tconst byteLength = numValues * attributeType.BYTES_PER_ELEMENT;\n\t\tconst dataType = getDracoDataType( draco, attributeType );\n\n\t\tconst ptr = draco._malloc( byteLength );\n\t\tdecoder.GetAttributeDataArrayForAllPoints( dracoGeometry, attribute, dataType, byteLength, ptr );\n\t\tconst array = new attributeType( draco.HEAPF32.buffer, ptr, numValues ).slice();\n\t\tdraco._free( ptr );\n\n\t\treturn {\n\t\t\tname: attributeName,\n\t\t\tarray: array,\n\t\t\titemSize: numComponents\n\t\t};\n\n\t}\n\n\tfunction getDracoDataType( draco, attributeType ) {\n\n\t\tswitch ( attributeType ) {\n\n\t\t\tcase Float32Array: return draco.DT_FLOAT32;\n\t\t\tcase Int8Array: return draco.DT_INT8;\n\t\t\tcase Int16Array: return draco.DT_INT16;\n\t\t\tcase Int32Array: return draco.DT_INT32;\n\t\t\tcase Uint8Array: return draco.DT_UINT8;\n\t\t\tcase Uint16Array: return draco.DT_UINT16;\n\t\t\tcase Uint32Array: return draco.DT_UINT32;\n\n\t\t}\n\n\t}\n\n}\n\nexport { DRACOLoader };\n"],"mappings":"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"}